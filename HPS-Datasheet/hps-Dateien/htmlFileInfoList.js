fil = new Array();
fil["0"]= "hps/address_map_chg/dfifo_addrmap_r.html@@@USB Data FIFO Address Map@@@These regions, available in both Host and Device modes, are a push/pop FIFO space for a specific endpoint or a channel, in a given direction. If a host channel is of type IN, the FIFO can only be read on the channel. Similarly, if a host channel is of type OUT, the FIFO can only be written on the channel...";
fil["1"]= "hps/address_map_chg/usbdirectfifo_addrmap_r.html@@@USB Direct Access FIFO RAM Address Map@@@This address space provides direct access to the Data FIFO RAM for debugging...";
fil["2"]= "reg_default_component/addressblock_acpidmap.html@@@ACP ID Mapper Registers Summary@@@Registers in the ACP ID Mapper module...";
fil["3"]= "reg_default_component/addressblock_acpidmap_summary.html@@@ACP ID Mapper Registers Address Map@@@Registers in the ACP ID Mapper module...";
fil["4"]= "reg_default_component/addressblock_can.html@@@CAN Controller Module Summary@@@Registers in the CAN Controller module NOTE: These descriptions apply only to SoC devices that support the CAN module...";
fil["5"]= "reg_default_component/addressblock_can_can_msghandgrp.html@@@Message Handler Group Register Descriptions@@@These registers are related to the operation of the Message Handler. The Message Handler is a state machine that controls the data transfer between the single ported Message RAM and the CAN Core s Rx/Tx Shift Register. It also handles acceptance filtering and the interrupt setting as programmed in the Control and Configuration Registers...";
fil["6"]= "reg_default_component/addressblock_can_can_msgifgrp.html@@@Message Interface Group Register Descriptions@@@These registers provide indirect read and write access for the host CPU to the Message RAM. Buffers the data to be transferred to and from the RAM, avoiding conflicts between CPU accesses and CAN frame reception/transmission. The function of the two Interface Register sets is identical. The second interface register set is provided to serve application programming. Two groups of software drivers may defined, each group is restricted to the use of one of the Interface Register sets. The software drivers of one group may interrupt software drivers of the other group, but not of the same group. In a simple example, there is one Read_Message task that uses IF1 to get received messages from the Message RAM and there is one Write_Message task that uses IF2 to write messages to be transmitted into the Message RAM. Both tasks may interrupt each other. Each set of Interface Registers consists controlled by their own Command Registers. The Command Mask Register specifies the direction of the data transfer and which parts of a Message Object will be transferred. The Command Request Register is used to select a Message Object in the Message RAM as target or source for the transfer and to start the action specified in the Command Mask Register...";
fil["7"]= "reg_default_component/addressblock_can_can_protogrp.html@@@Protocol Group Register Descriptions@@@These registers are related to the CAN protocol controller in the CAN Core. They control the operating modes and the configuration of the CAN bit timing and provide status information...";
fil["8"]= "reg_default_component/addressblock_can_summary.html@@@CAN Controller Module Address Map@@@Registers in the CAN Controller module NOTE: These descriptions apply only to SoC devices that support the CAN module...";
fil["9"]= "reg_default_component/addressblock_clkmgr.html@@@Clock Manager Module Summary@@@Registers in the Clock Manager module...";
fil["10"]= "reg_default_component/addressblock_clkmgr_clkmgr_mainpllgrp.html@@@Main PLL Group Register Descriptions@@@Contains registers with settings for the Main PLL...";
fil["11"]= "reg_default_component/addressblock_clkmgr_clkmgr_perpllgrp.html@@@Peripheral PLL Group Register Descriptions@@@Contains registers with settings for the Peripheral PLL...";
fil["12"]= "reg_default_component/addressblock_clkmgr_clkmgr_sdrpllgrp.html@@@SDRAM PLL Group Register Descriptions@@@Contains registers with settings for the SDRAM PLL...";
fil["13"]= "reg_default_component/addressblock_clkmgr_summary.html@@@Clock Manager Module Address Map@@@Registers in the Clock Manager module...";
fil["14"]= "reg_default_component/addressblock_dap_summary.html@@@Debug Access Port (DAP) Module Address Map@@@This address space is allocated to the Debug Access Port (DAP). For detailed information about the use of this address space, click here to access the ARM documentation for the DAP...";
fil["15"]= "reg_default_component/addressblock_dmanonsecure_summary.html@@@Non-Secure DMA Module Address Map@@@This address space is allocated for non-secure DMA accesses. For detailed information about the use of this address space, click here to access the ARM documentation for the DMA-33...";
fil["16"]= "reg_default_component/addressblock_dmasecure_summary.html@@@Secure DMA Module Address Map@@@This address space is allocated for secure DMA accesses. For detailed information about the use of this address space, click here to access the ARM documentation for the DMA-33...";
fil["17"]= "reg_default_component/addressblock_emac.html@@@EMAC Module Summary@@@Registers in the EMAC module...";
fil["18"]= "reg_default_component/addressblock_emac_emac_dmagrp.html@@@DMA Register Group Register Descriptions@@@DMA Register Group...";
fil["19"]= "reg_default_component/addressblock_emac_emac_gmacgrp.html@@@GMAC Register Group Register Descriptions@@@GMAC Register Group...";
fil["20"]= "reg_default_component/addressblock_emac_summary.html@@@EMAC Module Address Map@@@Registers in the EMAC module...";
fil["21"]= "reg_default_component/addressblock_fpga2hpsregs.html@@@FPGA2HPS AXI Bridge Module Summary@@@Registers in the FPGA2HPS AXI Bridge Module...";
fil["22"]= "reg_default_component/addressblock_fpga2hpsregs_fpga2hpsregs_idgrp.html@@@ID Register Group Register Descriptions@@@Contains registers that identify the ARM NIC-301 IP Core...";
fil["23"]= "reg_default_component/addressblock_fpga2hpsregs_fpga2hpsregs_slavegrp.html@@@Slave Register Group Register Descriptions@@@Registers associated with slave interfaces...";
fil["24"]= "reg_default_component/addressblock_fpga2hpsregs_fpga2hpsregs_slavegrp_fpga2hpsregs_slavegrp_b128.html@@@128-bit Slave Register Descriptions@@@Registers associated with the 128-bit AXI slave interface. These registers are only active when the FPGA2HPS AXI Bridge is configured with a 128-bit FPGA AXI slave interface...";
fil["25"]= "reg_default_component/addressblock_fpga2hpsregs_fpga2hpsregs_slavegrp_fpga2hpsregs_slavegrp_b32.html@@@32-bit Slave Register Descriptions@@@Registers associated with the 32-bit AXI slave interface. These registers are only active when the FPGA2HPS AXI Bridge is configured with a 32-bit FPGA AXI slave interface...";
fil["26"]= "reg_default_component/addressblock_fpga2hpsregs_summary.html@@@FPGA2HPS AXI Bridge Module Address Map@@@Registers in the FPGA2HPS AXI Bridge Module...";
fil["27"]= "reg_default_component/addressblock_fpgamgrdata.html@@@FPGA Manager Module Configuration Data Summary@@@Registers in the FPGA Manager module accessible via its AXI slave...";
fil["28"]= "reg_default_component/addressblock_fpgamgrdata_summary.html@@@FPGA Manager Module Configuration Data Address Map@@@Registers in the FPGA Manager module accessible via its AXI slave...";
fil["29"]= "reg_default_component/addressblock_fpgamgrregs.html@@@FPGA Manager Module Summary@@@Registers in the FPGA Manager module accessible via its APB slave...";
fil["30"]= "reg_default_component/addressblock_fpgamgrregs_mon.html@@@Configuration Monitor (MON) Registers Register Descriptions@@@The Configuration Monitor allows software to poll or be interrupted by changes in the FPGA state. The Configuration Monitor is an instantiation of a Synopsys GPIO...";
fil["31"]= "reg_default_component/addressblock_fpgamgrregs_summary.html@@@FPGA Manager Module Address Map@@@Registers in the FPGA Manager module accessible via its APB slave...";
fil["32"]= "reg_default_component/addressblock_gpio.html@@@GPIO Module Summary@@@Registers in the GPIO module...";
fil["33"]= "reg_default_component/addressblock_gpio_summary.html@@@GPIO Module Address Map@@@Registers in the GPIO module...";
fil["34"]= "reg_default_component/addressblock_hps.html@@@hps@@@Address map for the HHP HPS system-domain...";
fil["35"]= "reg_default_component/addressblock_hps2fpgaregs.html@@@HPS2FPGA AXI Bridge Module Summary@@@Registers in the HPS2FPGA AXI Bridge Module...";
fil["36"]= "reg_default_component/addressblock_hps2fpgaregs_hps2fpgaregs_idgrp.html@@@ID Register Group Register Descriptions@@@Contains registers that identify the ARM NIC-301 IP Core...";
fil["37"]= "reg_default_component/addressblock_hps2fpgaregs_hps2fpgaregs_mastergrp.html@@@Master Register Group Register Descriptions@@@Registers associated with master interfaces...";
fil["38"]= "reg_default_component/addressblock_hps2fpgaregs_hps2fpgaregs_mastergrp_hps2fpgaregs_mastergrp_b128.html@@@128-bit Master Register Descriptions@@@Registers associated with the 128-bit AXI master interface. These registers are only active when the HPS2FPGA AXI Bridge is configured with a 128-bit FPGA AXI master interface...";
fil["39"]= "reg_default_component/addressblock_hps2fpgaregs_hps2fpgaregs_mastergrp_hps2fpgaregs_mastergrp_b32.html@@@32-bit Master Register Descriptions@@@Registers associated with the 32-bit AXI master interface. These registers are only active when the HPS2FPGA AXI Bridge is configured with a 32-bit FPGA AXI master interface...";
fil["40"]= "reg_default_component/addressblock_hps2fpgaregs_summary.html@@@HPS2FPGA AXI Bridge Module Address Map@@@Registers in the HPS2FPGA AXI Bridge Module...";
fil["41"]= "reg_default_component/addressblock_i2c.html@@@I2C Module Summary@@@Registers in the I2C module...";
fil["42"]= "reg_default_component/addressblock_i2c_summary.html@@@I2C Module Address Map@@@Registers in the I2C module...";
fil["43"]= "reg_default_component/addressblock_l3regs.html@@@L3 (NIC-301) GPV Registers Summary@@@Registers to control L3 interconnect settings...";
fil["44"]= "reg_default_component/addressblock_l3regs_l3regs_idgrp.html@@@ID Register Group Register Descriptions@@@Contains registers that identify the ARM NIC-301 IP Core...";
fil["45"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp.html@@@Master Register Group Register Descriptions@@@Registers associated with master interfaces in the L3 Interconnect. Note that a master in the L3 Interconnect connects to a slave in a module...";
fil["46"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_acp.html@@@ACP Register Descriptions@@@Registers associated with the ACP master. This master is used to access the MPU ACP slave via the ACP ID Mapper...";
fil["47"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_fpgamgrdata.html@@@FPGAMGRDATA Register Descriptions@@@Registers associated with the FPGAMGRDATA master. This master is used to send FPGA configuration image data to the FPGA Manager...";
fil["48"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_hps2fpga.html@@@HPS2FPGA Register Descriptions@@@Registers associated with the HPS2FPGA AXI Bridge master. This master is used to access the HPS2FPGA AXI Bridge slave. This slave is used to access slaves in the FPGA connected to the HPS2FPGA AXI Bridge...";
fil["49"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_l4main.html@@@L4 MAIN Register Descriptions@@@Registers associated with the L4 MAIN master. This master is used to access the APB slaves on the L4 MAIN bus...";
fil["50"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_l4mp.html@@@L4 MP Register Descriptions@@@Registers associated with the L4 MP master. This master is used to access the APB slaves on the L4 MP bus...";
fil["51"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_l4osc1.html@@@L4 OSC1 Register Descriptions@@@Registers associated with the L4 OSC1 master. This master is used to access the APB slaves on the L4 OSC1 bus...";
fil["52"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_l4sp.html@@@L4 SP Register Descriptions@@@Registers associated with the L4 SP master. This master is used to access the APB slaves on the L4 SP bus...";
fil["53"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_l4spim.html@@@L4 SPIM Register Descriptions@@@Registers associated with the L4 SPIM master. This master is used to access the APB slaves on the L4 SPIM bus...";
fil["54"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_lwhps2fpga.html@@@LWHPS2FPGA Register Descriptions@@@Registers associated with the LWHPS2FPGA AXI Bridge master. This master is used to access the LWHPS2FPGA AXI Bridge slave. This slave is used to access the registers for all 3 AXI bridges and to access slaves in the FPGA connected to the LWHPS2FPGA AXI Bridge...";
fil["55"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_nanddata.html@@@NANDDATA Register Descriptions@@@Registers associated with the NANDDATA master. This master is used to access data in the NAND flash controller...";
fil["56"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_nandregs.html@@@NANDREGS Register Descriptions@@@Registers associated with the NANDREGS master. This master is used to access the registers in the NAND flash controller...";
fil["57"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_ocram.html@@@On-chip RAM Register Descriptions@@@Registers associated with the On-chip RAM master. This master is used to access the contents of the On-chip RAM...";
fil["58"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_qspidata.html@@@QSPIDATA Register Descriptions@@@Registers associated with the QSPIDATA master. This master is used to access data in the QSPI flash controller...";
fil["59"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_rom.html@@@Boot ROM Register Descriptions@@@Registers associated with the Boot ROM master. This master is used to access the contents of the Boot ROM...";
fil["60"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_stm.html@@@STM Register Descriptions@@@Registers associated with the STM master. This master is used to access the STM AXI slave...";
fil["61"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_usb0.html@@@USB0 Register Descriptions@@@Registers associated with the USB0 master. This master is used to access the registers in USB...";
fil["62"]= "reg_default_component/addressblock_l3regs_l3regs_mastergrp_l3regs_mastergrp_usb1.html@@@USB1 Register Descriptions@@@Registers associated with the USB1 master. This master is used to access the registers in USB1...";
fil["63"]= "reg_default_component/addressblock_l3regs_l3regs_secgrp.html@@@Security Register Group Register Descriptions@@@Registers that control slave security...";
fil["64"]= "reg_default_component/addressblock_l3regs_l3regs_slavegrp.html@@@Slave Register Group Register Descriptions@@@Registers associated with slave interfaces...";
fil["65"]= "reg_default_component/addressblock_l3regs_l3regs_slavegrp_l3regs_slavegrp_dap.html@@@DAP Register Descriptions@@@Registers associated with the DAP slave interface. This slave is used by the DAP to access slaves attached to the L3/L4 Interconnect...";
fil["66"]= "reg_default_component/addressblock_l3regs_l3regs_slavegrp_l3regs_slavegrp_dma.html@@@DMA Register Descriptions@@@Registers associated with the DMA Controller slave interface. This slave is used by the DMA Controller to access slaves attached to the L3/L4 Interconnect...";
fil["67"]= "reg_default_component/addressblock_l3regs_l3regs_slavegrp_l3regs_slavegrp_emac0.html@@@EMAC0 Register Descriptions@@@Registers associated with the EMAC0 slave interface. This slave is used by the DMA controller built into the EMAC0 to access slaves attached to the L3/L4 Interconnect...";
fil["68"]= "reg_default_component/addressblock_l3regs_l3regs_slavegrp_l3regs_slavegrp_emac1.html@@@EMAC1 Register Descriptions@@@Registers associated with the EMAC1 slave interface. This slave is used by the DMA controller built into the EMAC1 to access slaves attached to the L3/L4 Interconnect...";
fil["69"]= "reg_default_component/addressblock_l3regs_l3regs_slavegrp_l3regs_slavegrp_etr.html@@@ETR Register Descriptions@@@Registers associated with the ETR (TMC) slave interface. This slave is used by the ETR to access slaves attached to the L3/L4 Interconnect...";
fil["70"]= "reg_default_component/addressblock_l3regs_l3regs_slavegrp_l3regs_slavegrp_fpga2hps.html@@@FPGA2HPS Register Descriptions@@@Registers associated with the FPGA2HPS AXI Bridge slave interface. This slave is used by the FPGA2HPS AXI Bridge to access slaves attached to the L3/L4 Interconnect...";
fil["71"]= "reg_default_component/addressblock_l3regs_l3regs_slavegrp_l3regs_slavegrp_mpu.html@@@MPU Register Descriptions@@@Registers associated with the MPU slave interface. This slave is used by the MPU to access slaves attached to the L3/L4 Interconnect...";
fil["72"]= "reg_default_component/addressblock_l3regs_l3regs_slavegrp_l3regs_slavegrp_nand.html@@@NAND Register Descriptions@@@Registers associated with the NAND slave interface. This slave is used by the DMA controller built into the NAND flash controller to access slaves attached to the L3/L4 Interconnect...";
fil["73"]= "reg_default_component/addressblock_l3regs_l3regs_slavegrp_l3regs_slavegrp_sdmmc.html@@@SDMMC Register Descriptions@@@Registers associated with the SDMMC slave interface. This slave is used by the DMA controller built into the SDMMC to access slaves attached to the L3/L4 Interconnect...";
fil["74"]= "reg_default_component/addressblock_l3regs_l3regs_slavegrp_l3regs_slavegrp_usb0.html@@@USB0 Register Descriptions@@@Registers associated with the USB0 slave interface. This slave is used by the DMA controller built into the USB0 to access slaves attached to the L3/L4 Interconnect...";
fil["75"]= "reg_default_component/addressblock_l3regs_l3regs_slavegrp_l3regs_slavegrp_usb1.html@@@USB1 Register Descriptions@@@Registers associated with the USB1 slave interface. This slave is used by the DMA controller built into the USB1 to access slaves attached to the L3/L4 Interconnect...";
fil["76"]= "reg_default_component/addressblock_l3regs_summary.html@@@L3 (NIC-301) GPV Registers Address Map@@@Registers to control L3 interconnect settings...";
fil["77"]= "reg_default_component/addressblock_l4wd.html@@@L4 Watchdog Module Summary@@@Registers in the L4 Watchdog module...";
fil["78"]= "reg_default_component/addressblock_l4wd_summary.html@@@L4 Watchdog Module Address Map@@@Registers in the L4 Watchdog module...";
fil["79"]= "reg_default_component/addressblock_lwfpgaslaves_summary.html@@@FPGA Slaves Accessed Via Lightweight HPS2FPGA AXI Bridge (lwfpgaslaves) Address Map@@@This address space is allocated for FPGA-configured slaves driven by the lightweight HPS-to-FPGA bridge master. Address assignment within this space is user-defined. For more information about Lightweight HPS-to-FPGA bridges, refer to the HPS-FPGA Bridges chapter of the Hard Processor System Technical Reference Manual...";
fil["80"]= "reg_default_component/addressblock_lwhps2fpgaregs.html@@@LWHPS2FPGA AXI Bridge Module Summary@@@Registers in the LWHPS2FPGA AXI Bridge Module...";
fil["81"]= "reg_default_component/addressblock_lwhps2fpgaregs_lwhps2fpgaregs_idgrp.html@@@ID Register Group Register Descriptions@@@Contains registers that identify the ARM NIC-301 IP Core...";
fil["82"]= "reg_default_component/addressblock_lwhps2fpgaregs_lwhps2fpgaregs_mastergrp.html@@@Master Register Group Register Descriptions@@@Registers associated with master interfaces...";
fil["83"]= "reg_default_component/addressblock_lwhps2fpgaregs_lwhps2fpgaregs_mastergrp_lwhps2fpgaregs_mastergrp_b32.html@@@32-bit Master Register Descriptions@@@Registers associated with the 32-bit AXI master interface. This master provides access to slaves in the FPG...";
fil["84"]= "reg_default_component/addressblock_lwhps2fpgaregs_lwhps2fpgaregs_mastergrp_lwhps2fpgaregs_mastergrp_fpga2hpsregs.html@@@FPGA2HPS AXI Bridge Registers Register Descriptions@@@Registers associated with the FPGA2HPS master interface. This master interface provides access to the registers in the FPGA2HPS AXI Bridge...";
fil["85"]= "reg_default_component/addressblock_lwhps2fpgaregs_lwhps2fpgaregs_mastergrp_lwhps2fpgaregs_mastergrp_hps2fpgaregs.html@@@HPS2FPGA AXI Bridge Registers Register Descriptions@@@Registers associated with the HPS2FPGA master interface. This master interface provides access to the registers in the HPS2FPGA AXI Bridge...";
fil["86"]= "reg_default_component/addressblock_lwhps2fpgaregs_lwhps2fpgaregs_slavegrp.html@@@Slave Register Group Register Descriptions@@@Registers associated with slave interfaces...";
fil["87"]= "reg_default_component/addressblock_lwhps2fpgaregs_lwhps2fpgaregs_slavegrp_lwhps2fpgaregs_slavegrp_b32.html@@@L3 Slave Register Group Register Descriptions@@@Registers associated with the 32-bit AXI slave interface. This slave connects to the L3 Interconnect...";
fil["88"]= "reg_default_component/addressblock_lwhps2fpgaregs_summary.html@@@LWHPS2FPGA AXI Bridge Module Address Map@@@Registers in the LWHPS2FPGA AXI Bridge Module...";
fil["89"]= "reg_default_component/addressblock_mpul2_summary.html@@@MPU L2 Cache Controller (L2C-310) Module Address Map@@@This address space is allocated to the MPU L2 cache controller. For detailed information about the use of this address space, click here to access the ARM documentation for the L2C-31...";
fil["90"]= "reg_default_component/addressblock_mpuscu_summary.html@@@MPU Address Map@@@This address space is allocated to the MPU. For detailed information about the use of this address space, click here to access the ARM documentation for the Cortex-A9 MPCore...";
fil["91"]= "reg_default_component/addressblock_nanddata_summary.html@@@NAND Controller Module Data (AXI Slave) Address Map@@@This address space is allocated for indexed addressing by the NAND flash controller. For more information, please refer to the NAND Flash Controller chapter of the Hard Processor System Technical Reference Manual...";
fil["92"]= "reg_default_component/addressblock_nandregs.html@@@NAND Flash Controller Module Registers (AXI Slave) Summary@@@Registers in the NAND Flash Controller module accessible via its register AXI slave...";
fil["93"]= "reg_default_component/addressblock_nandregs_nandregs_config.html@@@Configuration registers Register Descriptions@@@Common across all types of flash devices, configuration registers setup the basic operating modes of the controller...";
fil["94"]= "reg_default_component/addressblock_nandregs_nandregs_dma.html@@@DMA registers Register Descriptions@@@Offset: 0x7...";
fil["95"]= "reg_default_component/addressblock_nandregs_nandregs_ecc.html@@@ECC registers Register Descriptions@@@Offset: 0x65...";
fil["96"]= "reg_default_component/addressblock_nandregs_nandregs_param.html@@@Device parameters Register Descriptions@@@Controller reads device parameters after initialization and stores in the following registers for software...";
fil["97"]= "reg_default_component/addressblock_nandregs_nandregs_status.html@@@Interrupt and Status Registers Register Descriptions@@@Contains interrupt and status registers of controller accessible by software...";
fil["98"]= "reg_default_component/addressblock_nandregs_summary.html@@@NAND Flash Controller Module Registers (AXI Slave) Address Map@@@Registers in the NAND Flash Controller module accessible via its register AXI slave...";
fil["99"]= "reg_default_component/addressblock_ocram_summary.html@@@On-chip RAM Address Map@@@This is the address space allocated to the on-chip RAM. The on-chip RAM can be used by the HPS for storing data or user code...";
fil["100"]= "reg_default_component/addressblock_qspidata_summary.html@@@QSPI Flash Module Data (AHB Slave) Address Map@@@This address space is allocated for QSPI direct, indirect, and SPI legacy mode accesses. For more information, please refer to the Quad SPI Flash Controller chapter in the Hard Processor System Technical Reference Manual...";
fil["101"]= "reg_default_component/addressblock_qspiregs.html@@@QSPI Flash Controller Module Registers Summary@@@Registers in the QSPI Flash Controller module accessible via its APB slave...";
fil["102"]= "reg_default_component/addressblock_qspiregs_summary.html@@@QSPI Flash Controller Module Registers Address Map@@@Registers in the QSPI Flash Controller module accessible via its APB slave...";
fil["103"]= "reg_default_component/addressblock_rom_summary.html@@@Boot ROM Address Map@@@This address range is allocated for the boot ROM...";
fil["104"]= "reg_default_component/addressblock_rstmgr.html@@@Reset Manager Module Summary@@@Registers in the Reset Manager module...";
fil["105"]= "reg_default_component/addressblock_rstmgr_summary.html@@@Reset Manager Module Address Map@@@Registers in the Reset Manager module...";
fil["106"]= "reg_default_component/addressblock_scanmgr.html@@@Scan Manager Module Registers Summary@@@Registers in the Scan Manager module. These registers are implemented by an ARM JTAG-AP module from the ARM DAP. Some register and field names have been changed to match the usage in the Scan Manager. If modified, the corresponding names from the ARM documentation are provided. Only registers and fields that are relevant to the JTAG-AP use in the Scan Manager are listed...";
fil["107"]= "reg_default_component/addressblock_scanmgr_summary.html@@@Scan Manager Module Registers Address Map@@@Registers in the Scan Manager module. These registers are implemented by an ARM JTAG-AP module from the ARM DAP. Some register and field names have been changed to match the usage in the Scan Manager. If modified, the corresponding names from the ARM documentation are provided. Only registers and fields that are relevant to the JTAG-AP use in the Scan Manager are listed...";
fil["108"]= "reg_default_component/addressblock_sdmmc.html@@@SDMMC Module Summary@@@Registers in the SD/MMC module...";
fil["109"]= "reg_default_component/addressblock_sdmmc_summary.html@@@SDMMC Module Address Map@@@Registers in the SD/MMC module...";
fil["110"]= "reg_default_component/addressblock_sdr.html@@@SDRAM Controller Summary@@@Address map for the SDRAM Interface registers...";
fil["111"]= "reg_default_component/addressblock_sdr_sdr_ctrlgrp.html@@@SDRAM Controller Module Register Descriptions@@@Address map for the SDRAM controller and multi-port front-end. All registers in this group reset to zero...";
fil["112"]= "reg_default_component/addressblock_sdr_sdr_ctrlgrp_sdr_ctrlgrp_mpweight.html@@@Port Sum of Weight Register Register Descriptions@@@This register is used to configure the DRAM burst operation scheduling...";
fil["113"]= "reg_default_component/addressblock_sdr_summary.html@@@SDRAM Controller Address Map@@@Address map for the SDRAM Interface registers...";
fil["114"]= "reg_default_component/addressblock_spim.html@@@SPI Master Module Summary@@@Registers in the SPI Master module...";
fil["115"]= "reg_default_component/addressblock_spim_summary.html@@@SPI Master Module Address Map@@@Registers in the SPI Master module...";
fil["116"]= "reg_default_component/addressblock_spis.html@@@SPI Slave Module Summary@@@Registers in the SPI Slave module...";
fil["117"]= "reg_default_component/addressblock_spis_summary.html@@@SPI Slave Module Address Map@@@Registers in the SPI Slave module...";
fil["118"]= "reg_default_component/addressblock_stm_summary.html@@@System Trace Macrocell (STM) Module Address Map@@@This address space holds the registers used for Coresight System Trace Macrocell. For detailed information about the STM module and register descriptions, click here to access the ARM documentation for the CoreSight STM-101...";
fil["119"]= "reg_default_component/addressblock_sysmgr.html@@@System Manager Module Summary@@@Registers in the System Manager module...";
fil["120"]= "reg_default_component/addressblock_sysmgr_summary.html@@@System Manager Module Address Map@@@Registers in the System Manager module...";
fil["121"]= "reg_default_component/addressblock_sysmgr_sysmgr_dmagrp.html@@@DMA Controller Group Register Descriptions@@@Registers used by the DMA Controller to enable secured system support and select DMA channels...";
fil["122"]= "reg_default_component/addressblock_sysmgr_sysmgr_eccgrp.html@@@ECC Management Register Group Register Descriptions@@@ECC error status and control for all ECC-protected HPS RAM blocks...";
fil["123"]= "reg_default_component/addressblock_sysmgr_sysmgr_emacgrp.html@@@EMAC Group Register Descriptions@@@External control registers for the EMACs...";
fil["124"]= "reg_default_component/addressblock_sysmgr_sysmgr_fpgaintfgrp.html@@@FPGA Interface Group Register Descriptions@@@Registers used to enable/disable interfaces between the FPGA and HPS. Required for either of the following situations:[list][*]Interfaces that cannot be disabled by putting an HPS module associated with the interface into reset.[*]HPS modules that accept signals from the FPGA fabric and those signals might interfere with the normal operation of the module.[/list]. All registers are only reset by a cold reset (ignore warm reset...";
fil["125"]= "reg_default_component/addressblock_sysmgr_sysmgr_frzctrl.html@@@Freeze Control Group Register Descriptions@@@Registers used to generate HPS IO freeze signals. All registers are only reset by a cold reset (ignore warm reset...";
fil["126"]= "reg_default_component/addressblock_sysmgr_sysmgr_iswgrp.html@@@Preloader (initial software) Group Register Descriptions@@@Registers used by preloader code and the OS. All registers are only reset by a cold reset (ignore warm reset...";
fil["127"]= "reg_default_component/addressblock_sysmgr_sysmgr_nandgrp.html@@@NAND Flash Controller Register Group Register Descriptions@@@Registers related to NAND Flash Controller which aren t located in the NAND Flash Controller itself...";
fil["128"]= "reg_default_component/addressblock_sysmgr_sysmgr_pinmuxgrp.html@@@Pin Mux Control Group Register Descriptions@@@Controls Pin Mux selections NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["129"]= "reg_default_component/addressblock_sysmgr_sysmgr_romcodegrp.html@@@Boot ROM Code Register Group Register Descriptions@@@Registers used by the Boot ROM code. All fields are only reset by a cold reset (ignore warm reset...";
fil["130"]= "reg_default_component/addressblock_sysmgr_sysmgr_romcodegrp_sysmgr_romcodegrp_warmramgrp.html@@@Warm Boot from On-Chip RAM Group Register Descriptions@@@Registers used by the Boot ROM code to support booting from the On-chip RAM on a warm reset. All these registers must be written by user software before a warm reset occurs to make use of this feature...";
fil["131"]= "reg_default_component/addressblock_sysmgr_sysmgr_romhwgrp.html@@@Boot ROM Hardware Register Group Register Descriptions@@@Registers used by the Boot ROM hardware, not the code within it...";
fil["132"]= "reg_default_component/addressblock_sysmgr_sysmgr_scanmgrgrp.html@@@Scan Manager Group Register Descriptions@@@Registers related to the Scan Manager that aren t located inside the Scan Manager itself...";
fil["133"]= "reg_default_component/addressblock_sysmgr_sysmgr_sdmmcgrp.html@@@SDMMC Controller Group Register Descriptions@@@Registers related to SDMMC Controller which aren t located inside the SDMMC itself...";
fil["134"]= "reg_default_component/addressblock_sysmgr_sysmgr_usbgrp.html@@@USB Controller Group Register Descriptions@@@Registers related to USB Controllers which aren t located inside the USB controllers themselves...";
fil["135"]= "reg_default_component/addressblock_timer.html@@@Timer Module Summary@@@Registers in the timer module. The timer IP core supports multiple timers but it is configured for just one timer. The term Timer1 refers to this one timer in the IP core and not the module instance...";
fil["136"]= "reg_default_component/addressblock_timer_summary.html@@@Timer Module Address Map@@@Registers in the timer module. The timer IP core supports multiple timers but it is configured for just one timer. The term Timer1 refers to this one timer in the IP core and not the module instance...";
fil["137"]= "reg_default_component/addressblock_uart.html@@@UART Module Summary@@@Registers in the UART module...";
fil["138"]= "reg_default_component/addressblock_uart_summary.html@@@UART Module Address Map@@@Registers in the UART module...";
fil["139"]= "reg_default_component/addressblock_usb.html@@@USB OTG Controller Module Registers Summary@@@Registers in the USB OTG Controller Module. Only the Core Global, Power and Clock Gating, Data FIFO Access, and Host Port registers can be accessedin both Host and Device modes. When the USB OTG Controller is operating in one mode, either Device or Host, the application must not access registers from the other mode. If an illegal access occurs, a Mode Mismatch interrupt is generated and reflected in the Core Interrupt register (GINTSTS.ModeMis). When the core switches from one mode to another, the registers in the new mode must be reprogrammed as they would be after a power-on reset. The register address map is fixed and does not depend on the module configuration (for example, how many endpoints are implemented). Host and Device mode registers occupy different addresses...";
fil["140"]= "reg_default_component/addressblock_usb_summary.html@@@USB OTG Controller Module Registers Address Map@@@Registers in the USB OTG Controller Module. Only the Core Global, Power and Clock Gating, Data FIFO Access, and Host Port registers can be accessedin both Host and Device modes. When the USB OTG Controller is operating in one mode, either Device or Host, the application must not access registers from the other mode. If an illegal access occurs, a Mode Mismatch interrupt is generated and reflected in the Core Interrupt register (GINTSTS.ModeMis). When the core switches from one mode to another, the registers in the new mode must be reprogrammed as they would be after a power-on reset. The register address map is fixed and does not depend on the module configuration (for example, how many endpoints are implemented). Host and Device mode registers occupy different addresses...";
fil["141"]= "reg_default_component/addressblock_usb_usb_devgrp.html@@@Device Mode Registers Register Descriptions@@@These registers must be programmed every time the USB OTG Controller changes to Device mode...";
fil["142"]= "reg_default_component/addressblock_usb_usb_globgrp.html@@@Global Registers Register Descriptions@@@These registers are available in both Host and Device modes, and do not need to be reprogrammed when switching between these modes...";
fil["143"]= "reg_default_component/addressblock_usb_usb_hostgrp.html@@@Host Mode Registers Register Descriptions@@@These registers must be programmed every time the USB OTG Controller changes to Host mode...";
fil["144"]= "reg_default_component/addressblock_usb_usb_pwrclkgrp.html@@@Power and Clock Gating Register Register Descriptions@@@There is a single register for power and clock gating. It is available in both Host and Device modes...";
fil["145"]= "reg_default_component/memorymap_hps.html@@@Address Map for hps@@@Interface Name Start Address End Address stm STM Module 0xFC000000 0xFEFFFFFF dap DAP Module 0xFF000000 0xFF1FFFFF lwfpgaslaves FPGA Slaves Accessed Via Lightweight HPS2FPGA AXI Bridge 0xFF2...";
fil["146"]= "reg_default_component/memorymap_hps_registerdesc.html@@@Register Summaries for hps@@@stm -- Start Address: 0xFC000000 - End Address: 0xFEFFFFFF - Range: 0x3000000 dap -- Start Address: 0xFF000000 - End Address: 0xFF1FFFFF - Range: 0x200000 lwfpgaslaves -- Start Address: 0xFF2...";
fil["147"]= "reg_default_component/register_acpidmap_dynrd.html@@@dynrd@@@The Read AXI Master Mapping Register contains the USER, and ADDR page signals mapping values for transaction that dynamically remapped to one of the available 3-bit virtual IDs...";
fil["148"]= "reg_default_component/register_acpidmap_dynrd_s.html@@@dynrd_s@@@The Read AXI Master Mapping Status Register contains the configured USER, and ADDR page signals mapping values for transaction that dynamically remapped to one of the available 3-bit virtual IDs...";
fil["149"]= "reg_default_component/register_acpidmap_dynwr.html@@@dynwr@@@The Write AXI Master Mapping Register contains the USER, and ADDR page signals mapping values for transaction that dynamically remapped to one of the available 3-bit virtual IDs...";
fil["150"]= "reg_default_component/register_acpidmap_dynwr_s.html@@@dynwr_s@@@The Write AXI Master Mapping Status Register contains the configured USER, and ADDR page signals mapping values for transaction that dynamically remapped to one of the available 3-bit virtual IDs...";
fil["151"]= "reg_default_component/register_acpidmap_vid2rd.html@@@vid2rd@@@The Read AXI Master Mapping Register contains the USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["152"]= "reg_default_component/register_acpidmap_vid2rd_s.html@@@vid2rd_s@@@The Read AXI Master Mapping Status Register contains the configured USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["153"]= "reg_default_component/register_acpidmap_vid2wr.html@@@vid2wr@@@The Write AXI Master Mapping Register contains the USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["154"]= "reg_default_component/register_acpidmap_vid2wr_s.html@@@vid2wr_s@@@The Write AXI Master Mapping Status Register contains the configured USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["155"]= "reg_default_component/register_acpidmap_vid3rd.html@@@vid3rd@@@The Read AXI Master Mapping Register contains the USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["156"]= "reg_default_component/register_acpidmap_vid3rd_s.html@@@vid3rd_s@@@The Read AXI Master Mapping Status Register contains the configured USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["157"]= "reg_default_component/register_acpidmap_vid3wr.html@@@vid3wr@@@The Write AXI Master Mapping Register contains the USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["158"]= "reg_default_component/register_acpidmap_vid3wr_s.html@@@vid3wr_s@@@The Write AXI Master Mapping Status Register contains the configured USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["159"]= "reg_default_component/register_acpidmap_vid4rd.html@@@vid4rd@@@The Read AXI Master Mapping Register contains the USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["160"]= "reg_default_component/register_acpidmap_vid4rd_s.html@@@vid4rd_s@@@The Read AXI Master Mapping Status Register contains the configured USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["161"]= "reg_default_component/register_acpidmap_vid4wr.html@@@vid4wr@@@The Write AXI Master Mapping Register contains the USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["162"]= "reg_default_component/register_acpidmap_vid4wr_s.html@@@vid4wr_s@@@The Write AXI Master Mapping Status Register contains the configured USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["163"]= "reg_default_component/register_acpidmap_vid5rd.html@@@vid5rd@@@The Read AXI Master Mapping Register contains the USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["164"]= "reg_default_component/register_acpidmap_vid5rd_s.html@@@vid5rd_s@@@The Read AXI Master Mapping Status Register contains the configured USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["165"]= "reg_default_component/register_acpidmap_vid5wr.html@@@vid5wr@@@The Write AXI Master Mapping Register contains the USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["166"]= "reg_default_component/register_acpidmap_vid5wr_s.html@@@vid5wr_s@@@The Write AXI Master Mapping Status Register contains the configured USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["167"]= "reg_default_component/register_acpidmap_vid6rd.html@@@vid6rd@@@The Read AXI Master Mapping Register contains the USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["168"]= "reg_default_component/register_acpidmap_vid6rd_s.html@@@vid6rd_s@@@The Read AXI Master Mapping Status Register contains the configured USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["169"]= "reg_default_component/register_acpidmap_vid6wr.html@@@vid6wr@@@The Write AXI Master Mapping Register contains the USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["170"]= "reg_default_component/register_acpidmap_vid6wr_s.html@@@vid6wr_s@@@The Write AXI Master Mapping Status Register contains the configured USER, ADDR page, and ID signals mapping values for particular transaction with 12-bit ID which locks the fixed 3-bit virtual ID...";
fil["171"]= "reg_default_component/register_can_can_msghandgrp_MOIPA.html@@@MOIPA@@@Interrupt pending bits for Message Objects 1 to 32. By reading the IntPnd bits, the CPU can check for which Message Object an interrupt is pending. The IntPnd bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers or set by the Message Handler after reception or after a successful transmission of a frame. This will also affect the valid of IntID in the Interrupt Register...";
fil["172"]= "reg_default_component/register_can_can_msghandgrp_MOIPB.html@@@MOIPB@@@Interrupt pending bits for Message Objects 33 to 64. By reading the IntPnd bits, the CPU can check for which Message Object an interrupt is pending. The IntPnd bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers or set by the Message Handler after reception or after a successful transmission of a frame. This will also affect the valid of IntID in the Interrupt Register...";
fil["173"]= "reg_default_component/register_can_can_msghandgrp_MOIPC.html@@@MOIPC@@@Interrupt pending bits for Message Objects 65 to 96. By reading the IntPnd bits, the CPU can check for which Message Object an interrupt is pending. The IntPnd bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers or set by the Message Handler after reception or after a successful transmission of a frame. This will also affect the valid of IntID in the Interrupt Register...";
fil["174"]= "reg_default_component/register_can_can_msghandgrp_MOIPD.html@@@MOIPD@@@Interrupt pending bits for Message Objects 97 to 128. By reading the IntPnd bits, the CPU can check for which Message Object an interrupt is pending. The IntPnd bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers or set by the Message Handler after reception or after a successful transmission of a frame. This will also affect the valid of IntID in the Interrupt Register...";
fil["175"]= "reg_default_component/register_can_can_msghandgrp_MOIPX.html@@@MOIPX@@@Reading this register allows the CPU to quickly detect if any of the interrupt pending bits in each of the MOIPA, MOIPB, MOIPC, and MOIPD Interrupt Pending Registers are set...";
fil["176"]= "reg_default_component/register_can_can_msghandgrp_MONDA.html@@@MONDA@@@New data bits for Message Objects 1 to 32. By reading the NewDat bits, the CPU can check for which Message Object the data portion was updated. The NewDat bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers or set by the Message Handler after reception of a Data Frame or reset by the Message Handler at start of a transmission...";
fil["177"]= "reg_default_component/register_can_can_msghandgrp_MONDB.html@@@MONDB@@@New data bits for Message Objects 33 to 64. By reading the NewDat bits, the CPU can check for which Message Object the data portion was updated. The NewDat bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers or set by the Message Handler after reception of a Data Frame or reset by the Message Handler at start of a transmission...";
fil["178"]= "reg_default_component/register_can_can_msghandgrp_MONDC.html@@@MONDC@@@New data bits for Message Objects 65 to 96. By reading the NewDat bits, the CPU can check for which Message Object the data portion was updated. The NewDat bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers or set by the Message Handler after reception of a Data Frame or reset by the Message Handler at start of a transmission...";
fil["179"]= "reg_default_component/register_can_can_msghandgrp_MONDD.html@@@MONDD@@@New data bits for Message Objects 97 to 128. By reading the NewDat bits, the CPU can check for which Message Object the data portion was updated. The NewDat bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers or set by the Message Handler after reception of a Data Frame or reset by the Message Handler at start of a transmission...";
fil["180"]= "reg_default_component/register_can_can_msghandgrp_MONDX.html@@@MONDX@@@Reading this register allows the CPU to quickly detect if any of the new data bits in each of the MONDA, MONDB, MONDC, and MONDD New Data Registers are set...";
fil["181"]= "reg_default_component/register_can_can_msghandgrp_MOTRA.html@@@MOTRA@@@Transmission request bits for Message Objects 1 to 32. By reading the TxRqst bits, the CPU can check for which Message Object a Transmission Request is pending. The TxRqst bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers or set by the Message Handler after reception of a Remote Frame or reset by the Message Handler after a successful transmission...";
fil["182"]= "reg_default_component/register_can_can_msghandgrp_MOTRB.html@@@MOTRB@@@Transmission request bits for Message Objects 33 to 64. By reading the TxRqst bits, the CPU can check for which Message Object a Transmission Request is pending. The TxRqst bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers or set by the Message Handler after reception of a Remote Frame or reset by the Message Handler after a successful transmission...";
fil["183"]= "reg_default_component/register_can_can_msghandgrp_MOTRC.html@@@MOTRC@@@Transmission request bits for Message Objects 65 to 96. By reading the TxRqst bits, the CPU can check for which Message Object a Transmission Request is pending. The TxRqst bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers or set by the Message Handler after reception of a Remote Frame or reset by the Message Handler after a successful transmission...";
fil["184"]= "reg_default_component/register_can_can_msghandgrp_MOTRD.html@@@MOTRD@@@Transmission request bits for Message Objects 97 to 128. By reading the TxRqst bits, the CPU can check for which Message Object a Transmission Request is pending. The TxRqst bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers or set by the Message Handler after reception of a Remote Frame or reset by the Message Handler after a successful transmission...";
fil["185"]= "reg_default_component/register_can_can_msghandgrp_MOTRX.html@@@MOTRX@@@Reading this register allows the CPU to quickly detect if any of the transmission request bits in each of the MOTRA, MOTRB, MOTRC, and MOTRD Transmission Request Registers are set...";
fil["186"]= "reg_default_component/register_can_can_msghandgrp_MOVALA.html@@@MOVALA@@@Message valid bits for Message Objects 1 to 32. By reading the MsgVal bits, the CPU can check for which Message Object is valid. The MsgVal bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers...";
fil["187"]= "reg_default_component/register_can_can_msghandgrp_MOVALB.html@@@MOVALB@@@Message valid bits for Message Objects 33 to 64. By reading the MsgVal bits, the CPU can check for which Message Object is valid. The MsgVal bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers...";
fil["188"]= "reg_default_component/register_can_can_msghandgrp_MOVALC.html@@@MOVALC@@@Message valid bits for Message Objects 65 to 96. By reading the MsgVal bits, the CPU can check for which Message Object is valid. The MsgVal bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers...";
fil["189"]= "reg_default_component/register_can_can_msghandgrp_MOVALD.html@@@MOVALD@@@Message valid bits for Message Objects 97 to 128. By reading the MsgVal bits, the CPU can check for which Message Object is valid. The MsgVal bit of a specific Message Object can be set/reset by the CPU via the IFx Message Interface Registers...";
fil["190"]= "reg_default_component/register_can_can_msghandgrp_MOVALX.html@@@MOVALX@@@Reading this register allows the CPU to quickly detect if any of the message valid bits in each of the MOVALA, MOVALB, MOVALC, and MOVALD Message Valid Registers are set...";
fil["191"]= "reg_default_component/register_can_can_msgifgrp_IF1ARB.html@@@IF1ARB@@@The Arbitration Registers ID28-0, Xtd, and Dir are used to define the identifier and type of outgoing messages and are used (together with the mask registers Msk28-0, MXtd, and MDir) for acceptance filtering of incoming messages. A received message is stored into the valid Message Object with matching identifier and Direction=receive (Data Frame) or Direction=transmit (Remote Frame). Extended frames can be stored only in Message Objects with Xtd = one, standard frames in Message Objects with Xtd = zero. If a received message (Data Frame or Remote Frame) matches with more than one valid Message Object, it is stored into that with the lowest message number...";
fil["192"]= "reg_default_component/register_can_can_msgifgrp_IF1CMR.html@@@IF1CMR@@@The control bits of the IF1/2 Command Register specify the transfer direction and select which portions of the Message Object should be transferred. A message transfer is started as soon as the CPU has written the message number to the low byte of the Command Request Register and IFxCMR.AutoInc is zero. With this write operation, the IFxCMR.Busy bit is automatically set to 1 to notify the CPU that a transfer is in progress. After a wait time of 2 to 8 HOST_CLK periods, the transfer between theInterface Register and the Message RAM has been completed and the IFxCMR.Busy bit is cleared to 0. The upper limit of the wait time occurs when the message transfer coincides with a CAN message transmission, acceptance filtering, or message storage. If the CPU writes to both Command Registers consecutively (requests a second transfer while another transfer is already in progress), the second transfer starts when the first one is completed. Note: While Busy bit of IF1/2 Command Register is one, IF1/2 Register Set is write protected...";
fil["193"]= "reg_default_component/register_can_can_msgifgrp_IF1DA.html@@@IF1DA@@@The data bytes of CAN messages are stored in the IF1/2 registers in the following order. In a CAN Data Frame, Data(0) is the first, Data(7) is the last byte to be transmitted or received. In CAN s serial bit stream, the MSB of each byte will be transmitted first...";
fil["194"]= "reg_default_component/register_can_can_msgifgrp_IF1DB.html@@@IF1DB@@@The data bytes of CAN messages are stored in the IF1/2 registers in the following order. In a CAN Data Frame, Data(0) is the first, Data(7) is the last byte to be transmitted or received. In CAN s serial bit stream, the MSB of each byte will be transmitted first...";
fil["195"]= "reg_default_component/register_can_can_msgifgrp_IF1MCTR.html@@@IF1MCTR@@@The Arbitration Registers ID28-0, Xtd, and Dir are used to define the identifier and type of outgoing messages and are used (together with the mask registers Msk28-0, MXtd, and MDir) for acceptance filtering of incoming messages. A received message is stored into the valid Message Object with matching identifier and Direction=receive (Data Frame) or Direction=transmit (Remote Frame). Extended frames can be stored only in Message Objects with Xtd = one, standard frames in Message Objects with Xtd = zero. If a received message (Data Frame or Remote Frame) matches with more than one valid Message Object, it is stored into that with the lowest message number...";
fil["196"]= "reg_default_component/register_can_can_msgifgrp_IF1MSK.html@@@IF1MSK@@@The Message Object Mask Bits together with the arbitration bits are used for acceptance filtering of incoming messages. Note: While IFxCMR.Busy bit is one, the IF1/2 Register Set is write protected...";
fil["197"]= "reg_default_component/register_can_can_msgifgrp_IF2ARB.html@@@IF2ARB@@@The Arbitration Registers ID28-0, Xtd, and Dir are used to define the identifier and type of outgoing messages and are used (together with the mask registers Msk28-0, MXtd, and MDir) for acceptance filtering of incoming messages. A received message is stored into the valid Message Object with matching identifier and Direction=receive (Data Frame) or Direction=transmit (Remote Frame). Extended frames can be stored only in Message Objects with Xtd = one, standard frames in Message Objects with Xtd = zero. If a received message (Data Frame or Remote Frame) matches with more than one valid Message Object, it is stored into that with the lowest message number...";
fil["198"]= "reg_default_component/register_can_can_msgifgrp_IF2CMR.html@@@IF2CMR@@@The control bits of the IF1/2 Command Register specify the transfer direction and select which portions of the Message Object should be transferred. A message transfer is started as soon as the CPU has written the message number to the low byte of the Command Request Register and IFxCMR.AutoInc is zero. With this write operation, the IFxCMR.Busy bit is automatically set to 1 to notify the CPU that a transfer is in progress. After a wait time of 2 to 8 HOST_CLK periods, the transfer between theInterface Register and the Message RAM has been completed and the IFxCMR.Busy bit is cleared to 0. The upper limit of the wait time occurs when the message transfer coincides with a CAN message transmission, acceptance filtering, or message storage. If the CPU writes to both Command Registers consecutively (requests a second transfer while another transfer is already in progress), the second transfer starts when the first one is completed. Note: While Busy bit of IF1/2 Command Register is one, IF1/2 Register Set is write protected...";
fil["199"]= "reg_default_component/register_can_can_msgifgrp_IF2DA.html@@@IF2DA@@@The data bytes of CAN messages are stored in the IF1/2 registers in the following order. In a CAN Data Frame, Data(0) is the first, Data(7) is the last byte to be transmitted or received. In CAN s serial bit stream, the MSB of each byte will be transmitted first...";
fil["200"]= "reg_default_component/register_can_can_msgifgrp_IF2DB.html@@@IF2DB@@@The data bytes of CAN messages are stored in the IF1/2 registers in the following order. In a CAN Data Frame, Data(0) is the first, Data(7) is the last byte to be transmitted or received. In CAN s serial bit stream, the MSB of each byte will be transmitted first...";
fil["201"]= "reg_default_component/register_can_can_msgifgrp_IF2MCTR.html@@@IF2MCTR@@@The Arbitration Registers ID28-0, Xtd, and Dir are used to define the identifier and type of outgoing messages and are used (together with the mask registers Msk28-0, MXtd, and MDir) for acceptance filtering of incoming messages. A received message is stored into the valid Message Object with matching identifier and Direction=receive (Data Frame) or Direction=transmit (Remote Frame). Extended frames can be stored only in Message Objects with Xtd = one, standard frames in Message Objects with Xtd = zero. If a received message (Data Frame or Remote Frame) matches with more than one valid Message Object, it is stored into that with the lowest message number...";
fil["202"]= "reg_default_component/register_can_can_msgifgrp_IF2MSK.html@@@IF2MSK@@@The Message Object Mask Bits together with the arbitration bits are used for acceptance filtering of incoming messages. Note: While IFxCMR.Busy bit is one, the IF1/2 Register Set is write protected...";
fil["203"]= "reg_default_component/register_can_can_protogrp_CBT.html@@@CBT@@@This register is only writable if bits CCTRL.CCE and CCTRL.Init are set. The CAN bit time may be programed in the range of [4 .. 25] time quanta. The CAN time quantum may be programmed in the range of [1 .. 1024] CAN_CLK periods. For details see Application Note 001  Configuration of Bit Timing . The actual interpretation by the hardware of this value is such that one more than the value programmed here is used. TSeg1 is the sum of Prop_Seg and Phase_Seg1. TSeg2 is Phase_Seg2. Therefore the length of the bit time is (programmed values) [TSeg1 + TSeg2 + 3] tq or (functional values) [Sync_Seg + Prop_Seg + Phase_Seg1 + Phase_Seg2] tq...";
fil["204"]= "reg_default_component/register_can_can_protogrp_CCTRL.html@@@CCTRL@@@Control Register...";
fil["205"]= "reg_default_component/register_can_can_protogrp_CERC.html@@@CERC@@@Error Counter Register...";
fil["206"]= "reg_default_component/register_can_can_protogrp_CFR.html@@@CFR@@@The Function Register controls the features RAM_Initialisation and Power_Down also by application register. The CAN module can be prepared for Power_Down by setting the port CAN_CLKSTOP_REQ to one or writing to CFR.ClkStReq a one. The power down state is left by setting port CAN_CLKSTOP_REQ to zero or writing to CFR.ClkStReq a zero, acknowledged by CAN_CLKSTOP_ACK is going to zero as well as CFR.ClkStAck. The CCTRL.Init bit is left one and has to be written by the application to re-enable CAN transfers. Note: It s recommended to use either the ports CAN_CLKSTOP_REQ and CAN_CLKSTOP_ACK or the CCTRL.ClkStReq and CFR.ClkStAck. The application CFR.ClkStReq showsalso the actual status of the portCAN_CLKSTOP_REQ...";
fil["207"]= "reg_default_component/register_can_can_protogrp_CIR.html@@@CIR@@@If several interrupts are pending, the CAN Interrupt Register will point to the pending interrupt with the highest priority, disregarding their chronological order. An interrupt remains pending until the CPU has cleared it. If IntID is different from 0x00 and CCTRL.MIL is set, the interrupt port CAN_INT_MO is active. The interrupt port remains active until IntID is back to value 0x00 (the cause of the interrupt is reset) or until CCTRL.MIL is reset. If CCTRL.ILE is set and CCTRL.MIL is reseted the Message Object interrupts will be routed to interrupt port CAN_INT_STATUS. The interrupt port remains active until IntID is back to value 0x00 (the cause of the interrupt is reset) or until CCTRL.MIL is set or CCTRL.ILE is reset. The Message Object s interrupt priority decreases with increasing message number. A message interrupt is cleared by clearing the Message Object s IntPnd bit...";
fil["208"]= "reg_default_component/register_can_can_protogrp_CRR.html@@@CRR@@@Core Release Register...";
fil["209"]= "reg_default_component/register_can_can_protogrp_CSTS.html@@@CSTS@@@Status Register...";
fil["210"]= "reg_default_component/register_can_can_protogrp_CTR.html@@@CTR@@@The Test Mode is entered by setting bit CCTRL.Test to one. In Test Mode the bits EXL, Tx1, Tx0, LBack and Silent in the Test Register are writable. Bit Rx monitors the state of pin CAN_RXD and therefore is only readable. All Test Register functions are disabled when bit Test is reset to zero. Loop Back Mode and CAN_TXD Control Mode are hardware test modes, not to be used by application programs. Note: This register is only writable if bit CCTRL.Test is set...";
fil["211"]= "reg_default_component/register_can_can_protogrp_HWS.html@@@HWS@@@Hardware Configuration Status Register...";
fil["212"]= "reg_default_component/register_clkmgr_bypass.html@@@bypass@@@Contains fields that control bypassing each PLL...";
fil["213"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_cfgs2fuser0clk.html@@@cfgs2fuser0clk@@@Contains settings that control clock cfg_s2f_user0_clk generated from the C5 output of the Main PLL. Qsys and user documenation refer to cfg_s2f_user0_clk as cfg_h2f_user0_clk. Only reset by a cold reset...";
fil["214"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_dbgatclk.html@@@dbgatclk@@@Contains settings that control clock dbg_base_clk generated from the C2 output of the Main PLL. Only reset by a cold reset...";
fil["215"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_dbgdiv.html@@@dbgdiv@@@Contains fields that control clock dividers for debug clocks derived from the Main PLL Fields are only reset by a cold reset...";
fil["216"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_en.html@@@en@@@Contains fields that control clock enables for clocks derived from the Main PLL. 1: The clock is enabled. 0: The clock is disabled. Fields are only reset by a cold reset...";
fil["217"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_l4src.html@@@l4src@@@Contains fields that select the clock source for L4 MP and SP APB interconnect Fields are only reset by a cold reset...";
fil["218"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_mainclk.html@@@mainclk@@@Contains settings that control clock main_clk generated from the C1 output of the Main PLL. Only reset by a cold reset...";
fil["219"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_maindiv.html@@@maindiv@@@Contains fields that control clock dividers for main clocks derived from the Main PLL Fields are only reset by a cold reset...";
fil["220"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_mainnandsdmmcclk.html@@@mainnandsdmmcclk@@@Contains settings that control clock main_nand_sdmmc_clk generated from the C4 output of the Main PLL. Only reset by a cold reset...";
fil["221"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_mainqspiclk.html@@@mainqspiclk@@@Contains settings that control clock main_qspi_clk generated from the C3 output of the Main PLL. Only reset by a cold reset...";
fil["222"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_misc.html@@@misc@@@Contains VCO control signals and other PLL control signals need to be controllable through register. Fields are only reset by a cold reset...";
fil["223"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_mpuclk.html@@@mpuclk@@@Contains settings that control clock mpu_clk generated from the C0 output of the Main PLL. Only reset by a cold reset...";
fil["224"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_stat.html@@@stat@@@Contains Output Clock Counter Reset acknowledge status...";
fil["225"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_tracediv.html@@@tracediv@@@Contains a field that controls the clock divider for the debug trace clock derived from the Main PLL Only reset by a cold reset...";
fil["226"]= "reg_default_component/register_clkmgr_clkmgr_mainpllgrp_vco.html@@@vco@@@Contains settings that control the Main PLL VCO. The VCO output frequency is the input frequency multiplied by the numerator (M+1) and divided by the denominator (N+1). The VCO input clock source is always eosc1_clk. Fields are only reset by a cold reset...";
fil["227"]= "reg_default_component/register_clkmgr_clkmgr_perpllgrp_div.html@@@div@@@Contains fields that control clock dividers for clocks derived from the Peripheral PLL Fields are only reset by a cold reset...";
fil["228"]= "reg_default_component/register_clkmgr_clkmgr_perpllgrp_emac0clk.html@@@emac0clk@@@Contains settings that control clock emac0_clk generated from the C0 output of the Peripheral PLL. Only reset by a cold reset...";
fil["229"]= "reg_default_component/register_clkmgr_clkmgr_perpllgrp_emac1clk.html@@@emac1clk@@@Contains settings that control clock emac1_clk generated from the C1 output of the Peripheral PLL. Only reset by a cold reset...";
fil["230"]= "reg_default_component/register_clkmgr_clkmgr_perpllgrp_en.html@@@en@@@Contains fields that control clock enables for clocks derived from the Peripheral PLL 1: The clock is enabled. 0: The clock is disabled. Fields are only reset by a cold reset...";
fil["231"]= "reg_default_component/register_clkmgr_clkmgr_perpllgrp_gpiodiv.html@@@gpiodiv@@@Contains a field that controls the clock divider for the GPIO De-bounce clock. Only reset by a cold reset...";
fil["232"]= "reg_default_component/register_clkmgr_clkmgr_perpllgrp_misc.html@@@misc@@@Contains VCO control signals and other PLL control signals need to be controllable through register. Fields are only reset by a cold reset...";
fil["233"]= "reg_default_component/register_clkmgr_clkmgr_perpllgrp_perbaseclk.html@@@perbaseclk@@@Contains settings that control clock periph_base_clk generated from the C4 output of the Peripheral PLL. Only reset by a cold reset...";
fil["234"]= "reg_default_component/register_clkmgr_clkmgr_perpllgrp_pernandsdmmcclk.html@@@pernandsdmmcclk@@@Contains settings that control clock periph_nand_sdmmc_clk generated from the C3 output of the Peripheral PLL. Only reset by a cold reset...";
fil["235"]= "reg_default_component/register_clkmgr_clkmgr_perpllgrp_perqspiclk.html@@@perqspiclk@@@Contains settings that control clock periph_qspi_clk generated from the C2 output of the Peripheral PLL. Only reset by a cold reset...";
fil["236"]= "reg_default_component/register_clkmgr_clkmgr_perpllgrp_s2fuser1clk.html@@@s2fuser1clk@@@Contains settings that control clock s2f_user1_clk generated from the C5 output of the Peripheral PLL. Qsys and user documenation refer to s2f_user1_clk as h2f_user1_clk. Only reset by a cold reset...";
fil["237"]= "reg_default_component/register_clkmgr_clkmgr_perpllgrp_src.html@@@src@@@Contains fields that select the source clocks for the flash controllers. Fields are only reset by a cold reset...";
fil["238"]= "reg_default_component/register_clkmgr_clkmgr_perpllgrp_stat.html@@@stat@@@Contains Output Clock Counter Reset acknowledge status...";
fil["239"]= "reg_default_component/register_clkmgr_clkmgr_perpllgrp_vco.html@@@vco@@@Contains settings that control the Peripheral PLL VCO. The VCO output frequency is the input frequency multiplied by the numerator (M+1) and divided by the denominator (N+1). Fields are only reset by a cold reset...";
fil["240"]= "reg_default_component/register_clkmgr_clkmgr_sdrpllgrp_ctrl.html@@@ctrl@@@Contains VCO control signals and other PLL control signals need to be controllable through register. Fields are only reset by a cold reset...";
fil["241"]= "reg_default_component/register_clkmgr_clkmgr_sdrpllgrp_ddr2xdqsclk.html@@@ddr2xdqsclk@@@Contains settings that control clock ddr_2x_dqs_clk generated from the C1 output of the SDRAM PLL. Fields are only reset by a cold reset...";
fil["242"]= "reg_default_component/register_clkmgr_clkmgr_sdrpllgrp_ddrdqclk.html@@@ddrdqclk@@@Contains settings that control clock ddr_dq_clk generated from the C2 output of the SDRAM PLL. Fields are only reset by a cold reset...";
fil["243"]= "reg_default_component/register_clkmgr_clkmgr_sdrpllgrp_ddrdqsclk.html@@@ddrdqsclk@@@Contains settings that control clock ddr_dqs_clk generated from the C0 output of the SDRAM PLL. Fields are only reset by a cold reset...";
fil["244"]= "reg_default_component/register_clkmgr_clkmgr_sdrpllgrp_en.html@@@en@@@Contains fields that control the SDRAM Clock Group enables generated from the SDRAM PLL clock outputs. 1: The clock is enabled. 0: The clock is disabled. Fields are only reset by a cold reset...";
fil["245"]= "reg_default_component/register_clkmgr_clkmgr_sdrpllgrp_s2fuser2clk.html@@@s2fuser2clk@@@Contains settings that control clock s2f_user2_clk generated from the C5 output of the SDRAM PLL. Qsys and user documenation refer to s2f_user2_clk as h2f_user2_clk Fields are only reset by a cold reset...";
fil["246"]= "reg_default_component/register_clkmgr_clkmgr_sdrpllgrp_stat.html@@@stat@@@Contains Output Clock Counter Reset acknowledge status...";
fil["247"]= "reg_default_component/register_clkmgr_clkmgr_sdrpllgrp_vco.html@@@vco@@@Contains settings that control the SDRAM PLL VCO. The VCO output frequency is the input frequency multiplied by the numerator (M+1) and divided by the denominator (N+1). Fields are only reset by a cold reset...";
fil["248"]= "reg_default_component/register_clkmgr_ctrl.html@@@ctrl@@@Contains fields that control the entire Clock Manager...";
fil["249"]= "reg_default_component/register_clkmgr_dbctrl.html@@@dbctrl@@@Contains fields that control the debug clocks...";
fil["250"]= "reg_default_component/register_clkmgr_inter.html@@@inter@@@Contains fields that indicate the PLL lock status. Fields are only reset by a cold reset...";
fil["251"]= "reg_default_component/register_clkmgr_intren.html@@@intren@@@Contain fields that enable the interrupt. Fields are only reset by a cold reset...";
fil["252"]= "reg_default_component/register_clkmgr_stat.html@@@stat@@@Provides status of Hardware Managed Clock transition State Machine...";
fil["253"]= "reg_default_component/register_emac_emac_dmagrp_AHB_or_AXI_Status.html@@@AHB_or_AXI_Status@@@This register provides the active status of the AXI interface s read and write channels. This register is useful for debugging purposes. In addition, this register is valid only in the Channel 0 DMA when multiple channels are present in the AV mode...";
fil["254"]= "reg_default_component/register_emac_emac_dmagrp_AXI_Bus_Mode.html@@@AXI_Bus_Mode@@@The AXI Bus Mode Register controls the behavior of the AXI master. It is mainly used to control the burst splitting and the number of outstanding requests...";
fil["255"]= "reg_default_component/register_emac_emac_dmagrp_Bus_Mode.html@@@Bus_Mode@@@The Bus Mode register establishes the bus operating modes for the DM...";
fil["256"]= "reg_default_component/register_emac_emac_dmagrp_Current_Host_Receive_Buffer_Address.html@@@Current_Host_Receive_Buffer_Address@@@The Current Host Receive Buffer Address register points to the current Receive Buffer address being read by the DM...";
fil["257"]= "reg_default_component/register_emac_emac_dmagrp_Current_Host_Receive_Descriptor.html@@@Current_Host_Receive_Descriptor@@@The Current Host Receive Descriptor register points to the start address of the current Receive Descriptor read by the DM...";
fil["258"]= "reg_default_component/register_emac_emac_dmagrp_Current_Host_Transmit_Buffer_Address.html@@@Current_Host_Transmit_Buffer_Address@@@The Current Host Transmit Buffer Address register points to the current Transmit Buffer Address being read by the DM...";
fil["259"]= "reg_default_component/register_emac_emac_dmagrp_Current_Host_Transmit_Descriptor.html@@@Current_Host_Transmit_Descriptor@@@The Current Host Transmit Descriptor register points to the start address of the current Transmit Descriptor read by the DM...";
fil["260"]= "reg_default_component/register_emac_emac_dmagrp_HW_Feature.html@@@HW_Feature@@@This register indicates the presence of the optional features or functions of the gmac. The software driver can use this register to dynamically enable or disable the programs related to the optional blocks...";
fil["261"]= "reg_default_component/register_emac_emac_dmagrp_Interrupt_Enable.html@@@Interrupt_Enable@@@The Interrupt Enable register enables the interrupts reported by Register 5 (Status Register). Setting a bit to 1 b1 enables a corresponding interrupt. After a hardware or software reset, all interrupts are disabled...";
fil["262"]= "reg_default_component/register_emac_emac_dmagrp_Missed_Frame_And_Buffer_Overflow_Counter.html@@@Missed_Frame_And_Buffer_Overflow_Counter@@@The DMA maintains two counters to track the number of frames missed during reception. This register reports the current value of the counter. The counter is used for diagnostic purposes. Bits[15:0] indicate missed frames because of the host buffer being unavailable. Bits[27:17] indicate missed frames because of buffer overflow conditions (MTL and MAC) and runt frames (good frames of less than 64 bytes) dropped by the MTL...";
fil["263"]= "reg_default_component/register_emac_emac_dmagrp_Operation_Mode.html@@@Operation_Mode@@@The Operation Mode register establishes the Transmit and Receive operating modes and commands. This register should be the last CSR to be written as part of the DMA initialization...";
fil["264"]= "reg_default_component/register_emac_emac_dmagrp_Receive_Descriptor_List_Address.html@@@Receive_Descriptor_List_Address@@@The Receive Descriptor List Address register points to the start of the Receive Descriptor List. The descriptor lists reside in the host s physical memory space and must be Word, Dword, or Lword-aligned (for 32-bit, 64-bit, or 128-bit data bus). The DMA internally converts it to bus width aligned address by making the corresponding LS bits low. Writing to this register is permitted only when reception is stopped. When stopped, this register must be written to before the receive Start command is given. You can write to this register only when Rx DMA has stopped, that is, Bit 1 (SR) is set to zero in Register 6 (Operation Mode Register). When stopped, this register can be written with a new descriptor list address. When you set the SR bit to 1, the DMA takes the newly programmed descriptor base address. If this register is not changed when the SR bit is set to 0, then the DMA takes the descriptor address where it was stopped earlier...";
fil["265"]= "reg_default_component/register_emac_emac_dmagrp_Receive_Interrupt_Watchdog_Timer.html@@@Receive_Interrupt_Watchdog_Timer@@@This register, when written with non-zero value, enables the watchdog timer for the Receive Interrupt (Bit 6) of Register 5 (Status Register...";
fil["266"]= "reg_default_component/register_emac_emac_dmagrp_Receive_Poll_Demand.html@@@Receive_Poll_Demand@@@The Receive Poll Demand register enables the receive DMA to check for new descriptors. This command is used to wake up the Rx DMA from the SUSPEND state. The RxDMA can go into the SUSPEND state only because of the unavailability of descriptors it owns...";
fil["267"]= "reg_default_component/register_emac_emac_dmagrp_Status.html@@@Status@@@The Status register contains all status bits that the DMA reports to the host. The software driver reads this register during an interrupt service routine or polling. Most of the fields in this register cause the host to be interrupted. The bits of this register are not cleared when read. Writing 1 b1 to (unreserved) Bits[16:0] of this register clears these bits and writing 1 b0 has no effect. Each field (Bits[16:0]) can be masked by masking the appropriate bit in Register 7 (Interrupt Enable Register...";
fil["268"]= "reg_default_component/register_emac_emac_dmagrp_Transmit_Descriptor_List_Address.html@@@Transmit_Descriptor_List_Address@@@The Transmit Descriptor List Address register points to the start of the Transmit Descriptor List. The descriptor lists reside in the host s physical memory space and must be Word, Dword, or Lword-aligned (for 32-bit, 64-bit, or 128-bit data bus). The DMA internally converts it to bus width aligned address by making the corresponding LSB to low. You can write to this register only when the Tx DMA has stopped, that is, Bit 13 (ST) is set to zero in Register 6 (Operation Mode Register). When stopped, this register can be written with a new descriptor list address. When you set the ST bit to 1, the DMA takes the newly programmed descriptor base address. If this register is not changed when the ST bit is set to 0, then the DMA takes the descriptor address where it was stopped earlier...";
fil["269"]= "reg_default_component/register_emac_emac_dmagrp_Transmit_Poll_Demand.html@@@Transmit_Poll_Demand@@@The Transmit Poll Demand register enables the Tx DMA to check whether or not the DMA owns the current descriptor. The Transmit Poll Demand command is given to wake up the Tx DMA if it is in the Suspend mode. The Tx DMA can go into the Suspend mode because of an Underflow error in a transmitted frame or the unavailability of descriptors owned by it. You can give this command anytime and the Tx DMA resets this command when it again starts fetching the current descriptor from host memory...";
fil["270"]= "reg_default_component/register_emac_emac_gmacgrp_Auxiliary_Timestamp_Nanoseconds.html@@@Auxiliary_Timestamp_Nanoseconds@@@This register, along with Register 461 (Auxiliary Timestamp Seconds Register), gives the 64-bit timestamp stored as auxiliary snapshot. The two registers together form the read port of a 64-bit wide FIFO with a depth of 16. Multiple snapshots can be stored in this FIFO. The ATSNS bits in the Timestamp Status register indicate the fill-level of this FIFO. The top of the FIFO is removed only when the last byte of Register 461 (Auxiliary Timestamp - Seconds Register) is read. In the little-endian mode, this means when Bits[31:24] are read. In big-endian mode, it corresponds to the reading of Bits[7:0] of Register 461 (Auxiliary Timestamp - Seconds Register...";
fil["271"]= "reg_default_component/register_emac_emac_gmacgrp_Auxiliary_Timestamp_Seconds.html@@@Auxiliary_Timestamp_Seconds@@@Contains the higher 32 bits (Seconds field) of the auxiliary timestamp...";
fil["272"]= "reg_default_component/register_emac_emac_gmacgrp_Debug.html@@@Debug@@@The Debug register gives the status of all main blocks of the transmit and receive data-paths and the FIFOs. An all-zero status indicates that the MAC is in idle state (and FIFOs are empty) and no activity is going on in the data-paths...";
fil["273"]= "reg_default_component/register_emac_emac_gmacgrp_Flow_Control.html@@@Flow_Control@@@The Flow Control register controls the generation and reception of the Control (Pause Command) frames by the MAC s Flow control block. A Write to a register with the Busy bit set to  1  triggers the Flow Control block to generate a Pause Control frame. The fields of the control frame are selected as specified in the 802.3x specification, and the Pause Time value from this register is used in the Pause Time field of the control frame. The Busy bit remains set until the control frame is transferred onto the cable. The Host must make sure that the Busy bit is cleared before writing to the register...";
fil["274"]= "reg_default_component/register_emac_emac_gmacgrp_GMII_Address.html@@@GMII_Address@@@The GMII Address register controls the management cycles to the external PHY through the management interface...";
fil["275"]= "reg_default_component/register_emac_emac_gmacgrp_GMII_Data.html@@@GMII_Data@@@The GMII Data register stores Write data to be written to the PHY register located at the address specified in Register 4 (GMII Address Register). This register also stores the Read data from the PHY register located at the address specified by Register 4...";
fil["276"]= "reg_default_component/register_emac_emac_gmacgrp_Hash_Table_Reg0.html@@@Hash_Table_Reg0@@@This register contains the first 32 bits of the hash table. The 256-bit Hash table is used for group address filtering. For hash filtering, the content of the destination address in the incoming frame is passed through the CRC logic and the upper eight bits of the CRC register are used to index the content of the Hash table. The most significant bits determines the register to be used (Hash Table Register X), and the least significant five bits determine the bit within the register. For example, a hash value of 8b 10111111 selects Bit 31 of the Hash Table Register 5. The hash value of the destination address is calculated in the following way: 1. Calculate the 32-bit CRC for the DA (See IEEE 802.3, Section 3.2.8 for the steps to calculate CRC32). 2. Perform bitwise reversal for the value obtained in Step 1. 3. Take the upper 8 bits from the value obtained in Step 2. If the corresponding bit value of the register is 1 b1, the frame is accepted. Otherwise, it is rejected. If the Bit 1 (Pass All Multicast) is set in Register 1 (MAC Frame Filter), then all multicast frames are accepted regardless of the multicast hash values. Because the Hash Table register is double-synchronized to the (G)MII clock domain, the synchronization is triggered only when Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the Hash Table Register X registers are written. Note: Because of double-synchronization, consecutive writes to this register should be performed after at least four clock cycles in the destination clock domain...";
fil["277"]= "reg_default_component/register_emac_emac_gmacgrp_Hash_Table_Reg1.html@@@Hash_Table_Reg1@@@This register contains the second 32 bits of the hash table...";
fil["278"]= "reg_default_component/register_emac_emac_gmacgrp_Hash_Table_Reg2.html@@@Hash_Table_Reg2@@@This register contains the third 32 bits of the hash table...";
fil["279"]= "reg_default_component/register_emac_emac_gmacgrp_Hash_Table_Reg3.html@@@Hash_Table_Reg3@@@This register contains the fourth 32 bits of the hash table...";
fil["280"]= "reg_default_component/register_emac_emac_gmacgrp_Hash_Table_Reg4.html@@@Hash_Table_Reg4@@@This register contains the fifth 32 bits of the hash table...";
fil["281"]= "reg_default_component/register_emac_emac_gmacgrp_Hash_Table_Reg5.html@@@Hash_Table_Reg5@@@This register contains the sixth 32 bits of the hash table...";
fil["282"]= "reg_default_component/register_emac_emac_gmacgrp_Hash_Table_Reg6.html@@@Hash_Table_Reg6@@@This register contains the seventh 32 bits of the hash table...";
fil["283"]= "reg_default_component/register_emac_emac_gmacgrp_Hash_Table_Reg7.html@@@Hash_Table_Reg7@@@This register contains the eighth 32 bits of the hash table...";
fil["284"]= "reg_default_component/register_emac_emac_gmacgrp_Interrupt_Mask.html@@@Interrupt_Mask@@@The Interrupt Mask Register bits enable you to mask the interrupt signal because of the corresponding event in the Interrupt Status Register. The interrupt signal is sbd_intr_o...";
fil["285"]= "reg_default_component/register_emac_emac_gmacgrp_Interrupt_Status.html@@@Interrupt_Status@@@The Interrupt Status register identifies the events in the MAC that can generate interrupt. All interrupt events are generated only when the corresponding optional feature is enabled...";
fil["286"]= "reg_default_component/register_emac_emac_gmacgrp_L3_L4_Control0.html@@@L3_L4_Control0@@@This register controls the operations of the filter 0 of Layer 3 and Layer 4...";
fil["287"]= "reg_default_component/register_emac_emac_gmacgrp_L3_L4_Control1.html@@@L3_L4_Control1@@@This register controls the operations of the filter 0 of Layer 3 and Layer 4...";
fil["288"]= "reg_default_component/register_emac_emac_gmacgrp_L3_L4_Control2.html@@@L3_L4_Control2@@@This register controls the operations of the filter 2 of Layer 3 and Layer 4...";
fil["289"]= "reg_default_component/register_emac_emac_gmacgrp_L3_L4_Control3.html@@@L3_L4_Control3@@@This register controls the operations of the filter 0 of Layer 3 and Layer 4...";
fil["290"]= "reg_default_component/register_emac_emac_gmacgrp_LPI_Control_Status.html@@@LPI_Control_Status@@@The LPI Control and Status Register controls the LPI functions and provides the LPI interrupt status. The status bits are cleared when this register is read...";
fil["291"]= "reg_default_component/register_emac_emac_gmacgrp_LPI_Timers_Control.html@@@LPI_Timers_Control@@@The LPI Timers Control register controls the timeout values in the LPI states. It specifies the time for which the MAC transmits the LPI pattern and also the time for which the MAC waits before resuming the normal transmission...";
fil["292"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr0_Reg0.html@@@Layer3_Addr0_Reg0@@@For IPv4 frames, the Layer 3 Address 0 Register 0 contains the 32-bit IP Source Address field. For IPv6 frames, it contains Bits[31:0] of the 128-bit IP Source Address or Destination Address field...";
fil["293"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr0_Reg1.html@@@Layer3_Addr0_Reg1@@@For IPv4 frames, the Layer 3 Address 0 Register 1 contains the 32-bit IP Source Address field. For IPv6 frames, it contains Bits[31:0] of the 128-bit IP Source Address or Destination Address field...";
fil["294"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr0_Reg2.html@@@Layer3_Addr0_Reg2@@@For IPv4 frames, the Layer 3 Address 0 Register 2 contains the 32-bit IP Source Address field. For IPv6 frames, it contains Bits [31:0] of the 128-bit IP Source Address or Destination Address field...";
fil["295"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr0_Reg3.html@@@Layer3_Addr0_Reg3@@@For IPv4 frames, the Layer 3 Address 0 Register 3 contains the 32-bit IP Source Address field. For IPv6 frames, it contains Bits [31:0] of the 128-bit IP Source Address or Destination Address field...";
fil["296"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr1_Reg0.html@@@Layer3_Addr1_Reg0@@@For IPv4 frames, the Layer 3 Address 1 Register 0 contains the 32-bit IP Destination Address field. For IPv6 frames, it contains Bits[63:32] of the 128-bit IP Source Address or Destination Address field...";
fil["297"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr1_Reg1.html@@@Layer3_Addr1_Reg1@@@For IPv4 frames, the Layer 3 Address 1 Register 1 contains the 32-bit IP Destination Address field. For IPv6 frames, it contains Bits[63:32] of the 128-bit IP Source Address or Destination Address field...";
fil["298"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr1_Reg2.html@@@Layer3_Addr1_Reg2@@@For IPv4 frames, the Layer 3 Address 1 Register 2 contains the 32-bit IP Destination Address field. For IPv6 frames, it contains Bits [63:32] of the 128-bit IP Source Address or Destination Address field...";
fil["299"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr1_Reg3.html@@@Layer3_Addr1_Reg3@@@For IPv4 frames, the Layer 3 Address 1 Register 3 contains the 32-bit IP Destination Address field. For IPv6 frames, it contains Bits [63:32] of the 128-bit IP Source Address or Destination Address field...";
fil["300"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr2_Reg0.html@@@Layer3_Addr2_Reg0@@@For IPv4 frames, the Layer 3 Address 2 Register 0 is reserved. For IPv6 frames, it contains Bits [95:64] of the 128-bit IP Source Address or Destination Address field...";
fil["301"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr2_Reg1.html@@@Layer3_Addr2_Reg1@@@For IPv4 frames, the Layer 3 Address 2 Register 1 is reserved. For IPv6 frames, it contains Bits [95:64] of the 128-bit IP Source Address or Destination Address field...";
fil["302"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr2_Reg2.html@@@Layer3_Addr2_Reg2@@@For IPv4 frames, the Layer 3 Address 2 Register 2 is reserved. For IPv6 frames, it contains Bits [95:64] of the 128-bit IP Source Address or Destination Address field...";
fil["303"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr2_Reg3.html@@@Layer3_Addr2_Reg3@@@For IPv4 frames, the Layer 3 Address 2 Register 3 is reserved. For IPv6 frames, it contains Bits [95:64] of the 128-bit IP Source Address or Destination Address field...";
fil["304"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr3_Reg0.html@@@Layer3_Addr3_Reg0@@@For IPv4 frames, the Layer 3 Address 3 Register 0 is reserved. For IPv6 frames, it contains Bits [127:96] of the 128-bit IP Source Address or Destination Address field...";
fil["305"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr3_Reg1.html@@@Layer3_Addr3_Reg1@@@For IPv4 frames, the Layer 3 Address 3 Register 1 is reserved. For IPv6 frames, it contains Bits [127:96] of the 128-bit IP Source Address or Destination Address field...";
fil["306"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr3_Reg2.html@@@Layer3_Addr3_Reg2@@@For IPv4 frames, the Layer 3 Address 3 Register 2 is reserved. For IPv6 frames, it contains Bits [127:96] of the 128-bit IP Source Address or Destination Address field...";
fil["307"]= "reg_default_component/register_emac_emac_gmacgrp_Layer3_Addr3_Reg3.html@@@Layer3_Addr3_Reg3@@@For IPv4 frames, the Layer 3 Address 3 Register 3 is reserved. For IPv6 frames, it contains Bits [127:96] of the 128-bit IP Source Address or Destination Address field...";
fil["308"]= "reg_default_component/register_emac_emac_gmacgrp_Layer4_Address0.html@@@Layer4_Address0@@@Because the Layer 3 and Layer 4 Address Registers are double-synchronized to the Rx clock domains, then the synchronization is triggered only when Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the Layer 3 and Layer 4 Address Registers are written. For proper synchronization updates, you should perform the consecutive writes to the same Layer 3 and Layer 4 Address Registers after at least four clock cycles delay of the destination clock...";
fil["309"]= "reg_default_component/register_emac_emac_gmacgrp_Layer4_Address1.html@@@Layer4_Address1@@@Because the Layer 3 and Layer 4 Address Registers are double-synchronized to the Rx clock domains, then the synchronization is triggered only when Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the Layer 3 and Layer 4 Address Registers are written. For proper synchronization updates, you should perform the consecutive writes to the same Layer 3 and Layer 4 Address Registers after at least four clock cycles delay of the destination clock...";
fil["310"]= "reg_default_component/register_emac_emac_gmacgrp_Layer4_Address2.html@@@Layer4_Address2@@@Because the Layer 3 and Layer 4 Address Registers are double-synchronized to the Rx clock domains, then the synchronization is triggered only when Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the Layer 3 and Layer 4 Address Registers are written. For proper synchronization updates, you should perform the consecutive writes to the same Layer 3 and Layer 4 Address Registers after at least four clock cycles delay of the destination clock...";
fil["311"]= "reg_default_component/register_emac_emac_gmacgrp_Layer4_Address3.html@@@Layer4_Address3@@@Because the Layer 3 and Layer 4 Address Registers are double-synchronized to the Rx clock domains, then the synchronization is triggered only when Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the Layer 3 and Layer 4 Address Registers are written. For proper synchronization updates, you should perform the consecutive writes to the same Layer 3 and Layer 4 Address Registers after at least four clock cycles delay of the destination clock...";
fil["312"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address0_High.html@@@MAC_Address0_High@@@The MAC Address0 High register holds the upper 16 bits of the first 6-byte MAC address of the station. The first DA byte that is received on the (G)MII interface corresponds to the LS byte (Bits [7:0]) of the MAC Address Low register. For example, if 0x112233445566 is received (0x11 in lane 0 of the first column) on the (G)MII as the destination address, then the MacAddress0 Register [47:0] is compared with 0x665544332211. Because the MAC address registers are double-synchronized to the (G)MII clock domains, then the synchronization is triggered only when Bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address0 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain...";
fil["313"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address0_Low.html@@@MAC_Address0_Low@@@The MAC Address0 Low register holds the lower 32 bits of the first 6-byte MAC address of the station...";
fil["314"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address100_High.html@@@MAC_Address100_High@@@The MAC Address100 High register holds the upper 16 bits of the 101th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address100 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["315"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address100_Low.html@@@MAC_Address100_Low@@@The MAC Address100 Low register holds the lower 32 bits of the 101th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["316"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address101_High.html@@@MAC_Address101_High@@@The MAC Address101 High register holds the upper 16 bits of the 102th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address101 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["317"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address101_Low.html@@@MAC_Address101_Low@@@The MAC Address101 Low register holds the lower 32 bits of the 102th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["318"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address102_High.html@@@MAC_Address102_High@@@The MAC Address102 High register holds the upper 16 bits of the 103th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address102 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["319"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address102_Low.html@@@MAC_Address102_Low@@@The MAC Address102 Low register holds the lower 32 bits of the 103th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["320"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address103_High.html@@@MAC_Address103_High@@@The MAC Address103 High register holds the upper 16 bits of the 104th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address103 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["321"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address103_Low.html@@@MAC_Address103_Low@@@The MAC Address103 Low register holds the lower 32 bits of the 104th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["322"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address104_High.html@@@MAC_Address104_High@@@The MAC Address104 High register holds the upper 16 bits of the 105th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address104 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["323"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address104_Low.html@@@MAC_Address104_Low@@@The MAC Address104 Low register holds the lower 32 bits of the 105th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["324"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address105_High.html@@@MAC_Address105_High@@@The MAC Address105 High register holds the upper 16 bits of the 106th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address105 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["325"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address105_Low.html@@@MAC_Address105_Low@@@The MAC Address105 Low register holds the lower 32 bits of the 106th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["326"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address106_High.html@@@MAC_Address106_High@@@The MAC Address106 High register holds the upper 16 bits of the 107th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address106 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["327"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address106_Low.html@@@MAC_Address106_Low@@@The MAC Address106 Low register holds the lower 32 bits of the 107th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["328"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address107_High.html@@@MAC_Address107_High@@@The MAC Address107 High register holds the upper 16 bits of the 108th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address107 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["329"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address107_Low.html@@@MAC_Address107_Low@@@The MAC Address107 Low register holds the lower 32 bits of the 108th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["330"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address108_High.html@@@MAC_Address108_High@@@The MAC Address108 High register holds the upper 16 bits of the 109th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address108 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["331"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address108_Low.html@@@MAC_Address108_Low@@@The MAC Address108 Low register holds the lower 32 bits of the 109th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["332"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address109_High.html@@@MAC_Address109_High@@@The MAC Address109 High register holds the upper 16 bits of the 110th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address109 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["333"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address109_Low.html@@@MAC_Address109_Low@@@The MAC Address109 Low register holds the lower 32 bits of the 110th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["334"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address10_High.html@@@MAC_Address10_High@@@The MAC Address10 High register holds the upper 16 bits of the 11th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address10 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["335"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address10_Low.html@@@MAC_Address10_Low@@@The MAC Address10 Low register holds the lower 32 bits of the 11th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["336"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address110_High.html@@@MAC_Address110_High@@@The MAC Address110 High register holds the upper 16 bits of the 111th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address110 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["337"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address110_Low.html@@@MAC_Address110_Low@@@The MAC Address110 Low register holds the lower 32 bits of the 111th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["338"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address111_High.html@@@MAC_Address111_High@@@The MAC Address111 High register holds the upper 16 bits of the 112th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address111 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["339"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address111_Low.html@@@MAC_Address111_Low@@@The MAC Address111 Low register holds the lower 32 bits of the 112th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["340"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address112_High.html@@@MAC_Address112_High@@@The MAC Address112 High register holds the upper 16 bits of the 113th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address112 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["341"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address112_Low.html@@@MAC_Address112_Low@@@The MAC Address112 Low register holds the lower 32 bits of the 113th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["342"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address113_High.html@@@MAC_Address113_High@@@The MAC Address113 High register holds the upper 16 bits of the 114th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address113 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["343"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address113_Low.html@@@MAC_Address113_Low@@@The MAC Address113 Low register holds the lower 32 bits of the 114th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["344"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address114_High.html@@@MAC_Address114_High@@@The MAC Address114 High register holds the upper 16 bits of the 115th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address114 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["345"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address114_Low.html@@@MAC_Address114_Low@@@The MAC Address114 Low register holds the lower 32 bits of the 115th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["346"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address115_High.html@@@MAC_Address115_High@@@The MAC Address115 High register holds the upper 16 bits of the 116th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address115 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["347"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address115_Low.html@@@MAC_Address115_Low@@@The MAC Address115 Low register holds the lower 32 bits of the 116th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["348"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address116_High.html@@@MAC_Address116_High@@@The MAC Address116 High register holds the upper 16 bits of the 117th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address116 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["349"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address116_Low.html@@@MAC_Address116_Low@@@The MAC Address116 Low register holds the lower 32 bits of the 117th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["350"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address117_High.html@@@MAC_Address117_High@@@The MAC Address117 High register holds the upper 16 bits of the 118th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address117 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["351"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address117_Low.html@@@MAC_Address117_Low@@@The MAC Address117 Low register holds the lower 32 bits of the 118th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["352"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address118_High.html@@@MAC_Address118_High@@@The MAC Address118 High register holds the upper 16 bits of the 119th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address118 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["353"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address118_Low.html@@@MAC_Address118_Low@@@The MAC Address118 Low register holds the lower 32 bits of the 119th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["354"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address119_High.html@@@MAC_Address119_High@@@The MAC Address119 High register holds the upper 16 bits of the 120th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address119 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["355"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address119_Low.html@@@MAC_Address119_Low@@@The MAC Address119 Low register holds the lower 32 bits of the 120th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["356"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address11_High.html@@@MAC_Address11_High@@@The MAC Address11 High register holds the upper 16 bits of the 12th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address11 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["357"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address11_Low.html@@@MAC_Address11_Low@@@The MAC Address11 Low register holds the lower 32 bits of the 12th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["358"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address120_High.html@@@MAC_Address120_High@@@The MAC Address120 High register holds the upper 16 bits of the 121th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address120 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["359"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address120_Low.html@@@MAC_Address120_Low@@@The MAC Address120 Low register holds the lower 32 bits of the 121th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["360"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address121_High.html@@@MAC_Address121_High@@@The MAC Address121 High register holds the upper 16 bits of the 122th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address121 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["361"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address121_Low.html@@@MAC_Address121_Low@@@The MAC Address121 Low register holds the lower 32 bits of the 122th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["362"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address122_High.html@@@MAC_Address122_High@@@The MAC Address122 High register holds the upper 16 bits of the 123th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address122 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["363"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address122_Low.html@@@MAC_Address122_Low@@@The MAC Address122 Low register holds the lower 32 bits of the 123th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["364"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address123_High.html@@@MAC_Address123_High@@@The MAC Address123 High register holds the upper 16 bits of the 124th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address123 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["365"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address123_Low.html@@@MAC_Address123_Low@@@The MAC Address123 Low register holds the lower 32 bits of the 124th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["366"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address124_High.html@@@MAC_Address124_High@@@The MAC Address124 High register holds the upper 16 bits of the 125th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address124 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["367"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address124_Low.html@@@MAC_Address124_Low@@@The MAC Address124 Low register holds the lower 32 bits of the 125th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["368"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address125_High.html@@@MAC_Address125_High@@@The MAC Address125 High register holds the upper 16 bits of the 126th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address125 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["369"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address125_Low.html@@@MAC_Address125_Low@@@The MAC Address125 Low register holds the lower 32 bits of the 126th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["370"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address126_High.html@@@MAC_Address126_High@@@The MAC Address126 High register holds the upper 16 bits of the 127th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address126 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["371"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address126_Low.html@@@MAC_Address126_Low@@@The MAC Address126 Low register holds the lower 32 bits of the 127th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["372"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address127_High.html@@@MAC_Address127_High@@@The MAC Address127 High register holds the upper 16 bits of the 128th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address127 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["373"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address127_Low.html@@@MAC_Address127_Low@@@The MAC Address127 Low register holds the lower 32 bits of the 128th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["374"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address12_High.html@@@MAC_Address12_High@@@The MAC Address12 High register holds the upper 16 bits of the 13th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address12 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["375"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address12_Low.html@@@MAC_Address12_Low@@@The MAC Address12 Low register holds the lower 32 bits of the 13th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["376"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address13_High.html@@@MAC_Address13_High@@@The MAC Address13 High register holds the upper 16 bits of the 14th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address13 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["377"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address13_Low.html@@@MAC_Address13_Low@@@The MAC Address13 Low register holds the lower 32 bits of the 14th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["378"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address14_High.html@@@MAC_Address14_High@@@The MAC Address14 High register holds the upper 16 bits of the 15th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address14 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["379"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address14_Low.html@@@MAC_Address14_Low@@@The MAC Address14 Low register holds the lower 32 bits of the 15th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["380"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address15_High.html@@@MAC_Address15_High@@@The MAC Address15 High register holds the upper 16 bits of the 16th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address15 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["381"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address15_Low.html@@@MAC_Address15_Low@@@The MAC Address15 Low register holds the lower 32 bits of the 16th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["382"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address16_High.html@@@MAC_Address16_High@@@The MAC Address16 High register holds the upper 16 bits of the 17th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address16 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["383"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address16_Low.html@@@MAC_Address16_Low@@@The MAC Address16 Low register holds the lower 32 bits of the 17th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["384"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address17_High.html@@@MAC_Address17_High@@@The MAC Address17 High register holds the upper 16 bits of the 18th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address17 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["385"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address17_Low.html@@@MAC_Address17_Low@@@The MAC Address17 Low register holds the lower 32 bits of the 18th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["386"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address18_High.html@@@MAC_Address18_High@@@The MAC Address18 High register holds the upper 16 bits of the 19th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address18 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["387"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address18_Low.html@@@MAC_Address18_Low@@@The MAC Address18 Low register holds the lower 32 bits of the 19th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["388"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address19_High.html@@@MAC_Address19_High@@@The MAC Address19 High register holds the upper 16 bits of the 20th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address19 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["389"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address19_Low.html@@@MAC_Address19_Low@@@The MAC Address19 Low register holds the lower 32 bits of the 20th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["390"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address1_High.html@@@MAC_Address1_High@@@The MAC Address1 High register holds the upper 16 bits of the 2nd 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address1 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["391"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address1_Low.html@@@MAC_Address1_Low@@@The MAC Address1 Low register holds the lower 32 bits of the 2nd 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["392"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address20_High.html@@@MAC_Address20_High@@@The MAC Address20 High register holds the upper 16 bits of the 21th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address20 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["393"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address20_Low.html@@@MAC_Address20_Low@@@The MAC Address20 Low register holds the lower 32 bits of the 21th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["394"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address21_High.html@@@MAC_Address21_High@@@The MAC Address21 High register holds the upper 16 bits of the 22th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address21 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["395"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address21_Low.html@@@MAC_Address21_Low@@@The MAC Address21 Low register holds the lower 32 bits of the 22th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["396"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address22_High.html@@@MAC_Address22_High@@@The MAC Address22 High register holds the upper 16 bits of the 23th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address22 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["397"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address22_Low.html@@@MAC_Address22_Low@@@The MAC Address22 Low register holds the lower 32 bits of the 23th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["398"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address23_High.html@@@MAC_Address23_High@@@The MAC Address23 High register holds the upper 16 bits of the 24th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address23 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["399"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address23_Low.html@@@MAC_Address23_Low@@@The MAC Address23 Low register holds the lower 32 bits of the 24th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["400"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address24_High.html@@@MAC_Address24_High@@@The MAC Address24 High register holds the upper 16 bits of the 25th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address24 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["401"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address24_Low.html@@@MAC_Address24_Low@@@The MAC Address24 Low register holds the lower 32 bits of the 25th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["402"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address25_High.html@@@MAC_Address25_High@@@The MAC Address25 High register holds the upper 16 bits of the 26th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address25 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["403"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address25_Low.html@@@MAC_Address25_Low@@@The MAC Address25 Low register holds the lower 32 bits of the 26th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["404"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address26_High.html@@@MAC_Address26_High@@@The MAC Address26 High register holds the upper 16 bits of the 27th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address26 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["405"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address26_Low.html@@@MAC_Address26_Low@@@The MAC Address26 Low register holds the lower 32 bits of the 27th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["406"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address27_High.html@@@MAC_Address27_High@@@The MAC Address27 High register holds the upper 16 bits of the 28th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address27 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["407"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address27_Low.html@@@MAC_Address27_Low@@@The MAC Address27 Low register holds the lower 32 bits of the 28th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["408"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address28_High.html@@@MAC_Address28_High@@@The MAC Address28 High register holds the upper 16 bits of the 29th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address28 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["409"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address28_Low.html@@@MAC_Address28_Low@@@The MAC Address28 Low register holds the lower 32 bits of the 29th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["410"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address29_High.html@@@MAC_Address29_High@@@The MAC Address29 High register holds the upper 16 bits of the 30th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address29 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["411"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address29_Low.html@@@MAC_Address29_Low@@@The MAC Address29 Low register holds the lower 32 bits of the 30th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["412"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address2_High.html@@@MAC_Address2_High@@@The MAC Address2 High register holds the upper 16 bits of the 3rd 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address2 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["413"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address2_Low.html@@@MAC_Address2_Low@@@The MAC Address2 Low register holds the lower 32 bits of the 3rd 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["414"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address30_High.html@@@MAC_Address30_High@@@The MAC Address30 High register holds the upper 16 bits of the 31th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address30 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["415"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address30_Low.html@@@MAC_Address30_Low@@@The MAC Address30 Low register holds the lower 32 bits of the 31th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["416"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address31_High.html@@@MAC_Address31_High@@@The MAC Address31 High register holds the upper 16 bits of the 32th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address31 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["417"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address31_Low.html@@@MAC_Address31_Low@@@The MAC Address31 Low register holds the lower 32 bits of the 32th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["418"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address32_High.html@@@MAC_Address32_High@@@The MAC Address32 High register holds the upper 16 bits of the 33th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address32 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["419"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address32_Low.html@@@MAC_Address32_Low@@@The MAC Address32 Low register holds the lower 32 bits of the 33th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["420"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address33_High.html@@@MAC_Address33_High@@@The MAC Address33 High register holds the upper 16 bits of the 34th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address33 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["421"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address33_Low.html@@@MAC_Address33_Low@@@The MAC Address33 Low register holds the lower 32 bits of the 34th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["422"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address34_High.html@@@MAC_Address34_High@@@The MAC Address34 High register holds the upper 16 bits of the 35th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address34 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["423"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address34_Low.html@@@MAC_Address34_Low@@@The MAC Address34 Low register holds the lower 32 bits of the 35th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["424"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address35_High.html@@@MAC_Address35_High@@@The MAC Address35 High register holds the upper 16 bits of the 36th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address35 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["425"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address35_Low.html@@@MAC_Address35_Low@@@The MAC Address35 Low register holds the lower 32 bits of the 36th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["426"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address36_High.html@@@MAC_Address36_High@@@The MAC Address36 High register holds the upper 16 bits of the 37th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address36 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["427"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address36_Low.html@@@MAC_Address36_Low@@@The MAC Address36 Low register holds the lower 32 bits of the 37th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["428"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address37_High.html@@@MAC_Address37_High@@@The MAC Address37 High register holds the upper 16 bits of the 38th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address37 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["429"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address37_Low.html@@@MAC_Address37_Low@@@The MAC Address37 Low register holds the lower 32 bits of the 38th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["430"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address38_High.html@@@MAC_Address38_High@@@The MAC Address38 High register holds the upper 16 bits of the 39th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address38 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["431"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address38_Low.html@@@MAC_Address38_Low@@@The MAC Address38 Low register holds the lower 32 bits of the 39th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["432"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address39_High.html@@@MAC_Address39_High@@@The MAC Address39 High register holds the upper 16 bits of the 40th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address39 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["433"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address39_Low.html@@@MAC_Address39_Low@@@The MAC Address39 Low register holds the lower 32 bits of the 40th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["434"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address3_High.html@@@MAC_Address3_High@@@The MAC Address3 High register holds the upper 16 bits of the 4th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address3 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["435"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address3_Low.html@@@MAC_Address3_Low@@@The MAC Address3 Low register holds the lower 32 bits of the 4th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["436"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address40_High.html@@@MAC_Address40_High@@@The MAC Address40 High register holds the upper 16 bits of the 41th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address40 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["437"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address40_Low.html@@@MAC_Address40_Low@@@The MAC Address40 Low register holds the lower 32 bits of the 41th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["438"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address41_High.html@@@MAC_Address41_High@@@The MAC Address41 High register holds the upper 16 bits of the 42th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address41 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["439"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address41_Low.html@@@MAC_Address41_Low@@@The MAC Address41 Low register holds the lower 32 bits of the 42th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["440"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address42_High.html@@@MAC_Address42_High@@@The MAC Address42 High register holds the upper 16 bits of the 43th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address42 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["441"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address42_Low.html@@@MAC_Address42_Low@@@The MAC Address42 Low register holds the lower 32 bits of the 43th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["442"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address43_High.html@@@MAC_Address43_High@@@The MAC Address43 High register holds the upper 16 bits of the 44th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address43 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["443"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address43_Low.html@@@MAC_Address43_Low@@@The MAC Address43 Low register holds the lower 32 bits of the 44th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["444"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address44_High.html@@@MAC_Address44_High@@@The MAC Address44 High register holds the upper 16 bits of the 45th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address44 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["445"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address44_Low.html@@@MAC_Address44_Low@@@The MAC Address44 Low register holds the lower 32 bits of the 45th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["446"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address45_High.html@@@MAC_Address45_High@@@The MAC Address45 High register holds the upper 16 bits of the 46th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address45 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["447"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address45_Low.html@@@MAC_Address45_Low@@@The MAC Address45 Low register holds the lower 32 bits of the 46th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["448"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address46_High.html@@@MAC_Address46_High@@@The MAC Address46 High register holds the upper 16 bits of the 47th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address46 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["449"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address46_Low.html@@@MAC_Address46_Low@@@The MAC Address46 Low register holds the lower 32 bits of the 47th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["450"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address47_High.html@@@MAC_Address47_High@@@The MAC Address47 High register holds the upper 16 bits of the 48th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address47 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["451"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address47_Low.html@@@MAC_Address47_Low@@@The MAC Address47 Low register holds the lower 32 bits of the 48th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["452"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address48_High.html@@@MAC_Address48_High@@@The MAC Address48 High register holds the upper 16 bits of the 49th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address48 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["453"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address48_Low.html@@@MAC_Address48_Low@@@The MAC Address48 Low register holds the lower 32 bits of the 49th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["454"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address49_High.html@@@MAC_Address49_High@@@The MAC Address49 High register holds the upper 16 bits of the 50th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address49 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["455"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address49_Low.html@@@MAC_Address49_Low@@@The MAC Address49 Low register holds the lower 32 bits of the 50th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["456"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address4_High.html@@@MAC_Address4_High@@@The MAC Address4 High register holds the upper 16 bits of the 5th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address4 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["457"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address4_Low.html@@@MAC_Address4_Low@@@The MAC Address4 Low register holds the lower 32 bits of the 5th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["458"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address50_High.html@@@MAC_Address50_High@@@The MAC Address50 High register holds the upper 16 bits of the 51th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address50 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["459"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address50_Low.html@@@MAC_Address50_Low@@@The MAC Address50 Low register holds the lower 32 bits of the 51th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["460"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address51_High.html@@@MAC_Address51_High@@@The MAC Address51 High register holds the upper 16 bits of the 52th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address51 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["461"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address51_Low.html@@@MAC_Address51_Low@@@The MAC Address51 Low register holds the lower 32 bits of the 52th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["462"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address52_High.html@@@MAC_Address52_High@@@The MAC Address52 High register holds the upper 16 bits of the 53th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address52 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["463"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address52_Low.html@@@MAC_Address52_Low@@@The MAC Address52 Low register holds the lower 32 bits of the 53th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["464"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address53_High.html@@@MAC_Address53_High@@@The MAC Address53 High register holds the upper 16 bits of the 54th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address53 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["465"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address53_Low.html@@@MAC_Address53_Low@@@The MAC Address53 Low register holds the lower 32 bits of the 54th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["466"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address54_High.html@@@MAC_Address54_High@@@The MAC Address54 High register holds the upper 16 bits of the 55th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address54 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["467"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address54_Low.html@@@MAC_Address54_Low@@@The MAC Address54 Low register holds the lower 32 bits of the 55th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["468"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address55_High.html@@@MAC_Address55_High@@@The MAC Address55 High register holds the upper 16 bits of the 56th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address55 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["469"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address55_Low.html@@@MAC_Address55_Low@@@The MAC Address55 Low register holds the lower 32 bits of the 56th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["470"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address56_High.html@@@MAC_Address56_High@@@The MAC Address56 High register holds the upper 16 bits of the 57th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address56 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["471"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address56_Low.html@@@MAC_Address56_Low@@@The MAC Address56 Low register holds the lower 32 bits of the 57th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["472"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address57_High.html@@@MAC_Address57_High@@@The MAC Address57 High register holds the upper 16 bits of the 58th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address57 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["473"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address57_Low.html@@@MAC_Address57_Low@@@The MAC Address57 Low register holds the lower 32 bits of the 58th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["474"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address58_High.html@@@MAC_Address58_High@@@The MAC Address58 High register holds the upper 16 bits of the 59th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address58 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["475"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address58_Low.html@@@MAC_Address58_Low@@@The MAC Address58 Low register holds the lower 32 bits of the 59th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["476"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address59_High.html@@@MAC_Address59_High@@@The MAC Address59 High register holds the upper 16 bits of the 60th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address59 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["477"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address59_Low.html@@@MAC_Address59_Low@@@The MAC Address59 Low register holds the lower 32 bits of the 60th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["478"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address5_High.html@@@MAC_Address5_High@@@The MAC Address5 High register holds the upper 16 bits of the 6th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address5 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["479"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address5_Low.html@@@MAC_Address5_Low@@@The MAC Address5 Low register holds the lower 32 bits of the 6th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["480"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address60_High.html@@@MAC_Address60_High@@@The MAC Address60 High register holds the upper 16 bits of the 61th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address60 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["481"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address60_Low.html@@@MAC_Address60_Low@@@The MAC Address60 Low register holds the lower 32 bits of the 61th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["482"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address61_High.html@@@MAC_Address61_High@@@The MAC Address61 High register holds the upper 16 bits of the 62th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address61 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["483"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address61_Low.html@@@MAC_Address61_Low@@@The MAC Address61 Low register holds the lower 32 bits of the 62th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["484"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address62_High.html@@@MAC_Address62_High@@@The MAC Address62 High register holds the upper 16 bits of the 63th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address62 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["485"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address62_Low.html@@@MAC_Address62_Low@@@The MAC Address62 Low register holds the lower 32 bits of the 63th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["486"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address63_High.html@@@MAC_Address63_High@@@The MAC Address63 High register holds the upper 16 bits of the 64th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address63 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["487"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address63_Low.html@@@MAC_Address63_Low@@@The MAC Address63 Low register holds the lower 32 bits of the 64th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["488"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address64_High.html@@@MAC_Address64_High@@@The MAC Address64 High register holds the upper 16 bits of the 65th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address64 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["489"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address64_Low.html@@@MAC_Address64_Low@@@The MAC Address64 Low register holds the lower 32 bits of the 65th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["490"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address65_High.html@@@MAC_Address65_High@@@The MAC Address65 High register holds the upper 16 bits of the 66th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address65 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["491"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address65_Low.html@@@MAC_Address65_Low@@@The MAC Address65 Low register holds the lower 32 bits of the 66th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["492"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address66_High.html@@@MAC_Address66_High@@@The MAC Address66 High register holds the upper 16 bits of the 67th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address66 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["493"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address66_Low.html@@@MAC_Address66_Low@@@The MAC Address66 Low register holds the lower 32 bits of the 67th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["494"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address67_High.html@@@MAC_Address67_High@@@The MAC Address67 High register holds the upper 16 bits of the 68th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address67 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["495"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address67_Low.html@@@MAC_Address67_Low@@@The MAC Address67 Low register holds the lower 32 bits of the 68th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["496"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address68_High.html@@@MAC_Address68_High@@@The MAC Address68 High register holds the upper 16 bits of the 69th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address68 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["497"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address68_Low.html@@@MAC_Address68_Low@@@The MAC Address68 Low register holds the lower 32 bits of the 69th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["498"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address69_High.html@@@MAC_Address69_High@@@The MAC Address69 High register holds the upper 16 bits of the 70th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address69 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["499"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address69_Low.html@@@MAC_Address69_Low@@@The MAC Address69 Low register holds the lower 32 bits of the 70th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["500"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address6_High.html@@@MAC_Address6_High@@@The MAC Address6 High register holds the upper 16 bits of the 7th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address6 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["501"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address6_Low.html@@@MAC_Address6_Low@@@The MAC Address6 Low register holds the lower 32 bits of the 7th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["502"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address70_High.html@@@MAC_Address70_High@@@The MAC Address70 High register holds the upper 16 bits of the 71th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address70 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["503"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address70_Low.html@@@MAC_Address70_Low@@@The MAC Address70 Low register holds the lower 32 bits of the 71th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["504"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address71_High.html@@@MAC_Address71_High@@@The MAC Address71 High register holds the upper 16 bits of the 72th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address71 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["505"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address71_Low.html@@@MAC_Address71_Low@@@The MAC Address71 Low register holds the lower 32 bits of the 72th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["506"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address72_High.html@@@MAC_Address72_High@@@The MAC Address72 High register holds the upper 16 bits of the 73th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address72 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["507"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address72_Low.html@@@MAC_Address72_Low@@@The MAC Address72 Low register holds the lower 32 bits of the 73th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["508"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address73_High.html@@@MAC_Address73_High@@@The MAC Address73 High register holds the upper 16 bits of the 74th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address73 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["509"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address73_Low.html@@@MAC_Address73_Low@@@The MAC Address73 Low register holds the lower 32 bits of the 74th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["510"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address74_High.html@@@MAC_Address74_High@@@The MAC Address74 High register holds the upper 16 bits of the 75th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address74 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["511"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address74_Low.html@@@MAC_Address74_Low@@@The MAC Address74 Low register holds the lower 32 bits of the 75th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["512"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address75_High.html@@@MAC_Address75_High@@@The MAC Address75 High register holds the upper 16 bits of the 76th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address75 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["513"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address75_Low.html@@@MAC_Address75_Low@@@The MAC Address75 Low register holds the lower 32 bits of the 76th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["514"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address76_High.html@@@MAC_Address76_High@@@The MAC Address76 High register holds the upper 16 bits of the 77th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address76 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["515"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address76_Low.html@@@MAC_Address76_Low@@@The MAC Address76 Low register holds the lower 32 bits of the 77th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["516"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address77_High.html@@@MAC_Address77_High@@@The MAC Address77 High register holds the upper 16 bits of the 78th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address77 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["517"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address77_Low.html@@@MAC_Address77_Low@@@The MAC Address77 Low register holds the lower 32 bits of the 78th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["518"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address78_High.html@@@MAC_Address78_High@@@The MAC Address78 High register holds the upper 16 bits of the 79th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address78 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["519"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address78_Low.html@@@MAC_Address78_Low@@@The MAC Address78 Low register holds the lower 32 bits of the 79th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["520"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address79_High.html@@@MAC_Address79_High@@@The MAC Address79 High register holds the upper 16 bits of the 80th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address79 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["521"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address79_Low.html@@@MAC_Address79_Low@@@The MAC Address79 Low register holds the lower 32 bits of the 80th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["522"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address7_High.html@@@MAC_Address7_High@@@The MAC Address7 High register holds the upper 16 bits of the 8th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address7 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["523"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address7_Low.html@@@MAC_Address7_Low@@@The MAC Address7 Low register holds the lower 32 bits of the 8th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["524"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address80_High.html@@@MAC_Address80_High@@@The MAC Address80 High register holds the upper 16 bits of the 81th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address80 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["525"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address80_Low.html@@@MAC_Address80_Low@@@The MAC Address80 Low register holds the lower 32 bits of the 81th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["526"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address81_High.html@@@MAC_Address81_High@@@The MAC Address81 High register holds the upper 16 bits of the 82th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address81 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["527"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address81_Low.html@@@MAC_Address81_Low@@@The MAC Address81 Low register holds the lower 32 bits of the 82th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["528"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address82_High.html@@@MAC_Address82_High@@@The MAC Address82 High register holds the upper 16 bits of the 83th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address82 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["529"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address82_Low.html@@@MAC_Address82_Low@@@The MAC Address82 Low register holds the lower 32 bits of the 83th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["530"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address83_High.html@@@MAC_Address83_High@@@The MAC Address83 High register holds the upper 16 bits of the 84th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address83 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["531"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address83_Low.html@@@MAC_Address83_Low@@@The MAC Address83 Low register holds the lower 32 bits of the 84th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["532"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address84_High.html@@@MAC_Address84_High@@@The MAC Address84 High register holds the upper 16 bits of the 85th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address84 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["533"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address84_Low.html@@@MAC_Address84_Low@@@The MAC Address84 Low register holds the lower 32 bits of the 85th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["534"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address85_High.html@@@MAC_Address85_High@@@The MAC Address85 High register holds the upper 16 bits of the 86th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address85 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["535"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address85_Low.html@@@MAC_Address85_Low@@@The MAC Address85 Low register holds the lower 32 bits of the 86th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["536"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address86_High.html@@@MAC_Address86_High@@@The MAC Address86 High register holds the upper 16 bits of the 87th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address86 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["537"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address86_Low.html@@@MAC_Address86_Low@@@The MAC Address86 Low register holds the lower 32 bits of the 87th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["538"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address87_High.html@@@MAC_Address87_High@@@The MAC Address87 High register holds the upper 16 bits of the 88th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address87 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["539"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address87_Low.html@@@MAC_Address87_Low@@@The MAC Address87 Low register holds the lower 32 bits of the 88th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["540"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address88_High.html@@@MAC_Address88_High@@@The MAC Address88 High register holds the upper 16 bits of the 89th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address88 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["541"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address88_Low.html@@@MAC_Address88_Low@@@The MAC Address88 Low register holds the lower 32 bits of the 89th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["542"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address89_High.html@@@MAC_Address89_High@@@The MAC Address89 High register holds the upper 16 bits of the 90th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address89 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["543"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address89_Low.html@@@MAC_Address89_Low@@@The MAC Address89 Low register holds the lower 32 bits of the 90th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["544"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address8_High.html@@@MAC_Address8_High@@@The MAC Address8 High register holds the upper 16 bits of the 9th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address8 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["545"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address8_Low.html@@@MAC_Address8_Low@@@The MAC Address8 Low register holds the lower 32 bits of the 9th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["546"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address90_High.html@@@MAC_Address90_High@@@The MAC Address90 High register holds the upper 16 bits of the 91th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address90 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["547"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address90_Low.html@@@MAC_Address90_Low@@@The MAC Address90 Low register holds the lower 32 bits of the 91th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["548"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address91_High.html@@@MAC_Address91_High@@@The MAC Address91 High register holds the upper 16 bits of the 92th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address91 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["549"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address91_Low.html@@@MAC_Address91_Low@@@The MAC Address91 Low register holds the lower 32 bits of the 92th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["550"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address92_High.html@@@MAC_Address92_High@@@The MAC Address92 High register holds the upper 16 bits of the 93th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address92 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["551"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address92_Low.html@@@MAC_Address92_Low@@@The MAC Address92 Low register holds the lower 32 bits of the 93th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["552"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address93_High.html@@@MAC_Address93_High@@@The MAC Address93 High register holds the upper 16 bits of the 94th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address93 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["553"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address93_Low.html@@@MAC_Address93_Low@@@The MAC Address93 Low register holds the lower 32 bits of the 94th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["554"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address94_High.html@@@MAC_Address94_High@@@The MAC Address94 High register holds the upper 16 bits of the 95th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address94 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["555"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address94_Low.html@@@MAC_Address94_Low@@@The MAC Address94 Low register holds the lower 32 bits of the 95th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["556"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address95_High.html@@@MAC_Address95_High@@@The MAC Address95 High register holds the upper 16 bits of the 96th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address95 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["557"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address95_Low.html@@@MAC_Address95_Low@@@The MAC Address95 Low register holds the lower 32 bits of the 96th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["558"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address96_High.html@@@MAC_Address96_High@@@The MAC Address96 High register holds the upper 16 bits of the 97th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address96 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["559"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address96_Low.html@@@MAC_Address96_Low@@@The MAC Address96 Low register holds the lower 32 bits of the 97th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["560"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address97_High.html@@@MAC_Address97_High@@@The MAC Address97 High register holds the upper 16 bits of the 98th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address97 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["561"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address97_Low.html@@@MAC_Address97_Low@@@The MAC Address97 Low register holds the lower 32 bits of the 98th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["562"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address98_High.html@@@MAC_Address98_High@@@The MAC Address98 High register holds the upper 16 bits of the 99th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address98 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["563"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address98_Low.html@@@MAC_Address98_Low@@@The MAC Address98 Low register holds the lower 32 bits of the 99th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["564"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address99_High.html@@@MAC_Address99_High@@@The MAC Address99 High register holds the upper 16 bits of the 100th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address99 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["565"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address99_Low.html@@@MAC_Address99_Low@@@The MAC Address99 Low register holds the lower 32 bits of the 100th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["566"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address9_High.html@@@MAC_Address9_High@@@The MAC Address9 High register holds the upper 16 bits of the 10th 6-byte MAC address of the station. Because the MAC address registers are configured to be double-synchronized to the (G)MII clock domains, the synchronization is triggered only when bits[31:24] (in little-endian mode) or Bits[7:0] (in big-endian mode) of the MAC Address9 Low Register are written. For proper synchronization updates, the consecutive writes to this Address Low Register should be performed after at least four clock cycles in the destination clock domain. Note that all MAC Address High registers (except MAC Address0 High) have the same format...";
fil["567"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Address9_Low.html@@@MAC_Address9_Low@@@The MAC Address9 Low register holds the lower 32 bits of the 10th 6-byte MAC address of the station. Note that all MAC Address Low registers (except MAC Address0 Low) have the same format...";
fil["568"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Configuration.html@@@MAC_Configuration@@@The MAC Configuration register establishes receive and transmit operating modes...";
fil["569"]= "reg_default_component/register_emac_emac_gmacgrp_MAC_Frame_Filter.html@@@MAC_Frame_Filter@@@The MAC Frame Filter register contains the filter controls for receiving frames. Some of the controls from this register go to the address check block of the MAC, which performs the first level of address filtering. The second level of filtering is performed on the incoming frame, based on other controls such as Pass Bad Frames and Pass Control Frames...";
fil["570"]= "reg_default_component/register_emac_emac_gmacgrp_MMC_Control.html@@@MMC_Control@@@The MMC Control register establishes the operating mode of the management counters. Note: The bit 0 (Counters Reset) has higher priority than bit 4 (Counter Preset). Therefore, when the Software tries to set both bits in the same write cycle, all counters are cleared and the bit 4 is not set...";
fil["571"]= "reg_default_component/register_emac_emac_gmacgrp_MMC_IPC_Receive_Interrupt.html@@@MMC_IPC_Receive_Interrupt@@@This register maintains the interrupts generated when receive IPC statistic counters reach half their maximum values (0x8000_0000 for 32-bit counter and 0x8000 for 16-bit counter), and when they cross their maximum values (0xFFFF_FFFF for 32-bit counter and 0xFFFF for 16-bit counter). When Counter Stop Rollover is set, then interrupts are set but the counter remains at all-ones. The MMC Receive Checksum Offload Interrupt register is 32-bits wide. When the MMC IPC counter that caused the interrupt is read, its corresponding interrupt bit is cleared. The counter s least-significant byte lane (bits[7:0]) must be read to clear the interrupt bit...";
fil["572"]= "reg_default_component/register_emac_emac_gmacgrp_MMC_IPC_Receive_Interrupt_Mask.html@@@MMC_IPC_Receive_Interrupt_Mask@@@This register maintains the mask for the interrupt generated from the receive IPC statistic counters...";
fil["573"]= "reg_default_component/register_emac_emac_gmacgrp_MMC_Receive_Interrupt.html@@@MMC_Receive_Interrupt@@@The MMC Receive Interrupt register maintains the interrupts that are generated when the following happens: * Receive statistic counters reach half of their maximum values (0x8000_0000 for 32-bit counter and 0x8000 for 16-bit counter). * Receive statistic counters cross their maximum values (0xFFFF_FFFF for 32-bit counter and 0xFFFF for 16-bit counter). When the Counter Stop Rollover is set, then interrupts are set but the counter remains at all-ones. The MMC Receive Interrupt register is a 32-bit wide register. An interrupt bit is cleared when the respective MMC counter that caused the interrupt is read. The least significant byte lane (Bits[7:0]) of the respective counter must be read in order to clear the interrupt bit...";
fil["574"]= "reg_default_component/register_emac_emac_gmacgrp_MMC_Receive_Interrupt_Mask.html@@@MMC_Receive_Interrupt_Mask@@@The MMC Receive Interrupt Mask register maintains the masks for the interrupts generated when the receive statistic counters reach half of their maximum value, or maximum value. This register is 32-bits wide...";
fil["575"]= "reg_default_component/register_emac_emac_gmacgrp_MMC_Transmit_Interrupt.html@@@MMC_Transmit_Interrupt@@@The MMC Transmit Interrupt register maintains the interrupts generated when transmit statistic counters reach half of their maximum values (0x8000_0000 for 32-bit counter and 0x8000 for 16-bit counter), and the maximum values (0xFFFF_FFFF for 32-bit counter and 0xFFFF for 16-bit counter). When Counter Stop Rollover is set, then interrupts are set but the counter remains at all-ones. The MMC Transmit Interrupt register is a 32-bit wide register. An interrupt bit is cleared when the respective MMC counter that caused the interrupt is read. The least significant byte lane (Bits[7:0]) of the respective counter must be read in order to clear the interrupt bit...";
fil["576"]= "reg_default_component/register_emac_emac_gmacgrp_MMC_Transmit_Interrupt_Mask.html@@@MMC_Transmit_Interrupt_Mask@@@The MMC Transmit Interrupt Mask register maintains the masks for the interrupts generated when the transmit statistic counters reach half of their maximum value or maximum value. This register is 32-bits wide...";
fil["577"]= "reg_default_component/register_emac_emac_gmacgrp_PPS0_Interval.html@@@PPS0_Interval@@@The PPS0 Interval register contains the number of units of sub-second increment value between the rising edges of PPS0 signal output (ptp_pps_o...";
fil["578"]= "reg_default_component/register_emac_emac_gmacgrp_PPS0_Width.html@@@PPS0_Width@@@The PPS0 Width register contains the number of units of sub-second increment value between the rising and corresponding falling edges of the PPS0 signal output (ptp_pps_o...";
fil["579"]= "reg_default_component/register_emac_emac_gmacgrp_PPS_Control.html@@@PPS_Control@@@Controls timestamp Pulse-Per-Second output...";
fil["580"]= "reg_default_component/register_emac_emac_gmacgrp_SGMII_RGMII_SMII_Control_Status.html@@@SGMII_RGMII_SMII_Control_Status@@@The SGMII/RGMII/SMII Status register indicates the status signals received by the RGMII interface (selected at reset) from the PHY...";
fil["581"]= "reg_default_component/register_emac_emac_gmacgrp_Sub_Second_Increment.html@@@Sub_Second_Increment@@@In the Coarse Update mode (TSCFUPDT bit in Register 448), the value in this register is added to the system time every clock cycle of clk_ptp_ref_i. In the Fine Update mode, the value in this register is added to the system time whenever the Accumulator gets an overflow...";
fil["582"]= "reg_default_component/register_emac_emac_gmacgrp_System_Time_Higher_Word_Seconds.html@@@System_Time_Higher_Word_Seconds@@@System time higher word...";
fil["583"]= "reg_default_component/register_emac_emac_gmacgrp_System_Time_Nanoseconds.html@@@System_Time_Nanoseconds@@@The value in this field has the sub second representation of time, with an accuracy of 0.46 ns. When TSCTRLSSR is set, each bit represents 1 ns and the maximum value is 0x3B9A_C9FF, after which it rolls-over to zero...";
fil["584"]= "reg_default_component/register_emac_emac_gmacgrp_System_Time_Nanoseconds_Update.html@@@System_Time_Nanoseconds_Update@@@Update system time...";
fil["585"]= "reg_default_component/register_emac_emac_gmacgrp_System_Time_Seconds.html@@@System_Time_Seconds@@@The System Time -Seconds register, along with System-TimeNanoseconds register, indicates the current value of the system time maintained by the MAC. Though it is updated on a continuous basis, there is some delay from the actual time because of clock domain transfer latencies (from clk_ptp_ref_i to l3_sp_clk...";
fil["586"]= "reg_default_component/register_emac_emac_gmacgrp_System_Time_Seconds_Update.html@@@System_Time_Seconds_Update@@@The System Time - Seconds Update register, along with the System Time - Nanoseconds Update register, initializes or updates the system time maintained by the MAC. You must write both of these registers before setting the TSINIT or TSUPDT bits in the Timestamp Control register...";
fil["587"]= "reg_default_component/register_emac_emac_gmacgrp_Target_Time_Nanoseconds.html@@@Target_Time_Nanoseconds@@@Target time...";
fil["588"]= "reg_default_component/register_emac_emac_gmacgrp_Target_Time_Seconds.html@@@Target_Time_Seconds@@@The Target Time Seconds register, along with Target Time Nanoseconds register, is used to schedule an interrupt event (Register 458[1] when Advanced Timestamping is enabled; otherwise, TS interrupt bit in Register14[9]) when the system time exceeds the value programmed in these registers...";
fil["589"]= "reg_default_component/register_emac_emac_gmacgrp_Timestamp_Addend.html@@@Timestamp_Addend@@@This register value is used only when the system time is configured for Fine Update mode (TSCFUPDT bit in Register 448). This register content is added to a 32-bit accumulator in every clock cycle (of clk_ptp_ref_i) and the system time is updated whenever the accumulator overflows...";
fil["590"]= "reg_default_component/register_emac_emac_gmacgrp_Timestamp_Control.html@@@Timestamp_Control@@@This register controls the operation of the System Time generator and the processing of PTP packets for timestamping in the Receiver...";
fil["591"]= "reg_default_component/register_emac_emac_gmacgrp_Timestamp_Status.html@@@Timestamp_Status@@@Timestamp status. All bits except Bits[27:25] get cleared when the host reads this register...";
fil["592"]= "reg_default_component/register_emac_emac_gmacgrp_VLAN_Hash_Table_Reg.html@@@VLAN_Hash_Table_Reg@@@The 16-bit Hash table is used for group address filtering based on VLAN tag when Bit 18 (VTHM) of Register 7 (VLAN Tag Register) is set. For hash filtering, the content of the 16-bit VLAN tag or 12-bit VLAN ID (based on Bit 16 (ETV) of VLAN Tag Register) in the incoming frame is passed through the CRC logic and the upper four bits of the calculated CRC are used to index the contents of the VLAN Hash table. For example, a hash value of 4b 1000 selects Bit 8 of the VLAN Hash table. The hash value of the destination address is calculated in the following way: 1. Calculate the 32-bit CRC for the VLAN tag or ID (See IEEE 802.3, Section 3.2.8 for the steps to calculate CRC32). 2. Perform bitwise reversal for the value obtained in Step 1. 3. Take the upper four bits from the value obtained in Step 2. If the corresponding bit value of the register is 1 b1, the frame is accepted. Otherwise, it is rejected. Because the Hash Table register is double-synchronized to the (G)MII clock domain, the synchronization is triggered only when Bits[15:8] (in little-endian mode) or Bits[7:0] (in big-endian mode) of this register are written. Notes: * Because of double-synchronization, consecutive writes to this register should be performed after at least four clock cycles in the destination clock domain...";
fil["593"]= "reg_default_component/register_emac_emac_gmacgrp_VLAN_Incl_Reg.html@@@VLAN_Incl_Reg@@@The VLAN Tag Inclusion or Replacement register contains the VLAN tag for insertion or replacement in the transmit frames...";
fil["594"]= "reg_default_component/register_emac_emac_gmacgrp_VLAN_Tag.html@@@VLAN_Tag@@@The VLAN Tag register contains the IEEE 802.1Q VLAN Tag to identify the VLAN frames. The MAC compares the 13th and 14th bytes of the receiving frame (Length/Type) with 16 h8100, and the following two bytes are compared with the VLAN tag. If a match occurs, the MAC sets the received VLAN bit in the receive frame status. The legal length of the frame is increased from 1,518 bytes to 1,522 bytes. Because the VLAN Tag register is double-synchronized to the (G)MII clock domain, then consecutive writes to these register should be performed only after at least four clock cycles in the destination clock domain...";
fil["595"]= "reg_default_component/register_emac_emac_gmacgrp_Version.html@@@Version@@@The Version registers identifies the version of the EMAC. This register contains two bytes: one specified by Synopsys to identify the core release number, and the other specified by Alter...";
fil["596"]= "reg_default_component/register_emac_emac_gmacgrp_rx1024tomaxoctets_gb.html@@@rx1024tomaxoctets_gb@@@Number of good and bad frames received with length between 1,024 and maxsize (inclusive) bytes, exclusive of preamble and retried frames...";
fil["597"]= "reg_default_component/register_emac_emac_gmacgrp_rx128to255octets_gb.html@@@rx128to255octets_gb@@@Number of good and bad frames received with length between 128 and 255 (inclusive) bytes, exclusive of preamble...";
fil["598"]= "reg_default_component/register_emac_emac_gmacgrp_rx256to511octets_gb.html@@@rx256to511octets_gb@@@Number of good and bad frames received with length between 256 and 511 (inclusive) bytes, exclusive of preamble...";
fil["599"]= "reg_default_component/register_emac_emac_gmacgrp_rx512to1023octets_gb.html@@@rx512to1023octets_gb@@@Number of good and bad frames received with length between 512 and 1,023 (inclusive) bytes, exclusive of preamble...";
fil["600"]= "reg_default_component/register_emac_emac_gmacgrp_rx64octets_gb.html@@@rx64octets_gb@@@Number of good and bad frames received with length 64 bytes, exclusive of preamble...";
fil["601"]= "reg_default_component/register_emac_emac_gmacgrp_rx65to127octets_gb.html@@@rx65to127octets_gb@@@Number of good and bad frames received with length between 65 and 127 (inclusive) bytes, exclusive of preamble...";
fil["602"]= "reg_default_component/register_emac_emac_gmacgrp_rxalignmenterror.html@@@rxalignmenterror@@@Number of frames received with alignment (dribble) error. Valid only in 10/100 mode...";
fil["603"]= "reg_default_component/register_emac_emac_gmacgrp_rxbroadcastframes_g.html@@@rxbroadcastframes_g@@@Number of good broadcast frames received...";
fil["604"]= "reg_default_component/register_emac_emac_gmacgrp_rxcrcerror.html@@@rxcrcerror@@@Number of frames received with CRC error...";
fil["605"]= "reg_default_component/register_emac_emac_gmacgrp_rxctrlframes_g.html@@@rxctrlframes_g@@@Number of received good control frames...";
fil["606"]= "reg_default_component/register_emac_emac_gmacgrp_rxfifooverflow.html@@@rxfifooverflow@@@Number of missed received frames due to FIFO overflow...";
fil["607"]= "reg_default_component/register_emac_emac_gmacgrp_rxframecount_gb.html@@@rxframecount_gb@@@Number of good and bad frames received...";
fil["608"]= "reg_default_component/register_emac_emac_gmacgrp_rxicmp_err_frms.html@@@rxicmp_err_frms@@@Number of good IP datagrams whose ICMP payload has a checksum error...";
fil["609"]= "reg_default_component/register_emac_emac_gmacgrp_rxicmp_err_octets.html@@@rxicmp_err_octets@@@Number of bytes received in an ICMP segment with checksum errors...";
fil["610"]= "reg_default_component/register_emac_emac_gmacgrp_rxicmp_gd_frms.html@@@rxicmp_gd_frms@@@Number of good IP datagrams with a good ICMP payload...";
fil["611"]= "reg_default_component/register_emac_emac_gmacgrp_rxicmp_gd_octets.html@@@rxicmp_gd_octets@@@Number of bytes received in a good ICMP segment...";
fil["612"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv4_frag_frms.html@@@rxipv4_frag_frms@@@Number of good IPv4 datagrams with fragmentation...";
fil["613"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv4_frag_octets.html@@@rxipv4_frag_octets@@@Number of bytes received in fragmented IPv4 datagrams. The value in the IPv4 headers Length field is used to update this counter...";
fil["614"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv4_gd_frms.html@@@rxipv4_gd_frms@@@Number of good IPv4 datagrams received with the TCP, UDP, or ICMP payload...";
fil["615"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv4_gd_octets.html@@@rxipv4_gd_octets@@@Number of bytes received in good IPv4 datagrams encapsulating TCP, UDP, or ICMP dat...";
fil["616"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv4_hdrerr_frms.html@@@rxipv4_hdrerr_frms@@@Number of IPv4 datagrams received with header (checksum, length, or version mismatch) errors...";
fil["617"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv4_hdrerr_octets.html@@@rxipv4_hdrerr_octets@@@Number of bytes received in IPv4 datagrams with header errors (checksum, length, version mismatch). The value in the Length field of IPv4 header is used to update this counter...";
fil["618"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv4_nopay_frms.html@@@rxipv4_nopay_frms@@@Number of IPv4 datagram frames received that did not have a TCP, UDP, or ICMP payload processed by the Checksum engine...";
fil["619"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv4_nopay_octets.html@@@rxipv4_nopay_octets@@@Number of bytes received in IPv4 datagrams that did not have a TCP, UDP, or ICMP payload. The value in the IPv4 headers Length field is used to update this counter...";
fil["620"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv4_udsbl_frms.html@@@rxipv4_udsbl_frms@@@Number of good IPv4 datagrams received that had a UDP payload with checksum disabled...";
fil["621"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv4_udsbl_octets.html@@@rxipv4_udsbl_octets@@@Number of bytes received in a UDP segment that had the UDP checksum disabled. This counter does not count IP Header bytes...";
fil["622"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv6_gd_frms.html@@@rxipv6_gd_frms@@@Number of good IPv6 datagrams received with TCP, UDP, or ICMP payloads...";
fil["623"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv6_gd_octets.html@@@rxipv6_gd_octets@@@Number of bytes received in good IPv6 datagrams encapsulating TCP, UDP or ICMPv6 dat...";
fil["624"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv6_hdrerr_frms.html@@@rxipv6_hdrerr_frms@@@Number of IPv6 datagrams received with header errors (length or version mismatch...";
fil["625"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv6_hdrerr_octets.html@@@rxipv6_hdrerr_octets@@@Number of bytes received in IPv6 datagrams with header errors (length, version mismatch). The value in the IPv6 headers Length field is used to update this counter...";
fil["626"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv6_nopay_frms.html@@@rxipv6_nopay_frms@@@Number of IPv6 datagram frames received that did not have a TCP, UDP, or ICMP payload. This includes all IPv6 datagrams with fragmentation or security extension headers...";
fil["627"]= "reg_default_component/register_emac_emac_gmacgrp_rxipv6_nopay_octets.html@@@rxipv6_nopay_octets@@@Number of bytes received in IPv6 datagrams that did not have a TCP, UDP, or ICMP payload. The value in the IPv6 headers Length field is used to update this counter...";
fil["628"]= "reg_default_component/register_emac_emac_gmacgrp_rxjabbererror.html@@@rxjabbererror@@@Number of giant frames received with length (including CRC) greater than 1,518 bytes (1,522 bytes for VLAN tagged) and with CRC error. If Jumbo Frame mode is enabled, then frames of length greater than 9,018 bytes (9,022 for VLAN tagged) are considered as giant frames...";
fil["629"]= "reg_default_component/register_emac_emac_gmacgrp_rxlengtherror.html@@@rxlengtherror@@@Number of frames received with length error (length type field not equal to frame size), for all frames with valid length field...";
fil["630"]= "reg_default_component/register_emac_emac_gmacgrp_rxmulticastframes_g.html@@@rxmulticastframes_g@@@Number of good multicast frames received...";
fil["631"]= "reg_default_component/register_emac_emac_gmacgrp_rxoctetcount_g.html@@@rxoctetcount_g@@@Number of bytes received, exclusive of preamble, only in good frames...";
fil["632"]= "reg_default_component/register_emac_emac_gmacgrp_rxoctetcount_gb.html@@@rxoctetcount_gb@@@Number of bytes received, exclusive of preamble, in good and bad frames...";
fil["633"]= "reg_default_component/register_emac_emac_gmacgrp_rxoutofrangetype.html@@@rxoutofrangetype@@@Number of frames received with length field not equal to the valid frame size (greater than 1,500 but less than 1,536...";
fil["634"]= "reg_default_component/register_emac_emac_gmacgrp_rxoversize_g.html@@@rxoversize_g@@@Number of frames received with length greater than the maxsize (1,518 or 1,522 for VLAN tagged frames), without errors...";
fil["635"]= "reg_default_component/register_emac_emac_gmacgrp_rxpauseframes.html@@@rxpauseframes@@@Number of good and valid PAUSE frames received...";
fil["636"]= "reg_default_component/register_emac_emac_gmacgrp_rxrcverror.html@@@rxrcverror@@@Number of frames received with Receive error or Frame Extension error on the GMII or MII interface...";
fil["637"]= "reg_default_component/register_emac_emac_gmacgrp_rxrunterror.html@@@rxrunterror@@@Number of frames received with runt (&lt;64 bytes and CRC error) error...";
fil["638"]= "reg_default_component/register_emac_emac_gmacgrp_rxtcp_err_frms.html@@@rxtcp_err_frms@@@Number of good IP datagrams whose TCP payload has a checksum error...";
fil["639"]= "reg_default_component/register_emac_emac_gmacgrp_rxtcp_gd_frms.html@@@rxtcp_gd_frms@@@Number of good IP datagrams with a good TCP payload...";
fil["640"]= "reg_default_component/register_emac_emac_gmacgrp_rxtcp_gd_octets.html@@@rxtcp_gd_octets@@@Number of bytes received in a good TCP segment...";
fil["641"]= "reg_default_component/register_emac_emac_gmacgrp_rxtcperroctets.html@@@rxtcperroctets@@@Number of bytes received in a TCP segment with checksum errors...";
fil["642"]= "reg_default_component/register_emac_emac_gmacgrp_rxudp_err_frms.html@@@rxudp_err_frms@@@Number of good IP datagrams whose UDP payload has a checksum error...";
fil["643"]= "reg_default_component/register_emac_emac_gmacgrp_rxudp_err_octets.html@@@rxudp_err_octets@@@Number of bytes received in a UDP segment that had checksum errors...";
fil["644"]= "reg_default_component/register_emac_emac_gmacgrp_rxudp_gd_frms.html@@@rxudp_gd_frms@@@Number of good IP datagrams with a good UDP payload. This counter is not updated when the counter is incremented...";
fil["645"]= "reg_default_component/register_emac_emac_gmacgrp_rxudp_gd_octets.html@@@rxudp_gd_octets@@@Number of bytes received in a good UDP segment. This counter does not count IP header bytes...";
fil["646"]= "reg_default_component/register_emac_emac_gmacgrp_rxundersize_g.html@@@rxundersize_g@@@Number of frames received with length less than 64 bytes, without any errors...";
fil["647"]= "reg_default_component/register_emac_emac_gmacgrp_rxunicastframes_g.html@@@rxunicastframes_g@@@Number of good unicast frames received...";
fil["648"]= "reg_default_component/register_emac_emac_gmacgrp_rxvlanframes_gb.html@@@rxvlanframes_gb@@@Number of good and bad VLAN frames received...";
fil["649"]= "reg_default_component/register_emac_emac_gmacgrp_rxwatchdogerror.html@@@rxwatchdogerror@@@Number of frames received with error due to watchdog timeout error (frames with a data load larger than 2,048 bytes...";
fil["650"]= "reg_default_component/register_emac_emac_gmacgrp_tx1024tomaxoctets_gb.html@@@tx1024tomaxoctets_gb@@@Number of good and bad frames transmitted with length between 1,024 and maxsize (inclusive) bytes, exclusive of preamble and retried frames...";
fil["651"]= "reg_default_component/register_emac_emac_gmacgrp_tx128to255octets_gb.html@@@tx128to255octets_gb@@@Number of good and bad frames transmitted with length between 128 and 255 (inclusive) bytes, exclusive of preamble and retried frames...";
fil["652"]= "reg_default_component/register_emac_emac_gmacgrp_tx256to511octets_gb.html@@@tx256to511octets_gb@@@Number of good and bad frames transmitted with length between 256 and 511 (inclusive) bytes, exclusive of preamble and retried frames...";
fil["653"]= "reg_default_component/register_emac_emac_gmacgrp_tx512to1023octets_gb.html@@@tx512to1023octets_gb@@@Number of good and bad frames transmitted with length between 512 and 1,023 (inclusive) bytes, exclusive of preamble and retried frames...";
fil["654"]= "reg_default_component/register_emac_emac_gmacgrp_tx64octets_gb.html@@@tx64octets_gb@@@Number of good and bad frames transmitted with length 64 bytes, exclusive of preamble and retried frames...";
fil["655"]= "reg_default_component/register_emac_emac_gmacgrp_tx65to127octets_gb.html@@@tx65to127octets_gb@@@Number of good and bad frames transmitted with length between 65 and 127 (inclusive) bytes, exclusive of preamble and retried frames...";
fil["656"]= "reg_default_component/register_emac_emac_gmacgrp_txbroadcastframes_g.html@@@txbroadcastframes_g@@@Number of good broadcast frames transmitted...";
fil["657"]= "reg_default_component/register_emac_emac_gmacgrp_txbroadcastframes_gb.html@@@txbroadcastframes_gb@@@Number of good and bad broadcast frames transmitted...";
fil["658"]= "reg_default_component/register_emac_emac_gmacgrp_txcarriererr.html@@@txcarriererr@@@Number of frames aborted due to carrier sense error (no carrier or loss of carrier...";
fil["659"]= "reg_default_component/register_emac_emac_gmacgrp_txdeferred.html@@@txdeferred@@@Number of successfully transmitted frames after a deferral in Halfduplex mode...";
fil["660"]= "reg_default_component/register_emac_emac_gmacgrp_txexcessdef.html@@@txexcessdef@@@Number of frames aborted due to excessive deferral error (deferred for more than two max-sized frame times...";
fil["661"]= "reg_default_component/register_emac_emac_gmacgrp_txexesscol.html@@@txexesscol@@@Number of frames aborted due to excessive (16) collision errors...";
fil["662"]= "reg_default_component/register_emac_emac_gmacgrp_txframecount_g.html@@@txframecount_g@@@Number of good frames transmitted...";
fil["663"]= "reg_default_component/register_emac_emac_gmacgrp_txframecount_gb.html@@@txframecount_gb@@@Number of good and bad frames transmitted, exclusive of retried frames...";
fil["664"]= "reg_default_component/register_emac_emac_gmacgrp_txlatecol.html@@@txlatecol@@@Number of frames aborted due to late collision error...";
fil["665"]= "reg_default_component/register_emac_emac_gmacgrp_txmulticastframes_g.html@@@txmulticastframes_g@@@Number of good multicast frames transmitted...";
fil["666"]= "reg_default_component/register_emac_emac_gmacgrp_txmulticastframes_gb.html@@@txmulticastframes_gb@@@Number of good and bad multicast frames transmitted...";
fil["667"]= "reg_default_component/register_emac_emac_gmacgrp_txmulticol_g.html@@@txmulticol_g@@@Number of successfully transmitted frames after more than a single collision in Half-duplex mode...";
fil["668"]= "reg_default_component/register_emac_emac_gmacgrp_txoctetcnt.html@@@txoctetcnt@@@Number of bytes transmitted, exclusive of preamble, in good frames only...";
fil["669"]= "reg_default_component/register_emac_emac_gmacgrp_txoctetcount_gb.html@@@txoctetcount_gb@@@Number of bytes transmitted, exclusive of preamble and retried bytes, in good and bad frames...";
fil["670"]= "reg_default_component/register_emac_emac_gmacgrp_txoversize_g.html@@@txoversize_g@@@Number of good and bad frames received...";
fil["671"]= "reg_default_component/register_emac_emac_gmacgrp_txpauseframes.html@@@txpauseframes@@@Number of good PAUSE frames transmitted...";
fil["672"]= "reg_default_component/register_emac_emac_gmacgrp_txsinglecol_g.html@@@txsinglecol_g@@@Number of successfully transmitted frames after a single collision in Half-duplex mode...";
fil["673"]= "reg_default_component/register_emac_emac_gmacgrp_txunderflowerror.html@@@txunderflowerror@@@Number of frames aborted due to frame underflow error...";
fil["674"]= "reg_default_component/register_emac_emac_gmacgrp_txunicastframes_gb.html@@@txunicastframes_gb@@@Number of good and bad unicast frames transmitted...";
fil["675"]= "reg_default_component/register_emac_emac_gmacgrp_txvlanframes_g.html@@@txvlanframes_g@@@Number of good VLAN frames transmitted, exclusive of retried frames...";
fil["676"]= "reg_default_component/register_fpga2hpsregs_fpga2hpsregs_idgrp_comp_id_0.html@@@comp_id_0@@@Component ID...";
fil["677"]= "reg_default_component/register_fpga2hpsregs_fpga2hpsregs_idgrp_comp_id_1.html@@@comp_id_1@@@Component ID1...";
fil["678"]= "reg_default_component/register_fpga2hpsregs_fpga2hpsregs_idgrp_comp_id_2.html@@@comp_id_2@@@Component ID2...";
fil["679"]= "reg_default_component/register_fpga2hpsregs_fpga2hpsregs_idgrp_comp_id_3.html@@@comp_id_3@@@Component ID3...";
fil["680"]= "reg_default_component/register_fpga2hpsregs_fpga2hpsregs_idgrp_periph_id_0.html@@@periph_id_0@@@Peripheral ID...";
fil["681"]= "reg_default_component/register_fpga2hpsregs_fpga2hpsregs_idgrp_periph_id_1.html@@@periph_id_1@@@Peripheral ID1...";
fil["682"]= "reg_default_component/register_fpga2hpsregs_fpga2hpsregs_idgrp_periph_id_2.html@@@periph_id_2@@@Peripheral ID2...";
fil["683"]= "reg_default_component/register_fpga2hpsregs_fpga2hpsregs_idgrp_periph_id_3.html@@@periph_id_3@@@Peripheral ID3...";
fil["684"]= "reg_default_component/register_fpga2hpsregs_fpga2hpsregs_idgrp_periph_id_4.html@@@periph_id_4@@@JEP106 continuation code...";
fil["685"]= "reg_default_component/register_fpga2hpsregs_fpga2hpsregs_slavegrp_fpga2hpsregs_slavegrp_b128_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["686"]= "reg_default_component/register_fpga2hpsregs_fpga2hpsregs_slavegrp_fpga2hpsregs_slavegrp_b128_fn_mod2.html@@@fn_mod2@@@Controls bypass merge of upsizing/downsizing...";
fil["687"]= "reg_default_component/register_fpga2hpsregs_fpga2hpsregs_slavegrp_fpga2hpsregs_slavegrp_b32_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["688"]= "reg_default_component/register_fpga2hpsregs_fpga2hpsregs_slavegrp_fpga2hpsregs_slavegrp_b32_fn_mod2.html@@@fn_mod2@@@Controls bypass merge of upsizing/downsizing...";
fil["689"]= "reg_default_component/register_fpgamgrdata_data.html@@@data@@@Used to send configuration image to FPGA. The DATA register accepts 4 bytes of the configuration image on each write. The configuration image byte-stream is converted into a 4-byte word with little-endian ordering. If the configuration image is not an integer multiple of 4 bytes, software should pad the configuration image with extra zero bytes to make it an integer multiple of 4 bytes. The FPGA Manager converts the DATA to 16 bits wide when writing CB.DATA for partial reconfiguration. The FPGA Manager waits to transmit the data to the CB until the FPGA is able to receive it. For a full configuration, the FPGA Manager waits until the FPGA exits the Reset Phase and enters the Configuration Phase. For a partial reconfiguration, the FPGA Manager waits until the CB.PR_READY signal indicates that the FPGA is ready...";
fil["690"]= "reg_default_component/register_fpgamgrregs_ctrl.html@@@ctrl@@@Allows HPS to control FPGA configuration. The NCONFIGPULL, NSTATUSPULL, and CONFDONEPULL fields drive signals to the FPGA Control Block that are logically ORed into their respective pins. These signals are always driven independent of the value of EN. The polarity of the NCONFIGPULL, NSTATUSPULL, and CONFDONEPULL fields is inverted relative to their associated pins. The MSEL (external pins), CDRATIO and CFGWDTH signals determine the mode of operation for Normal Configuration. For Partial Reconfiguration, CDRATIO is used to set the appropriate clock to data ratio, and CFGWDTH should always be set to 16-bit Passive Parallel. AXICFGEN is used to enable transfer of configuration data by enabling or disabling DCLK during data transfers...";
fil["691"]= "reg_default_component/register_fpgamgrregs_dclkcnt.html@@@dclkcnt@@@Used to give software control in enabling DCLK at any time. SW will need control of the DCLK in specific configuration and partial reconfiguration initialization steps to send spurious DCLKs required by the CB. SW takes ownership for DCLK during normal configuration, partial reconfiguration, error scenerio handshakes including SEU CRC error during partial reconfiguration, SW early abort of partial reconfiguration, and initializatin phase DCLK driving. During initialization phase, a configuration image loaded into the FPGA can request that DCLK be used as the initialization phase clock instead of the default internal oscillator or optionally the CLKUSR pin. In the case that DCLK is requested, the DCLKCNT register is used by software to control DCLK during the initialization phase. Software should poll the DCLKSTAT.DCNTDONE write one to clear register to be set when the correct number of DCLKs have completed. Software should clear DCLKSTAT.DCNTDONE before writing to the DCLKCNT register again. This field only affects the FPGA if CTRL.EN is 1...";
fil["692"]= "reg_default_component/register_fpgamgrregs_dclkstat.html@@@dclkstat@@@This write one to clear register indicates that the DCLKCNT has counted down to zero. The DCLKCNT is used by software to drive spurious DCLKs to the FPGA. Software will poll this bit after writing DCLKCNT to know when all of the DCLKs have been sent...";
fil["693"]= "reg_default_component/register_fpgamgrregs_gpi.html@@@gpi@@@Provides a low-latency, low-performance, and simple way to read general-purpose signals driven from the FPGA fabric...";
fil["694"]= "reg_default_component/register_fpgamgrregs_gpo.html@@@gpo@@@Provides a low-latency, low-performance, and simple way to drive general-purpose signals to the FPGA fabric...";
fil["695"]= "reg_default_component/register_fpgamgrregs_misci.html@@@misci@@@Provides a low-latency, low-performance, and simple way to read specific handshaking signals driven from the FPGA fabric...";
fil["696"]= "reg_default_component/register_fpgamgrregs_mon_gpio_config_reg1.html@@@gpio_config_reg1@@@Reports settings of various GPIO configuration parameters...";
fil["697"]= "reg_default_component/register_fpgamgrregs_mon_gpio_config_reg2.html@@@gpio_config_reg2@@@Specifies the bit width of port...";
fil["698"]= "reg_default_component/register_fpgamgrregs_mon_gpio_ext_porta.html@@@gpio_ext_porta@@@Reading this register reads the values of the GPIO inputs...";
fil["699"]= "reg_default_component/register_fpgamgrregs_mon_gpio_int_polarity.html@@@gpio_int_polarity@@@Controls the polarity of interrupts that can occur on each GPIO input...";
fil["700"]= "reg_default_component/register_fpgamgrregs_mon_gpio_inten.html@@@gpio_inten@@@Allows each bit of Port A to be configured to generate an interrupt or not...";
fil["701"]= "reg_default_component/register_fpgamgrregs_mon_gpio_intmask.html@@@gpio_intmask@@@This register has 12 individual interrupt masks for the MON. Controls whether an interrupt on Port A can create an interrupt for the interrupt controller by not masking it. By default, all interrupts bits are unmasked. Whenever a 1 is written to a bit in this register, it masks the interrupt generation capability for this signal; otherwise interrupts are allowed through. The unmasked status can be read as well as the resultant status after masking...";
fil["702"]= "reg_default_component/register_fpgamgrregs_mon_gpio_intstatus.html@@@gpio_intstatus@@@Reports on interrupt status for each GPIO input. The interrupt status includes the effects of masking...";
fil["703"]= "reg_default_component/register_fpgamgrregs_mon_gpio_inttype_level.html@@@gpio_inttype_level@@@The interrupt level register defines the type of interrupt (edge or level) for each GPIO input...";
fil["704"]= "reg_default_component/register_fpgamgrregs_mon_gpio_ls_sync.html@@@gpio_ls_sync@@@The Synchronization level register is used to synchronize inputs to the l4_mp_clk. All MON interrupts are already synchronized before the GPIO instance so it is not necessary to setup this register to enable synchronization...";
fil["705"]= "reg_default_component/register_fpgamgrregs_mon_gpio_porta_eoi.html@@@gpio_porta_eoi@@@This register is written by software to clear edge interrupts generated by each individual GPIO input. This register always reads back as zero...";
fil["706"]= "reg_default_component/register_fpgamgrregs_mon_gpio_raw_intstatus.html@@@gpio_raw_intstatus@@@Reports on raw interrupt status for each GPIO input. The raw interrupt status excludes the effects of masking...";
fil["707"]= "reg_default_component/register_fpgamgrregs_mon_gpio_ver_id_code.html@@@gpio_ver_id_code@@@GPIO Component Version...";
fil["708"]= "reg_default_component/register_fpgamgrregs_stat.html@@@stat@@@Provides status fields for software for the FPGA Manager. The Mode field tells software what configuration phase the FPGA currently is in. For regular configuration through the PINs or through the HPS, these states map directly to customer configuration documentation. For Configuration Via PCI Express (CVP), the IOCSR configuration is done through the PINS or through HPS. Then the complete configuration is done through the PCI Express Bus. When CVP is being done, InitPhase indicates only IOCSR configuration has completed. CVP_CONF_DONE is available in the CB Monitor for observation by software. The MSEL field provides a read only register for software to read the MSEL value driven from the external pins...";
fil["709"]= "reg_default_component/register_gpio_gpio_config_reg1.html@@@gpio_config_reg1@@@Reports settings of various GPIO configuration parameters...";
fil["710"]= "reg_default_component/register_gpio_gpio_config_reg2.html@@@gpio_config_reg2@@@Specifies the bit width of port...";
fil["711"]= "reg_default_component/register_gpio_gpio_debounce.html@@@gpio_debounce@@@Debounces each IO Pin...";
fil["712"]= "reg_default_component/register_gpio_gpio_ext_porta.html@@@gpio_ext_porta@@@The external port register is used to input data to the metastability flops...";
fil["713"]= "reg_default_component/register_gpio_gpio_id_code.html@@@gpio_id_code@@@GPIO ID code...";
fil["714"]= "reg_default_component/register_gpio_gpio_int_polarity.html@@@gpio_int_polarity@@@Controls the Polarity of Interrupts that can occur on inputs of Port A Data Register...";
fil["715"]= "reg_default_component/register_gpio_gpio_inten.html@@@gpio_inten@@@The Interrupt enable register allows interrupts for each bit of the Port A data register...";
fil["716"]= "reg_default_component/register_gpio_gpio_intmask.html@@@gpio_intmask@@@Controls which pins cause interrupts on Port A Data Register inputs...";
fil["717"]= "reg_default_component/register_gpio_gpio_intstatus.html@@@gpio_intstatus@@@The Interrupt status is reported for all Port A Data Register Bits...";
fil["718"]= "reg_default_component/register_gpio_gpio_inttype_level.html@@@gpio_inttype_level@@@The interrupt level register defines the type of interrupt (edge or level...";
fil["719"]= "reg_default_component/register_gpio_gpio_ls_sync.html@@@gpio_ls_sync@@@The Synchronization level register is used to synchronize input with l4_mp_clk...";
fil["720"]= "reg_default_component/register_gpio_gpio_porta_eoi.html@@@gpio_porta_eoi@@@Port A Data Register interrupt handling...";
fil["721"]= "reg_default_component/register_gpio_gpio_raw_intstatus.html@@@gpio_raw_intstatus@@@This is the Raw Interrupt Status Register for Port A Data Register. It is used with the Interrupt Mask Register to allow interrupts from the Port A Data Register...";
fil["722"]= "reg_default_component/register_gpio_gpio_swporta_ddr.html@@@gpio_swporta_ddr@@@This register establishes the direction of each corresponding GPIO Data Field Bit. Check the GPIO chapter in the handbook for details on how GPIO2 is implemented...";
fil["723"]= "reg_default_component/register_gpio_gpio_swporta_dr.html@@@gpio_swporta_dr@@@This GPIO Data register is used to input or output data Check the GPIO chapter in the handbook for details on how GPIO2 is implemented...";
fil["724"]= "reg_default_component/register_gpio_gpio_ver_id_code.html@@@gpio_ver_id_code@@@GPIO Component Version...";
fil["725"]= "reg_default_component/register_hps2fpgaregs_hps2fpgaregs_idgrp_comp_id_0.html@@@comp_id_0@@@Component ID...";
fil["726"]= "reg_default_component/register_hps2fpgaregs_hps2fpgaregs_idgrp_comp_id_1.html@@@comp_id_1@@@Component ID1...";
fil["727"]= "reg_default_component/register_hps2fpgaregs_hps2fpgaregs_idgrp_comp_id_2.html@@@comp_id_2@@@Component ID2...";
fil["728"]= "reg_default_component/register_hps2fpgaregs_hps2fpgaregs_idgrp_comp_id_3.html@@@comp_id_3@@@Component ID3...";
fil["729"]= "reg_default_component/register_hps2fpgaregs_hps2fpgaregs_idgrp_periph_id_0.html@@@periph_id_0@@@Peripheral ID...";
fil["730"]= "reg_default_component/register_hps2fpgaregs_hps2fpgaregs_idgrp_periph_id_1.html@@@periph_id_1@@@Peripheral ID1...";
fil["731"]= "reg_default_component/register_hps2fpgaregs_hps2fpgaregs_idgrp_periph_id_2.html@@@periph_id_2@@@Peripheral ID2...";
fil["732"]= "reg_default_component/register_hps2fpgaregs_hps2fpgaregs_idgrp_periph_id_3.html@@@periph_id_3@@@Peripheral ID3...";
fil["733"]= "reg_default_component/register_hps2fpgaregs_hps2fpgaregs_idgrp_periph_id_4.html@@@periph_id_4@@@JEP106 continuation code...";
fil["734"]= "reg_default_component/register_hps2fpgaregs_hps2fpgaregs_mastergrp_hps2fpgaregs_mastergrp_b128_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["735"]= "reg_default_component/register_hps2fpgaregs_hps2fpgaregs_mastergrp_hps2fpgaregs_mastergrp_b128_fn_mod2.html@@@fn_mod2@@@Controls bypass merge of upsizing/downsizing...";
fil["736"]= "reg_default_component/register_hps2fpgaregs_hps2fpgaregs_mastergrp_hps2fpgaregs_mastergrp_b32_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["737"]= "reg_default_component/register_hps2fpgaregs_hps2fpgaregs_mastergrp_hps2fpgaregs_mastergrp_b32_fn_mod2.html@@@fn_mod2@@@Controls bypass merge of upsizing/downsizing...";
fil["738"]= "reg_default_component/register_i2c_ic_ack_general_call.html@@@ic_ack_general_call@@@The register controls whether i2c responds with a ACK or NACK when it receives an I2C General Call address...";
fil["739"]= "reg_default_component/register_i2c_ic_clr_activity.html@@@ic_clr_activity@@@Clears ACTIVITY Interrupt...";
fil["740"]= "reg_default_component/register_i2c_ic_clr_gen_call.html@@@ic_clr_gen_call@@@Clear GEN_CALL Interrupt Register...";
fil["741"]= "reg_default_component/register_i2c_ic_clr_intr.html@@@ic_clr_intr@@@Controls Interrupts...";
fil["742"]= "reg_default_component/register_i2c_ic_clr_rd_req.html@@@ic_clr_rd_req@@@Clear RD_REQ Interrupt Register...";
fil["743"]= "reg_default_component/register_i2c_ic_clr_rx_done.html@@@ic_clr_rx_done@@@Clear RX_DONE Interrupt Register...";
fil["744"]= "reg_default_component/register_i2c_ic_clr_rx_over.html@@@ic_clr_rx_over@@@Clears Rx over Interrupt Bit...";
fil["745"]= "reg_default_component/register_i2c_ic_clr_rx_under.html@@@ic_clr_rx_under@@@Rx Under Interrupt Bits...";
fil["746"]= "reg_default_component/register_i2c_ic_clr_start_det.html@@@ic_clr_start_det@@@Clears START_DET Interrupt...";
fil["747"]= "reg_default_component/register_i2c_ic_clr_stop_det.html@@@ic_clr_stop_det@@@Clear Interrupts...";
fil["748"]= "reg_default_component/register_i2c_ic_clr_tx_abrt.html@@@ic_clr_tx_abrt@@@Clear TX_ABRT Interrupt...";
fil["749"]= "reg_default_component/register_i2c_ic_clr_tx_over.html@@@ic_clr_tx_over@@@Clears Over Interrupts...";
fil["750"]= "reg_default_component/register_i2c_ic_comp_param_1.html@@@ic_comp_param_1@@@This is a constant read-only register that contains encoded information about the component s parameter settings...";
fil["751"]= "reg_default_component/register_i2c_ic_comp_type.html@@@ic_comp_type@@@Describes a unique ASCII value...";
fil["752"]= "reg_default_component/register_i2c_ic_comp_version.html@@@ic_comp_version@@@Describes the version of the I2C...";
fil["753"]= "reg_default_component/register_i2c_ic_con.html@@@ic_con@@@This register can be written only when the I2C is disabled, which corresponds to the Bit [0] of the Enable Register being set to 0. Writes at other times have no effect...";
fil["754"]= "reg_default_component/register_i2c_ic_data_cmd.html@@@ic_data_cmd@@@This is the register the CPU writes to when filling the TX FIFO. Reading from this register returns bytes from RX FIFO...";
fil["755"]= "reg_default_component/register_i2c_ic_dma_cr.html@@@ic_dma_cr@@@The register is used to enable the DMA Controller interface operation. There is a separate bit for transmit and receive. This can be programmed regardless of the state of IC_ENABLE...";
fil["756"]= "reg_default_component/register_i2c_ic_dma_rdlr.html@@@ic_dma_rdlr@@@DMA Control Signals Interface...";
fil["757"]= "reg_default_component/register_i2c_ic_dma_tdlr.html@@@ic_dma_tdlr@@@This register supports DMA Transmit Operation...";
fil["758"]= "reg_default_component/register_i2c_ic_enable.html@@@ic_enable@@@Enable and disable i2c operation...";
fil["759"]= "reg_default_component/register_i2c_ic_enable_status.html@@@ic_enable_status@@@This register is used to report the i2c hardware status when the IC_ENABLE register is set from 1 to 0; that is, when i2c is disabled. If IC_ENABLE has been set to 1, bits 2:1 are forced to 0, and bit 0 is forced to 1. If IC_ENABLE has been set to 0, bits 2:1 are only valid as soon as bit 0 is read as  0 . Note: When ic_enable has been written with  0  a delay occurs for bit 0 to be read as  0  because disabling the i2c depends on I2C bus activities...";
fil["760"]= "reg_default_component/register_i2c_ic_fs_scl_hcnt.html@@@ic_fs_scl_hcnt@@@This register sets the SCL clock high-period count for fast speed...";
fil["761"]= "reg_default_component/register_i2c_ic_fs_scl_lcnt.html@@@ic_fs_scl_lcnt@@@This register sets the SCL clock low period count...";
fil["762"]= "reg_default_component/register_i2c_ic_fs_spklen.html@@@ic_fs_spklen@@@This register is used to store the duration, measured in ic_clk cycles, of the longest spike that is filtered out by the spike suppression logic when the component is operating in SS or FS modes...";
fil["763"]= "reg_default_component/register_i2c_ic_intr_mask.html@@@ic_intr_mask@@@These bits mask their corresponding interrupt status bits...";
fil["764"]= "reg_default_component/register_i2c_ic_intr_stat.html@@@ic_intr_stat@@@Each bit in this register has a corresponding mask bit in the Interrupt Mask Register. These bits are cleared by reading the matching Interrupt Clear Register. The unmasked raw versions of these bits are available in the Raw Interrupt Status Register...";
fil["765"]= "reg_default_component/register_i2c_ic_raw_intr_stat.html@@@ic_raw_intr_stat@@@Unlike the ic_intr_stat register, these bits are not masked so they always show the true status of the I2C...";
fil["766"]= "reg_default_component/register_i2c_ic_rx_tl.html@@@ic_rx_tl@@@I2C Receive FIFO Threshold Register...";
fil["767"]= "reg_default_component/register_i2c_ic_rxflr.html@@@ic_rxflr@@@This register contains the number of valid data entries in the receive FIFO buffer. It is cleared whenever: - The I2C is disabled - Whenever there is a transmit abort caused by any of the events tracked in ic_tx_abrt_source The register increments whenever data is placed into the receive FIFO and decrements when data is taken from the receive FIFO...";
fil["768"]= "reg_default_component/register_i2c_ic_sar.html@@@ic_sar@@@Holds Address of Slave...";
fil["769"]= "reg_default_component/register_i2c_ic_sda_hold.html@@@ic_sda_hold@@@This register controls the amount of time delay (in terms of number of l4_sp_clk clock periods) introduced in the falling edge of SCL, relative to SDA changing, when I2C services a read request in a slave-transmitter operation. The relevant I2C requirement is thd:DAT as detailed in the I2C Bus Specification...";
fil["770"]= "reg_default_component/register_i2c_ic_sda_setup.html@@@ic_sda_setup@@@This register controls the amount of time delay (in terms of number of l4_sp_clk clock periods) introduced in the rising edge of SCL relative to SDA changing by holding SCL low when I2C services a read request while operating as a slave-transmitter. The relevant I2C requirement is tSU:DAT (note 4) as detailed in the I2C Bus Specification. This register must be programmed with a value equal to or greater than 2. Note: The length of setup time is calculated using [(IC_SDA_SETUP - 1) * (l4_sp_clk)], so if the user requires 10 l4_sp_clk periods of setup time, they should program a value of 11. The IC_SDA_SETUP register is only used by the I2C when operating as a slave transmitter...";
fil["771"]= "reg_default_component/register_i2c_ic_slv_data_nack_only.html@@@ic_slv_data_nack_only@@@The register is used to generate a NACK for the data part of a transfer when i2c is acting as a slave-receiver...";
fil["772"]= "reg_default_component/register_i2c_ic_ss_scl_hcnt.html@@@ic_ss_scl_hcnt@@@This register sets the SCL clock high-period count for standard speed...";
fil["773"]= "reg_default_component/register_i2c_ic_ss_scl_lcnt.html@@@ic_ss_scl_lcnt@@@This register sets the SCL clock low-period count for standard speed...";
fil["774"]= "reg_default_component/register_i2c_ic_status.html@@@ic_status@@@This is a read-only register used to indicate the current transfer status and FIFO status. The status register may be read at any time. None of the bits in this register request an interrupt.When the I2C is disabled by writing 0 in bit 0 of the ic_enable register: - Bits 1 and 2 are set to 1 - Bits 3 and 4 are set to 0 When the master or slave state machines goes to idle - Bits 5 and 6 are set to...";
fil["775"]= "reg_default_component/register_i2c_ic_tar.html@@@ic_tar@@@This register can be written to only when the ic_enable register is set to 0. This register is 13 bits wide. All bits can be dynamically updated as long as any set of the following conditions are true, (Enable Register bit 0 is set to 0) or (Enable Register bit 0 is set to 1 AND (I2C is NOT engaged in any Master [tx, rx] operation [ic_status register mst_activity bit 5 is set to 0]) AND (I2C is enabled to operate in Master mode[ic_con bit[0] is set to one]) AND (there are NO entries in the TX FIFO Register [IC_STATUS bit [2] is set to 1...";
fil["776"]= "reg_default_component/register_i2c_ic_tx_abrt_source.html@@@ic_tx_abrt_source@@@This register has 16 bits that indicate the source of the TX_ABRT bit. Except for Bit 9, this register is cleared whenever the ic_clr_tx_abrt register or the ic_clr_intr register is read. To clear Bit 9, the source of the abrt_sbyte_norstrt must be fixed first; RESTART must be enabled (ic_con[5]=1), the special bit must be cleared (ic_tar[11]), or the gc_or_start bit must be cleared (ic_tar[10]). Once the source of the abrt_sbyte_norstrt is fixed, then this bit can be cleared in the same manner as other bits in this register. If the source of the abrt_sbyte_norstrt is not fixed before attempting to clear this bit, Bit 9 clears for one cycle and is then re-asserted...";
fil["777"]= "reg_default_component/register_i2c_ic_tx_tl.html@@@ic_tx_tl@@@Sets FIFO depth for Interrupt...";
fil["778"]= "reg_default_component/register_i2c_ic_txflr.html@@@ic_txflr@@@This register contains the number of valid data entries in the transmit FIFO buffer. It is cleared whenever: - The I2C is disabled - There is a transmit abort that is, TX_ABRT bit is set in the ic_raw_intr_stat register. The slave bulk transmit mode is aborted The register increments whenever data is placed into the transmit FIFO and decrements when data is taken from the transmit FIFO...";
fil["779"]= "reg_default_component/register_l3regs_l3regs_idgrp_comp_id_0.html@@@comp_id_0@@@Component ID...";
fil["780"]= "reg_default_component/register_l3regs_l3regs_idgrp_comp_id_1.html@@@comp_id_1@@@Component ID1...";
fil["781"]= "reg_default_component/register_l3regs_l3regs_idgrp_comp_id_2.html@@@comp_id_2@@@Component ID2...";
fil["782"]= "reg_default_component/register_l3regs_l3regs_idgrp_comp_id_3.html@@@comp_id_3@@@Component ID3...";
fil["783"]= "reg_default_component/register_l3regs_l3regs_idgrp_periph_id_0.html@@@periph_id_0@@@Peripheral ID...";
fil["784"]= "reg_default_component/register_l3regs_l3regs_idgrp_periph_id_1.html@@@periph_id_1@@@Peripheral ID1...";
fil["785"]= "reg_default_component/register_l3regs_l3regs_idgrp_periph_id_2.html@@@periph_id_2@@@Peripheral ID2...";
fil["786"]= "reg_default_component/register_l3regs_l3regs_idgrp_periph_id_3.html@@@periph_id_3@@@Peripheral ID3...";
fil["787"]= "reg_default_component/register_l3regs_l3regs_idgrp_periph_id_4.html@@@periph_id_4@@@JEP106 continuation code...";
fil["788"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_acp_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["789"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_acp_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["790"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_fpgamgrdata_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["791"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_fpgamgrdata_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["792"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_fpgamgrdata_wr_tidemark.html@@@wr_tidemark@@@Controls the release of the transaction in the write data FIFO...";
fil["793"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_hps2fpga_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["794"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_hps2fpga_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["795"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_hps2fpga_wr_tidemark.html@@@wr_tidemark@@@Controls the release of the transaction in the write data FIFO...";
fil["796"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_l4main_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["797"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_l4mp_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["798"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_l4osc1_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["799"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_l4sp_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["800"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_l4spim_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["801"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_lwhps2fpga_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["802"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_lwhps2fpga_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["803"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_nanddata_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["804"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_nanddata_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["805"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_nandregs_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["806"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_nandregs_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["807"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_ocram_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["808"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_ocram_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["809"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_ocram_wr_tidemark.html@@@wr_tidemark@@@Controls the release of the transaction in the write data FIFO...";
fil["810"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_qspidata_ahb_cntl.html@@@ahb_cntl@@@Sets the block issuing capability to one outstanding transaction...";
fil["811"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_qspidata_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["812"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_rom_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["813"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_rom_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["814"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_stm_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["815"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_stm_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["816"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_usb0_ahb_cntl.html@@@ahb_cntl@@@Sets the block issuing capability to one outstanding transaction...";
fil["817"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_usb0_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["818"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_usb1_ahb_cntl.html@@@ahb_cntl@@@Sets the block issuing capability to one outstanding transaction...";
fil["819"]= "reg_default_component/register_l3regs_l3regs_mastergrp_l3regs_mastergrp_usb1_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["820"]= "reg_default_component/register_l3regs_l3regs_secgrp_acp.html@@@acp@@@Controls security settings for MPU ACP peripheral...";
fil["821"]= "reg_default_component/register_l3regs_l3regs_secgrp_fpgamgrdata.html@@@fpgamgrdata@@@Controls security settings for FPGA Manager Data peripheral...";
fil["822"]= "reg_default_component/register_l3regs_l3regs_secgrp_hps2fpgaregs.html@@@hps2fpgaregs@@@Controls security settings for HPS2FPGA AXI Bridge Registers peripheral...";
fil["823"]= "reg_default_component/register_l3regs_l3regs_secgrp_l4main.html@@@l4main@@@Controls security settings for L4 main peripherals...";
fil["824"]= "reg_default_component/register_l3regs_l3regs_secgrp_l4mp.html@@@l4mp@@@Controls security settings for L4 MP peripherals...";
fil["825"]= "reg_default_component/register_l3regs_l3regs_secgrp_l4osc1.html@@@l4osc1@@@Controls security settings for L4 OSC1 peripherals...";
fil["826"]= "reg_default_component/register_l3regs_l3regs_secgrp_l4sp.html@@@l4sp@@@Controls security settings for L4 SP peripherals...";
fil["827"]= "reg_default_component/register_l3regs_l3regs_secgrp_l4spim.html@@@l4spim@@@Controls security settings for L4 SPIM peripherals...";
fil["828"]= "reg_default_component/register_l3regs_l3regs_secgrp_lwhps2fpgaregs.html@@@lwhps2fpgaregs@@@Controls security settings for LWHPS2FPGA AXI Bridge Registers peripheral...";
fil["829"]= "reg_default_component/register_l3regs_l3regs_secgrp_nanddata.html@@@nanddata@@@Controls security settings for NAND Flash Controller Data peripheral...";
fil["830"]= "reg_default_component/register_l3regs_l3regs_secgrp_nandregs.html@@@nandregs@@@Controls security settings for NAND Flash Controller Registers peripheral...";
fil["831"]= "reg_default_component/register_l3regs_l3regs_secgrp_ocram.html@@@ocram@@@Controls security settings for On-chip RAM peripheral...";
fil["832"]= "reg_default_component/register_l3regs_l3regs_secgrp_qspidata.html@@@qspidata@@@Controls security settings for QSPI Flash Controller Data peripheral...";
fil["833"]= "reg_default_component/register_l3regs_l3regs_secgrp_rom.html@@@rom@@@Controls security settings for ROM peripheral...";
fil["834"]= "reg_default_component/register_l3regs_l3regs_secgrp_sdrdata.html@@@sdrdata@@@Controls security settings for SDRAM Data peripheral...";
fil["835"]= "reg_default_component/register_l3regs_l3regs_secgrp_stm.html@@@stm@@@Controls security settings for STM peripheral...";
fil["836"]= "reg_default_component/register_l3regs_l3regs_secgrp_usb0.html@@@usb0@@@Controls security settings for USB0 Registers peripheral...";
fil["837"]= "reg_default_component/register_l3regs_l3regs_secgrp_usb1.html@@@usb1@@@Controls security settings for USB1 Registers peripheral...";
fil["838"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_dap_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["839"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_dap_fn_mod2.html@@@fn_mod2@@@Controls bypass merge of upsizing/downsizing...";
fil["840"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_dap_fn_mod_ahb.html@@@fn_mod_ahb@@@Controls how AHB-lite burst transactions are converted to AXI tranactions...";
fil["841"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_dap_read_qos.html@@@read_qos@@@QoS (Quality of Service) value for the read channel...";
fil["842"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_dap_write_qos.html@@@write_qos@@@QoS (Quality of Service) value for the write channel...";
fil["843"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_dma_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["844"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_dma_read_qos.html@@@read_qos@@@QoS (Quality of Service) value for the read channel...";
fil["845"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_dma_write_qos.html@@@write_qos@@@QoS (Quality of Service) value for the write channel...";
fil["846"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_emac0_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["847"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_emac0_read_qos.html@@@read_qos@@@QoS (Quality of Service) value for the read channel...";
fil["848"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_emac0_write_qos.html@@@write_qos@@@QoS (Quality of Service) value for the write channel...";
fil["849"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_emac1_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["850"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_emac1_read_qos.html@@@read_qos@@@QoS (Quality of Service) value for the read channel...";
fil["851"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_emac1_write_qos.html@@@write_qos@@@QoS (Quality of Service) value for the write channel...";
fil["852"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_etr_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["853"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_etr_read_qos.html@@@read_qos@@@QoS (Quality of Service) value for the read channel...";
fil["854"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_etr_write_qos.html@@@write_qos@@@QoS (Quality of Service) value for the write channel...";
fil["855"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_fpga2hps_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["856"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_fpga2hps_read_qos.html@@@read_qos@@@QoS (Quality of Service) value for the read channel...";
fil["857"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_fpga2hps_wr_tidemark.html@@@wr_tidemark@@@Controls the release of the transaction in the write data FIFO...";
fil["858"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_fpga2hps_write_qos.html@@@write_qos@@@QoS (Quality of Service) value for the write channel...";
fil["859"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_mpu_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["860"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_mpu_read_qos.html@@@read_qos@@@QoS (Quality of Service) value for the read channel...";
fil["861"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_mpu_write_qos.html@@@write_qos@@@QoS (Quality of Service) value for the write channel...";
fil["862"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_nand_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["863"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_nand_read_qos.html@@@read_qos@@@QoS (Quality of Service) value for the read channel...";
fil["864"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_nand_write_qos.html@@@write_qos@@@QoS (Quality of Service) value for the write channel...";
fil["865"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_sdmmc_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["866"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_sdmmc_fn_mod_ahb.html@@@fn_mod_ahb@@@Controls how AHB-lite burst transactions are converted to AXI tranactions...";
fil["867"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_sdmmc_read_qos.html@@@read_qos@@@QoS (Quality of Service) value for the read channel...";
fil["868"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_sdmmc_write_qos.html@@@write_qos@@@QoS (Quality of Service) value for the write channel...";
fil["869"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_usb0_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["870"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_usb0_fn_mod_ahb.html@@@fn_mod_ahb@@@Controls how AHB-lite burst transactions are converted to AXI tranactions...";
fil["871"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_usb0_read_qos.html@@@read_qos@@@QoS (Quality of Service) value for the read channel...";
fil["872"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_usb0_write_qos.html@@@write_qos@@@QoS (Quality of Service) value for the write channel...";
fil["873"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_usb1_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["874"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_usb1_fn_mod_ahb.html@@@fn_mod_ahb@@@Controls how AHB-lite burst transactions are converted to AXI tranactions...";
fil["875"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_usb1_read_qos.html@@@read_qos@@@QoS (Quality of Service) value for the read channel...";
fil["876"]= "reg_default_component/register_l3regs_l3regs_slavegrp_l3regs_slavegrp_usb1_write_qos.html@@@write_qos@@@QoS (Quality of Service) value for the write channel...";
fil["877"]= "reg_default_component/register_l3regs_remap.html@@@remap@@@The L3 interconnect has separate address maps for the various L3 Masters. Generally, the addresses are the same for most masters. However, the sparse interconnect of the L3 switch causes some masters to have holes in their memory maps. The remap bits are not mutually exclusive. Each bit can be set independently and in combinations. Priority for the bits is determined by the bit offset: lower offset bits take precedence over higher offset bits...";
fil["878"]= "reg_default_component/register_l4wd_cd_wdt_top_rst.html@@@cd_wdt_top_rst@@@This is a constant read-only register that contains encoded information about the component s parameter settings...";
fil["879"]= "reg_default_component/register_l4wd_cp_wdt_cnt_rst.html@@@cp_wdt_cnt_rst@@@This is a constant read-only register that contains encoded information about the component s parameter settings...";
fil["880"]= "reg_default_component/register_l4wd_cp_wdt_user_top_init_max.html@@@cp_wdt_user_top_init_max@@@This is a constant read-only register that contains encoded information about the component s parameter settings...";
fil["881"]= "reg_default_component/register_l4wd_cp_wdt_user_top_max.html@@@cp_wdt_user_top_max@@@This is a constant read-only register that contains encoded information about the component s parameter settings...";
fil["882"]= "reg_default_component/register_l4wd_wdt_ccvr.html@@@wdt_ccvr@@@See Field Description...";
fil["883"]= "reg_default_component/register_l4wd_wdt_comp_param_1.html@@@wdt_comp_param_1@@@This is a constant read-only register that contains encoded information about the component s parameter settings...";
fil["884"]= "reg_default_component/register_l4wd_wdt_comp_type.html@@@wdt_comp_type@@@Module Instance Base Address Register Address l4wd0 0xFFD02000 0xFFD020FC l4wd1 0xFFD03000 0xFFD030FC Offset: 0xFC Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 wdt_comp_type...";
fil["885"]= "reg_default_component/register_l4wd_wdt_comp_version.html@@@wdt_comp_version@@@Module Instance Base Address Register Address l4wd0 0xFFD02000 0xFFD020F8 l4wd1 0xFFD03000 0xFFD030F8 Offset: 0xF8 Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16...";
fil["886"]= "reg_default_component/register_l4wd_wdt_cr.html@@@wdt_cr@@@Contains fields that control operating functions...";
fil["887"]= "reg_default_component/register_l4wd_wdt_crr.html@@@wdt_crr@@@Restarts the watchdog...";
fil["888"]= "reg_default_component/register_l4wd_wdt_eoi.html@@@wdt_eoi@@@Clears the watchdog interrupt when read...";
fil["889"]= "reg_default_component/register_l4wd_wdt_stat.html@@@wdt_stat@@@Provides interrupt status...";
fil["890"]= "reg_default_component/register_l4wd_wdt_torr.html@@@wdt_torr@@@Contains fields that determine the watchdog timeout...";
fil["891"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_idgrp_comp_id_0.html@@@comp_id_0@@@Component ID...";
fil["892"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_idgrp_comp_id_1.html@@@comp_id_1@@@Component ID1...";
fil["893"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_idgrp_comp_id_2.html@@@comp_id_2@@@Component ID2...";
fil["894"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_idgrp_comp_id_3.html@@@comp_id_3@@@Component ID3...";
fil["895"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_idgrp_periph_id_0.html@@@periph_id_0@@@Peripheral ID...";
fil["896"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_idgrp_periph_id_1.html@@@periph_id_1@@@Peripheral ID1...";
fil["897"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_idgrp_periph_id_2.html@@@periph_id_2@@@Peripheral ID2...";
fil["898"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_idgrp_periph_id_3.html@@@periph_id_3@@@Peripheral ID3...";
fil["899"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_idgrp_periph_id_4.html@@@periph_id_4@@@JEP106 continuation code...";
fil["900"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_mastergrp_lwhps2fpgaregs_mastergrp_b32_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["901"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_mastergrp_lwhps2fpgaregs_mastergrp_b32_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["902"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_mastergrp_lwhps2fpgaregs_mastergrp_b32_wr_tidemark.html@@@wr_tidemark@@@Controls the release of the transaction in the write data FIFO...";
fil["903"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_mastergrp_lwhps2fpgaregs_mastergrp_fpga2hpsregs_ahb_cntl.html@@@ahb_cntl@@@Sets the block issuing capability to one outstanding transaction...";
fil["904"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_mastergrp_lwhps2fpgaregs_mastergrp_fpga2hpsregs_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["905"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_mastergrp_lwhps2fpgaregs_mastergrp_hps2fpgaregs_ahb_cntl.html@@@ahb_cntl@@@Sets the block issuing capability to one outstanding transaction...";
fil["906"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_mastergrp_lwhps2fpgaregs_mastergrp_hps2fpgaregs_fn_mod_bm_iss.html@@@fn_mod_bm_iss@@@Sets the issuing capability of the preceding switch arbitration scheme to multiple or single outstanding transactions...";
fil["907"]= "reg_default_component/register_lwhps2fpgaregs_lwhps2fpgaregs_slavegrp_lwhps2fpgaregs_slavegrp_b32_fn_mod.html@@@fn_mod@@@Sets the block issuing capability to multiple or single outstanding transactions...";
fil["908"]= "reg_default_component/register_nandregs_nandregs_config_acc_clks.html@@@acc_clks@@@Timing parameter from read enable going low to capture read dat...";
fil["909"]= "reg_default_component/register_nandregs_nandregs_config_cache_read_enable.html@@@cache_read_enable@@@Device supports cache read command sequence...";
fil["910"]= "reg_default_component/register_nandregs_nandregs_config_cache_write_enable.html@@@cache_write_enable@@@Device supports cache write command sequence...";
fil["911"]= "reg_default_component/register_nandregs_nandregs_config_chip_enable_dont_care.html@@@chip_enable_dont_care@@@Device can work in the chip enable dont care mode...";
fil["912"]= "reg_default_component/register_nandregs_nandregs_config_copyback_disable.html@@@copyback_disable@@@Device does not support copyback command sequence...";
fil["913"]= "reg_default_component/register_nandregs_nandregs_config_copyback_mode.html@@@copyback_mode@@@The type of copyback sequence that the controller will follow...";
fil["914"]= "reg_default_component/register_nandregs_nandregs_config_cs_setup_cnt.html@@@cs_setup_cnt@@@Chip select setup time...";
fil["915"]= "reg_default_component/register_nandregs_nandregs_config_device_main_area_size.html@@@device_main_area_size@@@Page main area size of device in bytes...";
fil["916"]= "reg_default_component/register_nandregs_nandregs_config_device_reset.html@@@device_reset@@@Device reset. Controller sends a RESET command to device. Controller resets bit after sending command to device...";
fil["917"]= "reg_default_component/register_nandregs_nandregs_config_device_spare_area_size.html@@@device_spare_area_size@@@Page spare area size of device in bytes...";
fil["918"]= "reg_default_component/register_nandregs_nandregs_config_device_width.html@@@device_width@@@I/O width of attached devices...";
fil["919"]= "reg_default_component/register_nandregs_nandregs_config_devices_connected.html@@@devices_connected@@@Number of Devices connected on one bank...";
fil["920"]= "reg_default_component/register_nandregs_nandregs_config_die_mask.html@@@die_mask@@@Indicates the die differentiator in case of NAND devices with stacked dies...";
fil["921"]= "reg_default_component/register_nandregs_nandregs_config_ecc_correction.html@@@ecc_correction@@@Correction capability required...";
fil["922"]= "reg_default_component/register_nandregs_nandregs_config_ecc_enable.html@@@ecc_enable@@@Enable controller ECC check bit generation and correction...";
fil["923"]= "reg_default_component/register_nandregs_nandregs_config_erase_wait_cnt.html@@@erase_wait_cnt@@@Wait count value for Erase operation...";
fil["924"]= "reg_default_component/register_nandregs_nandregs_config_first_block_of_next_plane.html@@@first_block_of_next_plane@@@The starting block address of the next plane in a multi plane device...";
fil["925"]= "reg_default_component/register_nandregs_nandregs_config_global_int_enable.html@@@global_int_enable@@@Global Interrupt enable and Error/Timeout disable...";
fil["926"]= "reg_default_component/register_nandregs_nandregs_config_int_mon_cyccnt.html@@@int_mon_cyccnt@@@Interrupt monitor cycle count value...";
fil["927"]= "reg_default_component/register_nandregs_nandregs_config_load_wait_cnt.html@@@load_wait_cnt@@@Wait count value for Load operation...";
fil["928"]= "reg_default_component/register_nandregs_nandregs_config_max_rd_delay.html@@@max_rd_delay@@@Max round trip read data delay for data capture...";
fil["929"]= "reg_default_component/register_nandregs_nandregs_config_multiplane_addr_restrict.html@@@multiplane_addr_restrict@@@Address restriction for multiplane commands...";
fil["930"]= "reg_default_component/register_nandregs_nandregs_config_multiplane_operation.html@@@multiplane_operation@@@Multiplane transfer mode. Pipelined read, copyback, erase and program commands are transfered in multiplane mode...";
fil["931"]= "reg_default_component/register_nandregs_nandregs_config_multiplane_read_enable.html@@@multiplane_read_enable@@@Device supports multiplane read command sequence...";
fil["932"]= "reg_default_component/register_nandregs_nandregs_config_number_of_planes.html@@@number_of_planes@@@Number of planes in the device...";
fil["933"]= "reg_default_component/register_nandregs_nandregs_config_pages_per_block.html@@@pages_per_block@@@Number of pages in a block...";
fil["934"]= "reg_default_component/register_nandregs_nandregs_config_por_reset_count.html@@@por_reset_count@@@The number of cycles the controller waits after reset to issue the first RESET command to the device...";
fil["935"]= "reg_default_component/register_nandregs_nandregs_config_prefetch_mode.html@@@prefetch_mode@@@Enables read data prefetching to faster performance...";
fil["936"]= "reg_default_component/register_nandregs_nandregs_config_program_wait_cnt.html@@@program_wait_cnt@@@Wait count value for Program operation...";
fil["937"]= "reg_default_component/register_nandregs_nandregs_config_rb_pin_enabled.html@@@rb_pin_enabled@@@Interrupt or polling mode. Ready/Busy pin is enabled from device...";
fil["938"]= "reg_default_component/register_nandregs_nandregs_config_rdwr_en_hi_cnt.html@@@rdwr_en_hi_cnt@@@Read/Write Enable high pulse width...";
fil["939"]= "reg_default_component/register_nandregs_nandregs_config_rdwr_en_lo_cnt.html@@@rdwr_en_lo_cnt@@@Read/Write Enable low pulse width...";
fil["940"]= "reg_default_component/register_nandregs_nandregs_config_re_2_re.html@@@re_2_re@@@Timing parameter between re high to re low (Trhz) for the next bank...";
fil["941"]= "reg_default_component/register_nandregs_nandregs_config_re_2_we.html@@@re_2_we@@@Timing parameter between re high to we low (Trhw...";
fil["942"]= "reg_default_component/register_nandregs_nandregs_config_read_mode.html@@@read_mode@@@The type of read sequence that the controller will follow for pipe read commands...";
fil["943"]= "reg_default_component/register_nandregs_nandregs_config_spare_area_marker.html@@@spare_area_marker@@@Spare area marker value...";
fil["944"]= "reg_default_component/register_nandregs_nandregs_config_spare_area_skip_bytes.html@@@spare_area_skip_bytes@@@Spare area skip bytes...";
fil["945"]= "reg_default_component/register_nandregs_nandregs_config_tcwaw_and_addr_2_data.html@@@tcwaw_and_addr_2_data@@@Module Instance Base Address Register Address nandregs 0xFFB80000 0xFFB80110 Offset: 0x110 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4...";
fil["946"]= "reg_default_component/register_nandregs_nandregs_config_transfer_spare_reg.html@@@transfer_spare_reg@@@Default data transfer mode. (Ignored during Spare only mode...";
fil["947"]= "reg_default_component/register_nandregs_nandregs_config_twhr2_and_we_2_re.html@@@twhr2_and_we_2_re@@@Module Instance Base Address Register Address nandregs 0xFFB80000 0xFFB80100 Offset: 0x100 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4...";
fil["948"]= "reg_default_component/register_nandregs_nandregs_config_two_row_addr_cycles.html@@@two_row_addr_cycles@@@Attached device has only 2 ROW address cycles...";
fil["949"]= "reg_default_component/register_nandregs_nandregs_config_watchdog_reset_count.html@@@watchdog_reset_count@@@The number of cycles the controller waits before flagging a watchdog timeout interrupt...";
fil["950"]= "reg_default_component/register_nandregs_nandregs_config_write_mode.html@@@write_mode@@@The type of write sequence that the controller will follow for pipe write commands...";
fil["951"]= "reg_default_component/register_nandregs_nandregs_config_write_protect.html@@@write_protect@@@This register is used to control the assertion/de-assertion of the WP# pin to the device...";
fil["952"]= "reg_default_component/register_nandregs_nandregs_dma_chip_interleave_enable_and_allow_int_reads.html@@@chip_interleave_enable_and_allow_int_reads@@@Module Instance Base Address Register Address nandregs 0xFFB80000 0xFFB80780 Offset: 0x780 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4...";
fil["953"]= "reg_default_component/register_nandregs_nandregs_dma_dma_enable.html@@@dma_enable@@@Module Instance Base Address Register Address nandregs 0xFFB80000 0xFFB80700 Offset: 0x700 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4...";
fil["954"]= "reg_default_component/register_nandregs_nandregs_dma_dma_intr.html@@@dma_intr@@@DMA interrupt register...";
fil["955"]= "reg_default_component/register_nandregs_nandregs_dma_dma_intr_en.html@@@dma_intr_en@@@Enables corresponding interrupt bit in dma interrupt register...";
fil["956"]= "reg_default_component/register_nandregs_nandregs_dma_flash_burst_length.html@@@flash_burst_length@@@Module Instance Base Address Register Address nandregs 0xFFB80000 0xFFB80770 Offset: 0x770 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 reserved RW 0x0 15 14 13 12 11 10 9 8 7...";
fil["957"]= "reg_default_component/register_nandregs_nandregs_dma_lun_status_cmd.html@@@lun_status_cmd@@@Indicates the command to be sent while checking status of the next LUN...";
fil["958"]= "reg_default_component/register_nandregs_nandregs_dma_no_of_blocks_per_lun.html@@@no_of_blocks_per_lun@@@Module Instance Base Address Register Address nandregs 0xFFB80000 0xFFB80790 Offset: 0x790 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4...";
fil["959"]= "reg_default_component/register_nandregs_nandregs_dma_target_err_addr_hi.html@@@target_err_addr_hi@@@Transaction address for which controller initiator interface received an ERROR target response...";
fil["960"]= "reg_default_component/register_nandregs_nandregs_dma_target_err_addr_lo.html@@@target_err_addr_lo@@@Transaction address for which controller initiator interface received an ERROR target response...";
fil["961"]= "reg_default_component/register_nandregs_nandregs_ecc_ECCCorInfo_b01.html@@@ECCCorInfo_b01@@@ECC Error correction Information register. Controller updates this register when it completes a transaction. The values are held in this register till a new transaction completes...";
fil["962"]= "reg_default_component/register_nandregs_nandregs_ecc_ECCCorInfo_b23.html@@@ECCCorInfo_b23@@@ECC Error correction Information register. Controller updates this register when it completes a transaction. The values are held in this register till a new transaction completes...";
fil["963"]= "reg_default_component/register_nandregs_nandregs_param_device_id.html@@@device_id@@@Module Instance Base Address Register Address nandregs 0xFFB80000 0xFFB80310 Offset: 0x310 Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4...";
fil["964"]= "reg_default_component/register_nandregs_nandregs_param_device_param_0.html@@@device_param_0@@@Module Instance Base Address Register Address nandregs 0xFFB80000 0xFFB80320 Offset: 0x320 Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4...";
fil["965"]= "reg_default_component/register_nandregs_nandregs_param_device_param_1.html@@@device_param_1@@@Module Instance Base Address Register Address nandregs 0xFFB80000 0xFFB80330 Offset: 0x330 Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4...";
fil["966"]= "reg_default_component/register_nandregs_nandregs_param_device_param_2.html@@@device_param_2@@@Module Instance Base Address Register Address nandregs 0xFFB80000 0xFFB80340 Offset: 0x340 Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4...";
fil["967"]= "reg_default_component/register_nandregs_nandregs_param_features.html@@@features@@@Shows Available hardware features or attributes...";
fil["968"]= "reg_default_component/register_nandregs_nandregs_param_logical_page_data_size.html@@@logical_page_data_size@@@Logical page data area size in bytes...";
fil["969"]= "reg_default_component/register_nandregs_nandregs_param_logical_page_spare_size.html@@@logical_page_spare_size@@@Logical page data area size in bytes...";
fil["970"]= "reg_default_component/register_nandregs_nandregs_param_manufacturer_id.html@@@manufacturer_id@@@Module Instance Base Address Register Address nandregs 0xFFB80000 0xFFB80300 Offset: 0x300 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4...";
fil["971"]= "reg_default_component/register_nandregs_nandregs_param_onfi_device_features.html@@@onfi_device_features@@@Features supported by the connected ONFI device...";
fil["972"]= "reg_default_component/register_nandregs_nandregs_param_onfi_device_no_of_blocks_per_lun_l.html@@@onfi_device_no_of_blocks_per_lun_l@@@Lower bits of number of blocks per LUN present in the ONFI complaint device...";
fil["973"]= "reg_default_component/register_nandregs_nandregs_param_onfi_device_no_of_blocks_per_lun_u.html@@@onfi_device_no_of_blocks_per_lun_u@@@Upper bits of number of blocks per LUN present in the ONFI complaint device...";
fil["974"]= "reg_default_component/register_nandregs_nandregs_param_onfi_device_no_of_luns.html@@@onfi_device_no_of_luns@@@Indicates if the device is an ONFI compliant device and the number of LUNS present in the device...";
fil["975"]= "reg_default_component/register_nandregs_nandregs_param_onfi_optional_commands.html@@@onfi_optional_commands@@@Optional commands supported by the connected ONFI device...";
fil["976"]= "reg_default_component/register_nandregs_nandregs_param_onfi_pgm_cache_timing_mode.html@@@onfi_pgm_cache_timing_mode@@@Asynchronous Program Cache Timing modes supported by the connected ONFI device...";
fil["977"]= "reg_default_component/register_nandregs_nandregs_param_onfi_timing_mode.html@@@onfi_timing_mode@@@Asynchronous Timing modes supported by the connected ONFI device...";
fil["978"]= "reg_default_component/register_nandregs_nandregs_param_revision.html@@@revision@@@Controller revision number...";
fil["979"]= "reg_default_component/register_nandregs_nandregs_status_err_block_addr0.html@@@err_block_addr0@@@Erred block address bank...";
fil["980"]= "reg_default_component/register_nandregs_nandregs_status_err_block_addr1.html@@@err_block_addr1@@@Erred block address bank 1...";
fil["981"]= "reg_default_component/register_nandregs_nandregs_status_err_block_addr2.html@@@err_block_addr2@@@Erred block address bank 2...";
fil["982"]= "reg_default_component/register_nandregs_nandregs_status_err_block_addr3.html@@@err_block_addr3@@@Erred block address bank 3...";
fil["983"]= "reg_default_component/register_nandregs_nandregs_status_err_page_addr0.html@@@err_page_addr0@@@Erred page address bank...";
fil["984"]= "reg_default_component/register_nandregs_nandregs_status_err_page_addr1.html@@@err_page_addr1@@@Erred page address bank 1...";
fil["985"]= "reg_default_component/register_nandregs_nandregs_status_err_page_addr2.html@@@err_page_addr2@@@Erred page address bank 2...";
fil["986"]= "reg_default_component/register_nandregs_nandregs_status_err_page_addr3.html@@@err_page_addr3@@@Erred page address bank 3...";
fil["987"]= "reg_default_component/register_nandregs_nandregs_status_intr_en0.html@@@intr_en0@@@Enables corresponding interrupt bit in interrupt register for bank...";
fil["988"]= "reg_default_component/register_nandregs_nandregs_status_intr_en1.html@@@intr_en1@@@Enables corresponding interrupt bit in interrupt register for bank 1...";
fil["989"]= "reg_default_component/register_nandregs_nandregs_status_intr_en2.html@@@intr_en2@@@Enables corresponding interrupt bit in interrupt register for bank 2...";
fil["990"]= "reg_default_component/register_nandregs_nandregs_status_intr_en3.html@@@intr_en3@@@Enables corresponding interrupt bit in interrupt register for bank 3...";
fil["991"]= "reg_default_component/register_nandregs_nandregs_status_intr_status0.html@@@intr_status0@@@Interrupt status register for bank...";
fil["992"]= "reg_default_component/register_nandregs_nandregs_status_intr_status1.html@@@intr_status1@@@Interrupt status register for bank 1...";
fil["993"]= "reg_default_component/register_nandregs_nandregs_status_intr_status2.html@@@intr_status2@@@Interrupt status register for bank 2...";
fil["994"]= "reg_default_component/register_nandregs_nandregs_status_intr_status3.html@@@intr_status3@@@Interrupt status register for bank 3...";
fil["995"]= "reg_default_component/register_nandregs_nandregs_status_page_cnt0.html@@@page_cnt0@@@Decrementing page count bank...";
fil["996"]= "reg_default_component/register_nandregs_nandregs_status_page_cnt1.html@@@page_cnt1@@@Decrementing page count bank 1...";
fil["997"]= "reg_default_component/register_nandregs_nandregs_status_page_cnt2.html@@@page_cnt2@@@Decrementing page count bank 2...";
fil["998"]= "reg_default_component/register_nandregs_nandregs_status_page_cnt3.html@@@page_cnt3@@@Decrementing page count bank 3...";
fil["999"]= "reg_default_component/register_nandregs_nandregs_status_transfer_mode.html@@@transfer_mode@@@Current data transfer mode is Main only, Spare only or Main+Spare. This information is per bank...";
fil["1000"]= "reg_default_component/register_qspiregs_cfg.html@@@cfg@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705000 Offset: 0x0 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 idle RO 0x0 Reserved bauddiv RW 0xF...";
fil["1001"]= "reg_default_component/register_qspiregs_delay.html@@@delay@@@This register is used to introduce relative delays into the generation of the master output signals. All timings are defined in cycles of the qspi_clk...";
fil["1002"]= "reg_default_component/register_qspiregs_devrd.html@@@devrd@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705004 Offset: 0x4 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved dummyrdclks RW 0x0 Reserved...";
fil["1003"]= "reg_default_component/register_qspiregs_devsz.html@@@devsz@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705014 Offset: 0x14 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved bytespersubsector RW 0x10 15 14...";
fil["1004"]= "reg_default_component/register_qspiregs_devwr.html@@@devwr@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705008 Offset: 0x8 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved dummywrclks RW 0x0 Reserved...";
fil["1005"]= "reg_default_component/register_qspiregs_dmaper.html@@@dmaper@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705020 Offset: 0x20 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4 3...";
fil["1006"]= "reg_default_component/register_qspiregs_flashcmd.html@@@flashcmd@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705090 Offset: 0x90 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 cmdopcode RW 0x0 enrddata RW 0x...";
fil["1007"]= "reg_default_component/register_qspiregs_flashcmdaddr.html@@@flashcmdaddr@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705094 Offset: 0x94 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 addr RW 0x0 15 14 13 12 11 10 9 8 7 6 5...";
fil["1008"]= "reg_default_component/register_qspiregs_flashcmdrddatalo.html@@@flashcmdrddatalo@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF7050A0 Offset: 0xA0 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 data RW 0x0 15 14 13 12 11 10 9 8 7 6 5...";
fil["1009"]= "reg_default_component/register_qspiregs_flashcmdrddataup.html@@@flashcmdrddataup@@@Device Instruction Register...";
fil["1010"]= "reg_default_component/register_qspiregs_flashcmdwrdatalo.html@@@flashcmdwrdatalo@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF7050A8 Offset: 0xA8 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 data RW 0x0 15 14 13 12 11 10 9 8 7 6 5...";
fil["1011"]= "reg_default_component/register_qspiregs_flashcmdwrdataup.html@@@flashcmdwrdataup@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF7050AC Offset: 0xAC Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 data RW 0x0 15 14 13 12 11 10 9 8 7 6 5...";
fil["1012"]= "reg_default_component/register_qspiregs_indaddrtrig.html@@@indaddrtrig@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF70501C Offset: 0x1C Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 addr RW 0x0 15 14 13 12 11 10 9 8 7 6 5...";
fil["1013"]= "reg_default_component/register_qspiregs_indrd.html@@@indrd@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705060 Offset: 0x60 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4 3...";
fil["1014"]= "reg_default_component/register_qspiregs_indrdcnt.html@@@indrdcnt@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF70506C Offset: 0x6C Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 value RW 0x0 15 14 13 12 11 10 9 8 7 6 5...";
fil["1015"]= "reg_default_component/register_qspiregs_indrdstaddr.html@@@indrdstaddr@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705068 Offset: 0x68 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 addr RW 0x0 15 14 13 12 11 10 9 8 7 6 5...";
fil["1016"]= "reg_default_component/register_qspiregs_indrdwater.html@@@indrdwater@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705064 Offset: 0x64 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 level RW 0x0 15 14 13 12 11 10 9 8 7 6 5...";
fil["1017"]= "reg_default_component/register_qspiregs_indwr.html@@@indwr@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705070 Offset: 0x70 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4 3...";
fil["1018"]= "reg_default_component/register_qspiregs_indwrcnt.html@@@indwrcnt@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF70507C Offset: 0x7C Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 value RW 0x0 15 14 13 12 11 10 9 8 7 6 5...";
fil["1019"]= "reg_default_component/register_qspiregs_indwrstaddr.html@@@indwrstaddr@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705078 Offset: 0x78 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 addr RW 0x0 15 14 13 12 11 10 9 8 7 6 5...";
fil["1020"]= "reg_default_component/register_qspiregs_indwrwater.html@@@indwrwater@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705074 Offset: 0x74 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 level RW 0xFFFFFFFF 15 14 13 12 11 10 9...";
fil["1021"]= "reg_default_component/register_qspiregs_irqmask.html@@@irqmask@@@If disabled, the interrupt for the corresponding interrupt status register bit is disabled. If enabled, the interrupt for the corresponding interrupt status register bit is enabled...";
fil["1022"]= "reg_default_component/register_qspiregs_irqstat.html@@@irqstat@@@The status fields in this register are set when the described event occurs and the interrupt is enabled in the mask register. When any of these bit fields are set, the interrupt output is asserted high. The fields are each cleared by writing a 1 to the field. Note that bit fields 7 thru 11 are only valid when legacy SPI mode is active...";
fil["1023"]= "reg_default_component/register_qspiregs_lowwrprot.html@@@lowwrprot@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705050 Offset: 0x50 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 subsector RW 0x0 15 14 13 12 11 10 9 8 7...";
fil["1024"]= "reg_default_component/register_qspiregs_modebit.html@@@modebit@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705028 Offset: 0x28 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4 3...";
fil["1025"]= "reg_default_component/register_qspiregs_moduleid.html@@@moduleid@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF7050FC Offset: 0xFC Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved value RO 0x1001 15 14 13 12 11...";
fil["1026"]= "reg_default_component/register_qspiregs_rddatacap.html@@@rddatacap@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705010 Offset: 0x10 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4 3...";
fil["1027"]= "reg_default_component/register_qspiregs_remapaddr.html@@@remapaddr@@@This register is used to remap an incoming AHB address to a different address used by the FLASH device...";
fil["1028"]= "reg_default_component/register_qspiregs_rxthresh.html@@@rxthresh@@@Device Instruction Register...";
fil["1029"]= "reg_default_component/register_qspiregs_sramfill.html@@@sramfill@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF70502C Offset: 0x2C Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 indwrpart RO 0x0 15 14 13 12 11 10 9 8 7...";
fil["1030"]= "reg_default_component/register_qspiregs_srampart.html@@@srampart@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705018 Offset: 0x18 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4 3...";
fil["1031"]= "reg_default_component/register_qspiregs_txthresh.html@@@txthresh@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705030 Offset: 0x30 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4 3...";
fil["1032"]= "reg_default_component/register_qspiregs_uppwrprot.html@@@uppwrprot@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705054 Offset: 0x54 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 subsector RW 0x0 15 14 13 12 11 10 9 8 7...";
fil["1033"]= "reg_default_component/register_qspiregs_wrprot.html@@@wrprot@@@Module Instance Base Address Register Address qspiregs 0xFF705000 0xFF705058 Offset: 0x58 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4 3...";
fil["1034"]= "reg_default_component/register_rstmgr_brgmodrst.html@@@brgmodrst@@@The BRGMODRST register is used by software to trigger module resets (individual module reset signals). Software explicitly asserts and de-asserts module reset signals by writing bits in the appropriate *MODRST register. It is up to software to ensure module reset signals are asserted for the appropriate length of time and are de-asserted in the correct order. It is also up to software to not assert a module reset signal that would prevent software from de-asserting the module reset signal. For example, software should not assert the module reset to the CPU executing the software. Software writes a bit to 1 to assert the module reset signal and to 0 to de-assert the module reset signal. All fields are reset by a cold reset.All fields are also reset by a warm reset if not masked by the corresponding BRGWARMMASK field. The reset value of all fields is 1. This holds the corresponding module in reset until software is ready to release the module from reset by writing 0 to its field...";
fil["1035"]= "reg_default_component/register_rstmgr_counts.html@@@counts@@@The COUNTS register is used by software to control reset behavior.It includes fields for software to control the behavior of the warm reset and nRST pin. Fields are only reset by a cold reset...";
fil["1036"]= "reg_default_component/register_rstmgr_ctrl.html@@@ctrl@@@The CTRL register is used by software to control reset behavior.It includes fields for software to initiate the cold and warm reset, enable hardware handshake with other modules before warm reset, and perform software handshake. The software handshake sequence must match the hardware sequence. Software mustde-assert the handshake request after asserting warm reset and before de-assert the warm reset. Fields are only reset by a cold reset...";
fil["1037"]= "reg_default_component/register_rstmgr_miscmodrst.html@@@miscmodrst@@@The MISCMODRST register is used by software to trigger module resets (individual module reset signals). Software explicitly asserts and de-asserts module reset signals by writing bits in the appropriate *MODRST register. It is up to software to ensure module reset signals are asserted for the appropriate length of time and are de-asserted in the correct order. It is also up to software to not assert a module reset signal that would prevent software from de-asserting the module reset signal. For example, software should not assert the module reset to the CPU executing the software. Software writes a bit to 1 to assert the module reset signal and to 0 to de-assert the module reset signal. All fields are only reset by a cold reset...";
fil["1038"]= "reg_default_component/register_rstmgr_mpumodrst.html@@@mpumodrst@@@The MPUMODRST register is used by software to trigger module resets (individual module reset signals). Software explicitly asserts and de-asserts module reset signals by writing bits in the appropriate *MODRST register. It is up to software to ensure module reset signals are asserted for the appropriate length of time and are de-asserted in the correct order. It is also up to software to not assert a module reset signal that would prevent software from de-asserting the module reset signal. For example, software should not assert the module reset to the CPU executing the software. Software writes a bit to 1 to assert the module reset signal and to 0 to de-assert the module reset signal. All fields except CPU1 are only reset by a cold reset. The CPU1 field is reset by a cold reset. The CPU1 field is also reset by a warm reset if not masked by the corresponding MPUWARMMASK field...";
fil["1039"]= "reg_default_component/register_rstmgr_per2modrst.html@@@per2modrst@@@The PER2MODRST register is used by software to trigger module resets (individual module reset signals). Software explicitly asserts and de-asserts module reset signals by writing bits in the appropriate *MODRST register. It is up to software to ensure module reset signals are asserted for the appropriate length of time and are de-asserted in the correct order. It is also up to software to not assert a module reset signal that would prevent software from de-asserting the module reset signal. For example, software should not assert the module reset to the CPU executing the software. Software writes a bit to 1 to assert the module reset signal and to 0 to de-assert the module reset signal. All fields are reset by a cold reset.All fields are also reset by a warm reset if not masked by the corresponding PERWARMMASK field. The reset value of all fields is 1. This holds the corresponding module in reset until software is ready to release the module from reset by writing 0 to its field...";
fil["1040"]= "reg_default_component/register_rstmgr_permodrst.html@@@permodrst@@@The PERMODRST register is used by software to trigger module resets (individual module reset signals). Software explicitly asserts and de-asserts module reset signals by writing bits in the appropriate *MODRST register. It is up to software to ensure module reset signals are asserted for the appropriate length of time and are de-asserted in the correct order. It is also up to software to not assert a module reset signal that would prevent software from de-asserting the module reset signal. For example, software should not assert the module reset to the CPU executing the software. Software writes a bit to 1 to assert the module reset signal and to 0 to de-assert the module reset signal. All fields are reset by a cold reset.All fields are also reset by a warm reset if not masked by the corresponding PERWARMMASK field. The reset value of all fields is 1. This holds the corresponding module in reset until software is ready to release the module from reset by writing 0 to its field...";
fil["1041"]= "reg_default_component/register_rstmgr_stat.html@@@stat@@@The STAT register contains bits that indicate the reset source or a timeout event. For reset sources, a field is 1 if its associated reset requester caused the reset. For timeout events, a field is 1 if its associated timeout occured as part of a hardware sequenced warm/debug reset. Software clears bits by writing them with a value of 1. Writes to bits with a value of 0 are ignored. After a cold reset is complete, all bits are reset to their reset value except for the bit(s) that indicate the source of the cold reset. If multiple cold reset requests overlap with each other, the source de-asserts the request last will be logged. The other reset request source(s) de-assert the request in the same cycle will also be logged, the rest of the fields are reset to default value of 0. After a warm reset is complete, the bit(s) that indicate the source of the warm reset are set to 1. A warm reset doesn t clear any of the bits in the STAT register; these bits must be cleared by software writing the STAT register...";
fil["1042"]= "reg_default_component/register_scanmgr_en.html@@@en@@@This register is used to enable one of the 5 scan-chains (0-3 and 7). Only one scan-chain must be enabled at a time. A scan-chain is enabled by writing its corresponding enable field. Software must use the System Manager to put the corresponding I/O scan-chain into the frozen state before attempting to send I/O configuration data to the I/O scan-chain. Software must only write to this register when the Scan-Chain Engine is inactive.Writing this field at any other time has unpredictable results. This means that before writing to this field, software must read the STAT register and check that the ACTIVE and WFIFOCNT fields are both zero. The name of this register in ARM documentation is PSEL...";
fil["1043"]= "reg_default_component/register_scanmgr_fifodoublebyte.html@@@fifodoublebyte@@@Writes to the FIFO Double Byte Register write a double byte value to the command FIFO. If the command FIFO is full, the APB write operation is stalled until the command FIFO is not full. Reads from the Double Byte FIFO Register read a double byte value from the command FIFO. If the command FIFO is empty, the APB read operation is stalled until the command FIFO is not empty. See the ARM documentation for a description of the read and write values. The name of this register in ARM documentation is BWFIFO2 for writes and BRFIFO2 for reads...";
fil["1044"]= "reg_default_component/register_scanmgr_fifoquadbyte.html@@@fifoquadbyte@@@Writes to the FIFO Quad Byte Register write a quad byte value to the command FIFO. If the command FIFO is full, the APB write operation is stalled until the command FIFO is not full. Reads from the Quad Byte FIFO Register read a quad byte value from the command FIFO. If the command FIFO is empty, the APB read operation is stalled until the command FIFO is not empty. See the ARM documentation for a description of the read and write values. The name of this register in ARM documentation is BWFIFO4 for writes and BRFIFO4 for reads...";
fil["1045"]= "reg_default_component/register_scanmgr_fifosinglebyte.html@@@fifosinglebyte@@@Writes to the FIFO Single Byte Register write a single byte value to the command FIFO. If the command FIFO is full, the APB write operation is stalled until the command FIFO is not full. Reads from the Single Byte FIFO Register read a single byte value from the command FIFO. If the command FIFO is empty, the APB read operation is stalled until the command FIFO is not empty. See the ARM documentation for a description of the read and write values. The name of this register in ARM documentation is BWFIFO1 for writes and BRFIFO1 for reads...";
fil["1046"]= "reg_default_component/register_scanmgr_fifotriplebyte.html@@@fifotriplebyte@@@Writes to the FIFO Triple Byte Register write a triple byte value to the command FIFO. If the command FIFO is full, the APB write operation is stalled until the command FIFO is not full. Reads from the Triple Byte FIFO Register read a triple byte value from the command FIFO. If the command FIFO is empty, the APB read operation is stalled until the command FIFO is not empty. See the ARM documentation for a description of the read and write values. The name of this register in ARM documentation is BWFIFO3 for writes and BRFIFO3 for reads...";
fil["1047"]= "reg_default_component/register_scanmgr_stat.html@@@stat@@@Consist of control bit and status information...";
fil["1048"]= "reg_default_component/register_sdmmc_back_end_power_r.html@@@back_end_power_r@@@See Field Description...";
fil["1049"]= "reg_default_component/register_sdmmc_blksiz.html@@@blksiz@@@The Block Size...";
fil["1050"]= "reg_default_component/register_sdmmc_bmod.html@@@bmod@@@Details different bus operating modes...";
fil["1051"]= "reg_default_component/register_sdmmc_bufaddr.html@@@bufaddr@@@See Field Description...";
fil["1052"]= "reg_default_component/register_sdmmc_bytcnt.html@@@bytcnt@@@The number of bytes to be transferred...";
fil["1053"]= "reg_default_component/register_sdmmc_cardthrctl.html@@@cardthrctl@@@See Field descriptions...";
fil["1054"]= "reg_default_component/register_sdmmc_cdetect.html@@@cdetect@@@Determines if card is present...";
fil["1055"]= "reg_default_component/register_sdmmc_clkdiv.html@@@clkdiv@@@Divides Clock sdmmc_clk...";
fil["1056"]= "reg_default_component/register_sdmmc_clkena.html@@@clkena@@@Controls external SD/MMC Clock Enable...";
fil["1057"]= "reg_default_component/register_sdmmc_clksrc.html@@@clksrc@@@Selects among available clock dividers. The sdmmc_cclk_out is always from clock divider...";
fil["1058"]= "reg_default_component/register_sdmmc_cmd.html@@@cmd@@@This register issues various commands...";
fil["1059"]= "reg_default_component/register_sdmmc_cmdarg.html@@@cmdarg@@@See Field Description...";
fil["1060"]= "reg_default_component/register_sdmmc_ctrl.html@@@ctrl@@@Sets various operating condiitions...";
fil["1061"]= "reg_default_component/register_sdmmc_ctype.html@@@ctype@@@Describes card formats...";
fil["1062"]= "reg_default_component/register_sdmmc_data.html@@@data@@@Provides read/write access to data FIFO. Addresses 0x200 and above are mapped to the data FIFO. More than one address is mapped to data FIFO so that FIFO can be accessed using bursts...";
fil["1063"]= "reg_default_component/register_sdmmc_dbaddr.html@@@dbaddr@@@See Field Descriptor...";
fil["1064"]= "reg_default_component/register_sdmmc_debnce.html@@@debnce@@@Module Instance Base Address Register Address sdmmc 0xFF704000 0xFF704064 Offset: 0x64 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved debounce_count RW 0xFFFFFF 15 14...";
fil["1065"]= "reg_default_component/register_sdmmc_dscaddr.html@@@dscaddr@@@See Field Description...";
fil["1066"]= "reg_default_component/register_sdmmc_fifoth.html@@@fifoth@@@DMA and FIFO Control Fields...";
fil["1067"]= "reg_default_component/register_sdmmc_hcon.html@@@hcon@@@Hardware configurations registers. Register can be used to develop configuration-independent software drivers...";
fil["1068"]= "reg_default_component/register_sdmmc_idinten.html@@@idinten@@@Various DMA Interrupt Enable Status...";
fil["1069"]= "reg_default_component/register_sdmmc_idsts.html@@@idsts@@@Sets Internal DMAC Status Fields...";
fil["1070"]= "reg_default_component/register_sdmmc_intmask.html@@@intmask@@@Allows Masking of Various Interrupts...";
fil["1071"]= "reg_default_component/register_sdmmc_mintsts.html@@@mintsts@@@Describes state of Masked Interrupt Register...";
fil["1072"]= "reg_default_component/register_sdmmc_pldmnd.html@@@pldmnd@@@See Field Description...";
fil["1073"]= "reg_default_component/register_sdmmc_pwren.html@@@pwren@@@Power on/off switch for card; once power is turned on, firmware should wait for regulator/switch ramp-up time before trying to initialize card...";
fil["1074"]= "reg_default_component/register_sdmmc_resp0.html@@@resp0@@@Preserves previous command...";
fil["1075"]= "reg_default_component/register_sdmmc_resp1.html@@@resp1@@@Module Instance Base Address Register Address sdmmc 0xFF704000 0xFF704034 Offset: 0x34 Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 response1 RO 0x0 15 14 13 12 11 10 9 8 7 6...";
fil["1076"]= "reg_default_component/register_sdmmc_resp2.html@@@resp2@@@Module Instance Base Address Register Address sdmmc 0xFF704000 0xFF704038 Offset: 0x38 Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 response2 RO 0x0 15 14 13 12 11 10 9 8 7 6...";
fil["1077"]= "reg_default_component/register_sdmmc_resp3.html@@@resp3@@@Module Instance Base Address Register Address sdmmc 0xFF704000 0xFF70403C Offset: 0x3C Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 response3 RO 0x0 15 14 13 12 11 10 9 8 7 6...";
fil["1078"]= "reg_default_component/register_sdmmc_rintsts.html@@@rintsts@@@Interrupt Status Before Masking...";
fil["1079"]= "reg_default_component/register_sdmmc_rst_n.html@@@rst_n@@@Module Instance Base Address Register Address sdmmc 0xFF704000 0xFF704078 Offset: 0x78 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14 13 12 11 10 9 8 7 6 5 4 3 2...";
fil["1080"]= "reg_default_component/register_sdmmc_status.html@@@status@@@Reports various operting status conditions...";
fil["1081"]= "reg_default_component/register_sdmmc_tbbcnt.html@@@tbbcnt@@@Tracks number of bytes transferred between Host and FIFO...";
fil["1082"]= "reg_default_component/register_sdmmc_tcbcnt.html@@@tcbcnt@@@Module Instance Base Address Register Address sdmmc 0xFF704000 0xFF70405C Offset: 0x5C Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 trans_card_byte_count RO 0x0 15 14 13 12 11...";
fil["1083"]= "reg_default_component/register_sdmmc_tmout.html@@@tmout@@@Sets timeout values...";
fil["1084"]= "reg_default_component/register_sdmmc_uhs_reg.html@@@uhs_reg@@@UHS-1 Register...";
fil["1085"]= "reg_default_component/register_sdmmc_usrid.html@@@usrid@@@Module Instance Base Address Register Address sdmmc 0xFF704000 0xFF704068 Offset: 0x68 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 usr_id RW 0x7967797 15 14 13 12 11 10 9 8 7...";
fil["1086"]= "reg_default_component/register_sdmmc_verid.html@@@verid@@@Module Instance Base Address Register Address sdmmc 0xFF704000 0xFF70406C Offset: 0x6C Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 ver_id RO 0x5342240A 15 14 13 12 11 10 9 8...";
fil["1087"]= "reg_default_component/register_sdmmc_wrtprt.html@@@wrtprt@@@See Field Description...";
fil["1088"]= "reg_default_component/register_sdr_sdr_ctrlgrp_ctrlcfg.html@@@ctrlcfg@@@The Controller Configuration Register determines the behavior of the controller...";
fil["1089"]= "reg_default_component/register_sdr_sdr_ctrlgrp_ctrlwidth.html@@@ctrlwidth@@@This register controls the width of the physical DRAM interface...";
fil["1090"]= "reg_default_component/register_sdr_sdr_ctrlgrp_dbecount.html@@@dbecount@@@This register tracks the double-bit error count...";
fil["1091"]= "reg_default_component/register_sdr_sdr_ctrlgrp_dramaddrw.html@@@dramaddrw@@@This register configures the width of the various address fields of the DRAM. The values specified in this register must match the memory devices being used...";
fil["1092"]= "reg_default_component/register_sdr_sdr_ctrlgrp_dramifwidth.html@@@dramifwidth@@@This register controls the interface width of the SDRAM controller...";
fil["1093"]= "reg_default_component/register_sdr_sdr_ctrlgrp_dramintr.html@@@dramintr@@@This register can enable, disable and clear the SDRAM error interrupts...";
fil["1094"]= "reg_default_component/register_sdr_sdr_ctrlgrp_dramodt.html@@@dramodt@@@This register controls which ODT pin asserts with chip select 0 (CS0) assertion and which ODT pin asserts with chip select 1 (CS1) assertion...";
fil["1095"]= "reg_default_component/register_sdr_sdr_ctrlgrp_dramsts.html@@@dramsts@@@This register provides the status of the calibration and ECC logic...";
fil["1096"]= "reg_default_component/register_sdr_sdr_ctrlgrp_dramtiming1.html@@@dramtiming1@@@This register implements JEDEC standardized timing parameters. It should be programmed in clock cycles, for the value specified by the memory vendor...";
fil["1097"]= "reg_default_component/register_sdr_sdr_ctrlgrp_dramtiming2.html@@@dramtiming2@@@This register implements JEDEC standardized timing parameters. It should be programmed in clock cycles, for the value specified by the memory vendor...";
fil["1098"]= "reg_default_component/register_sdr_sdr_ctrlgrp_dramtiming3.html@@@dramtiming3@@@This register implements JEDEC standardized timing parameters. It should be programmed in clock cycles, for the value specified by the memory vendor...";
fil["1099"]= "reg_default_component/register_sdr_sdr_ctrlgrp_dramtiming4.html@@@dramtiming4@@@This register implements JEDEC standardized timing parameters. It should be programmed in clock cycles, for the value specified by the memory vendor...";
fil["1100"]= "reg_default_component/register_sdr_sdr_ctrlgrp_dropaddr.html@@@dropaddr@@@This register holds the last dropped address...";
fil["1101"]= "reg_default_component/register_sdr_sdr_ctrlgrp_dropcount.html@@@dropcount@@@This register holds the address of the most recent ECC error...";
fil["1102"]= "reg_default_component/register_sdr_sdr_ctrlgrp_erraddr.html@@@erraddr@@@This register holds the address of the most recent ECC error...";
fil["1103"]= "reg_default_component/register_sdr_sdr_ctrlgrp_fpgaportrst.html@@@fpgaportrst@@@This register implements functionality to allow the CPU to control when the MPFE will enable the ports to the FPGA fabric...";
fil["1104"]= "reg_default_component/register_sdr_sdr_ctrlgrp_lowpwrack.html@@@lowpwrack@@@This register gives the status of the power down commands requested by the Low Power Control register...";
fil["1105"]= "reg_default_component/register_sdr_sdr_ctrlgrp_lowpwreq.html@@@lowpwreq@@@This register instructs the controller to put the DRAM into a power down state. Note that some commands are only valid for certain memory types...";
fil["1106"]= "reg_default_component/register_sdr_sdr_ctrlgrp_lowpwrtiming.html@@@lowpwrtiming@@@This register controls the behavior of the low power logic in the controller...";
fil["1107"]= "reg_default_component/register_sdr_sdr_ctrlgrp_mppriority.html@@@mppriority@@@This register is used to configure the DRAM burst operation scheduling...";
fil["1108"]= "reg_default_component/register_sdr_sdr_ctrlgrp_portcfg.html@@@portcfg@@@Each bit of the autopchen field maps to one of the control ports. If a port executes mostly sequential memory accesses, the corresponding autopchen bit should be 0. If the port has highly random accesses, then its autopchen bit should be set to 1...";
fil["1109"]= "reg_default_component/register_sdr_sdr_ctrlgrp_protportdefault.html@@@protportdefault@@@This register controls the default protection assignment for a port. Ports which have explicit rules which define regions which are illegal to access should set the bits to pass by default. Ports which have explicit rules which define legal areas should set the bit to force all transactions to fail. Leaving this register to all zeros should be used for systems which do not desire any protection from the memory controller...";
fil["1110"]= "reg_default_component/register_sdr_sdr_ctrlgrp_protruleaddr.html@@@protruleaddr@@@This register is used to control the memory protection for port 0 transactions. Address ranges can either be used to allow access to memory regions or disallow access to memory regions. If is being used, access can be enabled for protected transactions or disabled for unprotected transactions. The default state of this register is to allow all access. Address values used for protection are only physical addresses...";
fil["1111"]= "reg_default_component/register_sdr_sdr_ctrlgrp_protruledata.html@@@protruledata@@@This register configures the protection memory characteristics of each protection rule...";
fil["1112"]= "reg_default_component/register_sdr_sdr_ctrlgrp_protruleid.html@@@protruleid@@@This register configures the AxID for a given protection rule...";
fil["1113"]= "reg_default_component/register_sdr_sdr_ctrlgrp_protrulerdwr.html@@@protrulerdwr@@@This register is used to perform read and write operations to the internal protection table...";
fil["1114"]= "reg_default_component/register_sdr_sdr_ctrlgrp_remappriority.html@@@remappriority@@@This register applies another level of port priority after a transaction is placed in the single port queue...";
fil["1115"]= "reg_default_component/register_sdr_sdr_ctrlgrp_sbecount.html@@@sbecount@@@This register tracks the single-bit error count...";
fil["1116"]= "reg_default_component/register_sdr_sdr_ctrlgrp_sdr_ctrlgrp_mpweight_mpweight_0_4.html@@@mpweight_0_4@@@This register is used to configure the DRAM burst operation scheduling...";
fil["1117"]= "reg_default_component/register_sdr_sdr_ctrlgrp_sdr_ctrlgrp_mpweight_mpweight_1_4.html@@@mpweight_1_4@@@This register is used to configure the DRAM burst operation scheduling...";
fil["1118"]= "reg_default_component/register_sdr_sdr_ctrlgrp_sdr_ctrlgrp_mpweight_mpweight_2_4.html@@@mpweight_2_4@@@This register is used to configure the DRAM burst operation scheduling...";
fil["1119"]= "reg_default_component/register_sdr_sdr_ctrlgrp_sdr_ctrlgrp_mpweight_mpweight_3_4.html@@@mpweight_3_4@@@This register is used to configure the DRAM burst operation scheduling...";
fil["1120"]= "reg_default_component/register_sdr_sdr_ctrlgrp_staticcfg.html@@@staticcfg@@@This register controls configuration values which cannot be updated during active transfers. First configure the membl and eccn fields and then re-write these fields while setting the applycfg bit. The applycfg bit is write only...";
fil["1121"]= "reg_default_component/register_spim_baudr.html@@@baudr@@@This register derives the frequency of the serial clock that regulates the data transfer. The 16-bit field in this register defines the spi_m_clk divider value. It is impossible to write to this register when the SPI Master is enabled. The SPI Master is enabled and disabled by writing to the SPIENR register...";
fil["1122"]= "reg_default_component/register_spim_ctrlr0.html@@@ctrlr0@@@This register controls the serial data transfer. It is impossible to write to this register when the SPI Master is enabled. The SPI Master is enabled and disabled by writing to the SPIENR register...";
fil["1123"]= "reg_default_component/register_spim_ctrlr1.html@@@ctrlr1@@@Control register 1 controls the end of serial transfers when in receive-only mode. It is impossible to write to this register when the SPI Master is enabled.The SPI Master is enabled and disabled by writing to the SPIENR register...";
fil["1124"]= "reg_default_component/register_spim_dmacr.html@@@dmacr@@@This register is used to enable the DMA Controller interface operation...";
fil["1125"]= "reg_default_component/register_spim_dmardlr.html@@@dmardlr@@@Controls the FIFO Level for a DMA receeive request...";
fil["1126"]= "reg_default_component/register_spim_dmatdlr.html@@@dmatdlr@@@Controls the FIFO Level for a DMA transmit request...";
fil["1127"]= "reg_default_component/register_spim_dr.html@@@dr@@@This register is a 16-bit read/write buffer for the transmit/receive FIFOs. When the register is read, data in the receive FIFO buffer is accessed. When it is written to, data are moved into the transmit FIFO buffer; a write can occur only when SPI_EN = 1. FIFOs are reset when SPI_EN = 0. The data register occupies 36 32-bit locations in the address map (0x60 to 0xec). These are all aliases for the same data register. This is done to support burst accesses...";
fil["1128"]= "reg_default_component/register_spim_icr.html@@@icr@@@Clear Interrupt...";
fil["1129"]= "reg_default_component/register_spim_idr.html@@@idr@@@This register contains the peripherals identification code, which is 0x0551...";
fil["1130"]= "reg_default_component/register_spim_imr.html@@@imr@@@This register masks or enables all interrupts generated by the SPI Master...";
fil["1131"]= "reg_default_component/register_spim_isr.html@@@isr@@@This register reports the status of the SPI Master interrupts after they have been masked...";
fil["1132"]= "reg_default_component/register_spim_mwcr.html@@@mwcr@@@This register controls the direction of the data word for the half-duplex Microwire serial protocol. It is impossible to write to this register when the SPI Master is enabled. The SPI Master is enabled and disabled by writing to the SPIENR register...";
fil["1133"]= "reg_default_component/register_spim_risr.html@@@risr@@@This register reports the status of the SPI Master interrupts prior to masking...";
fil["1134"]= "reg_default_component/register_spim_rx_sample_dly.html@@@rx_sample_dly@@@This register controls the number of spi_m_clk cycles that are delayed (from the default sample time) before the actual sample of the rxd input occurs. It is impossible to write to this register when the SPI Master is enabled. The SPI Master is enabled and disabled by writing to the SPIENR register...";
fil["1135"]= "reg_default_component/register_spim_rxflr.html@@@rxflr@@@This register contains the number of valid data entries in the receive FIFO memory. This register can be read at any time. Ranges from 0 to 256...";
fil["1136"]= "reg_default_component/register_spim_rxftlr.html@@@rxftlr@@@This register controls the threshold value for the receive FIFO memory. It is impossible to write to this register when the SPI Master is enabled. The SPI Master is enabled and disabled by writing to the SPIENR register...";
fil["1137"]= "reg_default_component/register_spim_rxoicr.html@@@rxoicr@@@Receive FIFO Overflow Interrupt Clear Register...";
fil["1138"]= "reg_default_component/register_spim_rxuicr.html@@@rxuicr@@@Receive FIFO Underflow Interrupt Clear Register...";
fil["1139"]= "reg_default_component/register_spim_ser.html@@@ser@@@The register enables the individual slave select output lines from the SPI Master. Up to 4 slave-select output pins are available on the SPI Master. You cannot write to this register when SPI Master is busy and when SPI_EN = 1...";
fil["1140"]= "reg_default_component/register_spim_spi_version_id.html@@@spi_version_id@@@Version ID Register value...";
fil["1141"]= "reg_default_component/register_spim_spienr.html@@@spienr@@@Enables and Disables all SPI operations...";
fil["1142"]= "reg_default_component/register_spim_sr.html@@@sr@@@This register is used to indicate the current transfer status, FIFO status, and any transmission/reception errors that may have occurred. The status register may be read at any time. None of the bits in this register request an interrupt...";
fil["1143"]= "reg_default_component/register_spim_txflr.html@@@txflr@@@This register contains the number of valid data entries in the transmit FIFO memory. Ranges from 0 to 256...";
fil["1144"]= "reg_default_component/register_spim_txftlr.html@@@txftlr@@@This register controls the threshold value for the transmit FIFO memory. It is impossible to write to this register when the SPI Master is enabled. The SPI Master is enabled and disabled by writing to the SPIENR register...";
fil["1145"]= "reg_default_component/register_spim_txoicr.html@@@txoicr@@@Transmit FIFO Overflow Interrupt Clear Register...";
fil["1146"]= "reg_default_component/register_spis_ctrlr0.html@@@ctrlr0@@@This register controls the serial data transfer. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register...";
fil["1147"]= "reg_default_component/register_spis_dmacr.html@@@dmacr@@@The register is used to enable the DMA Controller interface operation...";
fil["1148"]= "reg_default_component/register_spis_dmardlr.html@@@dmardlr@@@Controls DMA Receive FIFO Threshold...";
fil["1149"]= "reg_default_component/register_spis_dmatdlr.html@@@dmatdlr@@@Controls DMA Transmit FIFO Threshold...";
fil["1150"]= "reg_default_component/register_spis_dr.html@@@dr@@@The data register is a 16-bit read/write buffer for the transmit/receive FIFOs. When the register is read, data in the receive FIFO buffer is accessed. When it is written to, data are moved into the transmit FIFO buffer; a write can occur only when SPI_EN = 1. FIFOs are reset when SPI_EN...";
fil["1151"]= "reg_default_component/register_spis_icr.html@@@icr@@@Module Instance Base Address Register Address spis0 0xFFE02000 0xFFE02048 spis1 0xFFE03000 0xFFE03048 Offset: 0x48 Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14...";
fil["1152"]= "reg_default_component/register_spis_idr.html@@@idr@@@This register stores a peripheral identification code...";
fil["1153"]= "reg_default_component/register_spis_imr.html@@@imr@@@This register masks or enables all interrupts generated by the SPI Slave...";
fil["1154"]= "reg_default_component/register_spis_isr.html@@@isr@@@This register reports the status of the SPI Slave interrupts after they have been masked...";
fil["1155"]= "reg_default_component/register_spis_mwcr.html@@@mwcr@@@This register controls the direction of the data word for the half-duplex Microwire serial protocol. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register...";
fil["1156"]= "reg_default_component/register_spis_risr.html@@@risr@@@This register reports the status of the SPI Slave interrupts prior to masking...";
fil["1157"]= "reg_default_component/register_spis_rxflr.html@@@rxflr@@@This register contains the number of valid data entriesin the receive FIFO memory. This register can be read at any time. Ranges from 0 to 256...";
fil["1158"]= "reg_default_component/register_spis_rxftlr.html@@@rxftlr@@@This register controls the threshold value for the receive FIFO memory. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register...";
fil["1159"]= "reg_default_component/register_spis_rxoicr.html@@@rxoicr@@@Module Instance Base Address Register Address spis0 0xFFE02000 0xFFE0203C spis1 0xFFE03000 0xFFE0303C Offset: 0x3C Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14...";
fil["1160"]= "reg_default_component/register_spis_rxuicr.html@@@rxuicr@@@Module Instance Base Address Register Address spis0 0xFFE02000 0xFFE02040 spis1 0xFFE03000 0xFFE03040 Offset: 0x40 Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14...";
fil["1161"]= "reg_default_component/register_spis_spi_version_id.html@@@spi_version_id@@@This read-only register stores the specific SPI Slave component version...";
fil["1162"]= "reg_default_component/register_spis_spienr.html@@@spienr@@@Enables and disables all SPI operations...";
fil["1163"]= "reg_default_component/register_spis_sr.html@@@sr@@@Reports FIFO transfer status, and any transmission/reception errors that may have occurred. The status register may be read at any time. None of the bits in this register request an interrupt...";
fil["1164"]= "reg_default_component/register_spis_txflr.html@@@txflr@@@This register contains the number of valid data entries in the transmit FIFO memory. Ranges from 0 to 256...";
fil["1165"]= "reg_default_component/register_spis_txftlr.html@@@txftlr@@@This register controls the threshold value for the transmit FIFO memory. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register...";
fil["1166"]= "reg_default_component/register_spis_txoicr.html@@@txoicr@@@Module Instance Base Address Register Address spis0 0xFFE02000 0xFFE02038 spis1 0xFFE03000 0xFFE03038 Offset: 0x38 Access: RO Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved 15 14...";
fil["1167"]= "reg_default_component/register_sysmgr_bootinfo.html@@@bootinfo@@@Provides access to boot configuration information...";
fil["1168"]= "reg_default_component/register_sysmgr_hpsinfo.html@@@hpsinfo@@@Provides information about the HPS capabilities...";
fil["1169"]= "reg_default_component/register_sysmgr_parityinj.html@@@parityinj@@@Inject parity failures into the parity-protected RAMs in the MPU. Allows software to test the parity failure interrupt handler. The field array index corresponds to the CPU index. All fields are reset by a cold or warm reset...";
fil["1170"]= "reg_default_component/register_sysmgr_siliconid1.html@@@siliconid1@@@Specifies Silicon ID and revision number...";
fil["1171"]= "reg_default_component/register_sysmgr_siliconid2.html@@@siliconid2@@@Reserved for future use...";
fil["1172"]= "reg_default_component/register_sysmgr_sysmgr_dmagrp_ctrl.html@@@ctrl@@@Registers used by the DMA Controller. All fields are reset by a cold or warm reset. These register bits should be updated during system initialization prior to removing the DMA controller from reset. They may not be changed dynamically during DMA operation...";
fil["1173"]= "reg_default_component/register_sysmgr_sysmgr_dmagrp_persecurity.html@@@persecurity@@@Controls the security state of a peripheral request interface. Sampled by the DMA controller when it exits from reset. These register bits should be updated during system initialization prior to removing the DMA controller from reset. They may not be changed dynamically during DMA operation...";
fil["1174"]= "reg_default_component/register_sysmgr_sysmgr_eccgrp_can0.html@@@can0@@@This register is used to enable ECC on the CAN0 RAM. ECC errors can be injected into the write path using bits in this register. This register contains interrupt status of the ECC single/double bit error. Only reset by a cold reset (ignores warm reset...";
fil["1175"]= "reg_default_component/register_sysmgr_sysmgr_eccgrp_can1.html@@@can1@@@This register is used to enable ECC on the CAN1 RAM. ECC errors can be injected into the write path using bits in this register. This register contains interrupt status of the ECC single/double bit error. Only reset by a cold reset (ignores warm reset...";
fil["1176"]= "reg_default_component/register_sysmgr_sysmgr_eccgrp_dma.html@@@dma@@@This register is used to enable ECC on the DMA RAM. ECC errors can be injected into the write path using bits in this register. This register contains interrupt status of the ECC single/double bit error. Only reset by a cold reset (ignores warm reset...";
fil["1177"]= "reg_default_component/register_sysmgr_sysmgr_eccgrp_emac0.html@@@emac0@@@This register is used to enable ECC on the EMAC0 RAM. ECC errors can be injected into the write path using bits in this register. This register contains interrupt status of the ECC single/double bit error. Only reset by a cold reset (ignores warm reset...";
fil["1178"]= "reg_default_component/register_sysmgr_sysmgr_eccgrp_emac1.html@@@emac1@@@This register is used to enable ECC on the EMAC1 RAM. ECC errors can be injected into the write path using bits in this register. This register contains interrupt status of the ECC single/double bit error. Only reset by a cold reset (ignores warm reset...";
fil["1179"]= "reg_default_component/register_sysmgr_sysmgr_eccgrp_l2.html@@@l2@@@This register is used to enable ECC on the L2 Data RAM. ECC errors can be injected into the write path using bits in this register. This register contains interrupt status of the ECC single/double bit error. Only reset by a cold reset (ignores warm reset...";
fil["1180"]= "reg_default_component/register_sysmgr_sysmgr_eccgrp_nand.html@@@nand@@@This register is used to enable ECC on the NAND RAM. ECC errors can be injected into the write path using bits in this register. This register contains interrupt status of the ECC single/double bit error. Only reset by a cold reset (ignores warm reset...";
fil["1181"]= "reg_default_component/register_sysmgr_sysmgr_eccgrp_ocram.html@@@ocram@@@This register is used to enable ECC on the On-chip RAM. ECC errors can be injected into the write path using bits in this register. This register contains interrupt status of the ECC single/double bit error. Only reset by a cold reset (ignores warm reset...";
fil["1182"]= "reg_default_component/register_sysmgr_sysmgr_eccgrp_qspi.html@@@qspi@@@This register is used to enable ECC on the QSPI RAM. ECC errors can be injected into the write path using bits in this register. This register contains interrupt status of the ECC single/double bit error. Only reset by a cold reset (ignores warm reset...";
fil["1183"]= "reg_default_component/register_sysmgr_sysmgr_eccgrp_sdmmc.html@@@sdmmc@@@This register is used to enable ECC on the SDMMC RAM.ECC errors can be injected into the write path using bits in this register. Only reset by a cold reset (ignores warm reset...";
fil["1184"]= "reg_default_component/register_sysmgr_sysmgr_eccgrp_usb0.html@@@usb0@@@This register is used to enable ECC on the USB0 RAM. ECC errors can be injected into the write path using bits in this register. This register contains interrupt status of the ECC single/double bit error. Only reset by a cold reset (ignores warm reset...";
fil["1185"]= "reg_default_component/register_sysmgr_sysmgr_eccgrp_usb1.html@@@usb1@@@This register is used to enable ECC on the USB1 RAM. ECC errors can be injected into the write path using bits in this register. This register contains interrupt status of the ECC single/double bit error. Only reset by a cold reset (ignores warm reset...";
fil["1186"]= "reg_default_component/register_sysmgr_sysmgr_emacgrp_ctrl.html@@@ctrl@@@Registers used by the EMACs. All fields are reset by a cold or warm reset...";
fil["1187"]= "reg_default_component/register_sysmgr_sysmgr_emacgrp_l3master.html@@@l3master@@@Controls the L3 master ARCACHE and AWCACHE AXI signals. These register bits should be updated only during system initialization prior to removing the peripheral from reset. They may not be changed dynamically during peripheral operation All fields are reset by a cold or warm reset...";
fil["1188"]= "reg_default_component/register_sysmgr_sysmgr_fpgaintfgrp_gbl.html@@@gbl@@@Used to disable all interfaces between the FPGA and HPS...";
fil["1189"]= "reg_default_component/register_sysmgr_sysmgr_fpgaintfgrp_indiv.html@@@indiv@@@Used to disable individual interfaces between the FPGA and HPS...";
fil["1190"]= "reg_default_component/register_sysmgr_sysmgr_fpgaintfgrp_module.html@@@module@@@Used to disable signals from the FPGA fabric to individual HPS modules...";
fil["1191"]= "reg_default_component/register_sysmgr_sysmgr_frzctrl_hioctrl.html@@@hioctrl@@@Used to drive freeze signals to HPS HIO bank (DDR SDRAM). All fields are only reset by a cold reset (ignore warm reset). The following equation determines when the weak pullup resistor is enabled: enabled = ~wkpullup | (CFF & cfg & tristate) where CFF is the value of weak pullup as set by IO configuration...";
fil["1192"]= "reg_default_component/register_sysmgr_sysmgr_frzctrl_hwctrl.html@@@hwctrl@@@Activate freeze or thaw operations on VIO channel 1 (HPS IO bank 2 and bank 3) and monitor for completeness and the current state. These fields interact with the hardware state machine in the Freeze Controller. These fields can be accessed independent of the value of SRC1.VIO1 although they only have an effect on the VIO channel 1 freeze signals when SRC1.VIO1 is setup to have the hardware state machine be the freeze signal source. All fields are only reset by a cold reset (ignore warm reset...";
fil["1193"]= "reg_default_component/register_sysmgr_sysmgr_frzctrl_src.html@@@src@@@Contains register field to choose between software state machine (vioctrl array index [1] register) or hardware state machine in the Freeze Controller as the freeze signal source for VIO channel 1. All fields are only reset by a cold reset (ignore warm reset...";
fil["1194"]= "reg_default_component/register_sysmgr_sysmgr_frzctrl_vioctrl.html@@@vioctrl@@@Used to drive freeze signals to HPS VIO banks. The register array index corresponds to the freeze channel. Freeze channel 0 provides freeze signals to VIO bank 0 and 1. Freeze channel 1 provides freeze signals to VIO bank 2 and 3. Only drives freeze signals when SRC.VIO1 is set to SW. Freeze channel 2 provides freeze signals to VIO bank 4. All fields are only reset by a cold reset (ignore warm reset). The following equation determines when the weak pullup resistor is enabled: enabled = ~wkpullup | (CFF & cfg & tristate) where CFF is the value of weak pullup as set by IO configuration...";
fil["1195"]= "reg_default_component/register_sysmgr_sysmgr_iswgrp_handoff.html@@@handoff@@@These registers are used to store handoff infomation between the preloader and the OS. These 8 registers can be used to store any information. The contents of these registers have no impact on the state of the HPS hardware...";
fil["1196"]= "reg_default_component/register_sysmgr_sysmgr_nandgrp_bootstrap.html@@@bootstrap@@@Bootstrap fields sampled by NAND Flash Controller when released from reset. All fields are reset by a cold or warm reset...";
fil["1197"]= "reg_default_component/register_sysmgr_sysmgr_nandgrp_l3master.html@@@l3master@@@Controls the L3 master ARCACHE and AWCACHE AXI signals. These register bits should be updated only during system initialization prior to removing the peripheral from reset. They may not be changed dynamically during peripheral operation All fields are reset by a cold or warm reset...";
fil["1198"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO0.html@@@EMACIO0@@@This register is used to control the peripherals connected to emac0_tx_clk Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1199"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO1.html@@@EMACIO1@@@This register is used to control the peripherals connected to emac0_tx_d0 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1200"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO10.html@@@EMACIO10@@@This register is used to control the peripherals connected to emac0_rx_clk Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1201"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO11.html@@@EMACIO11@@@This register is used to control the peripherals connected to emac0_rx_d1 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1202"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO12.html@@@EMACIO12@@@This register is used to control the peripherals connected to emac0_rx_d2 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1203"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO13.html@@@EMACIO13@@@This register is used to control the peripherals connected to emac0_rx_d3 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1204"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO14.html@@@EMACIO14@@@This register is used to control the peripherals connected to emac1_tx_clk Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1205"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO15.html@@@EMACIO15@@@This register is used to control the peripherals connected to emac1_tx_d0 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1206"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO16.html@@@EMACIO16@@@This register is used to control the peripherals connected to emac1_tx_d1 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1207"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO17.html@@@EMACIO17@@@This register is used to control the peripherals connected to emac1_tx_ctl Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1208"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO18.html@@@EMACIO18@@@This register is used to control the peripherals connected to emac1_rx_d0 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1209"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO19.html@@@EMACIO19@@@This register is used to control the peripherals connected to emac1_rx_d1 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1210"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO2.html@@@EMACIO2@@@This register is used to control the peripherals connected to emac0_tx_d1 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1211"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO3.html@@@EMACIO3@@@This register is used to control the peripherals connected to emac0_tx_d2 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1212"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO4.html@@@EMACIO4@@@This register is used to control the peripherals connected to emac0_tx_d3 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1213"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO5.html@@@EMACIO5@@@This register is used to control the peripherals connected to emac0_rx_d0 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1214"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO6.html@@@EMACIO6@@@This register is used to control the peripherals connected to emac0_mdio Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1215"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO7.html@@@EMACIO7@@@This register is used to control the peripherals connected to emac0_mdc Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1216"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO8.html@@@EMACIO8@@@This register is used to control the peripherals connected to emac0_rx_ctl Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1217"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_EMACIO9.html@@@EMACIO9@@@This register is used to control the peripherals connected to emac0_tx_ctl Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1218"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_FLASHIO0.html@@@FLASHIO0@@@This register is used to control the peripherals connected to sdmmc_cmd Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1219"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_FLASHIO1.html@@@FLASHIO1@@@This register is used to control the peripherals connected to sdmmc_pwren Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1220"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_FLASHIO10.html@@@FLASHIO10@@@This register is used to control the peripherals connected to sdmmc_d2 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1221"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_FLASHIO11.html@@@FLASHIO11@@@This register is used to control the peripherals connected to sdmmc_d3 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1222"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_FLASHIO2.html@@@FLASHIO2@@@This register is used to control the peripherals connected to sdmmc_d0 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1223"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_FLASHIO3.html@@@FLASHIO3@@@This register is used to control the peripherals connected to sdmmc_d1 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1224"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_FLASHIO4.html@@@FLASHIO4@@@This register is used to control the peripherals connected to sdmmc_d4 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1225"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_FLASHIO5.html@@@FLASHIO5@@@This register is used to control the peripherals connected to sdmmc_d5 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1226"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_FLASHIO6.html@@@FLASHIO6@@@This register is used to control the peripherals connected to sdmmc_d6 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1227"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_FLASHIO7.html@@@FLASHIO7@@@This register is used to control the peripherals connected to sdmmc_d7 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1228"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_FLASHIO8.html@@@FLASHIO8@@@This register is used to control the peripherals connected to sdmmc_clk_in Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1229"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_FLASHIO9.html@@@FLASHIO9@@@This register is used to control the peripherals connected to sdmmc_clk Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1230"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO0.html@@@GENERALIO0@@@This register is used to control the peripherals connected to trace_clk Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1231"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO1.html@@@GENERALIO1@@@This register is used to control the peripherals connected to trace_d0 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1232"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO10.html@@@GENERALIO10@@@This register is used to control the peripherals connected to spim0_mosi Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1233"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO11.html@@@GENERALIO11@@@This register is used to control the peripherals connected to spim0_miso Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1234"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO12.html@@@GENERALIO12@@@This register is used to control the peripherals connected to spim0_ss0 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1235"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO13.html@@@GENERALIO13@@@This register is used to control the peripherals connected to uart0_rx Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1236"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO14.html@@@GENERALIO14@@@This register is used to control the peripherals connected to uart0_tx Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1237"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO15.html@@@GENERALIO15@@@This register is used to control the peripherals connected to i2c0_sda Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1238"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO16.html@@@GENERALIO16@@@This register is used to control the peripherals connected to i2c0_scl Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1239"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO17.html@@@GENERALIO17@@@This register is used to control the peripherals connected to can0_rx Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1240"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO18.html@@@GENERALIO18@@@This register is used to control the peripherals connected to can0_tx Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1241"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO19.html@@@GENERALIO19@@@This register is used to control the peripherals connected to spis1_clk Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1242"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO2.html@@@GENERALIO2@@@This register is used to control the peripherals connected to trace_d1 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1243"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO20.html@@@GENERALIO20@@@This register is used to control the peripherals connected to spis1_mosi Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1244"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO21.html@@@GENERALIO21@@@This register is used to control the peripherals connected to spis1_miso Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1245"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO22.html@@@GENERALIO22@@@This register is used to control the peripherals connected to spis1_ss0 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1246"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO23.html@@@GENERALIO23@@@This register is used to control the peripherals connected to uart1_rx Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1247"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO24.html@@@GENERALIO24@@@This register is used to control the peripherals connected to uart1_tx Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1248"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO25.html@@@GENERALIO25@@@This register is used to control the peripherals connected to i2c1_sda Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1249"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO26.html@@@GENERALIO26@@@This register is used to control the peripherals connected to i2c1_scl Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1250"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO27.html@@@GENERALIO27@@@This register is used to control the peripherals connected to spim0_ss0_alt Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1251"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO28.html@@@GENERALIO28@@@This register is used to control the peripherals connected to spis0_clk Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1252"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO29.html@@@GENERALIO29@@@This register is used to control the peripherals connected to spis0_mosi Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1253"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO3.html@@@GENERALIO3@@@This register is used to control the peripherals connected to trace_d2 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1254"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO30.html@@@GENERALIO30@@@This register is used to control the peripherals connected to spis0_miso Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1255"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO31.html@@@GENERALIO31@@@This register is used to control the peripherals connected to spis0_ss0 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1256"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO4.html@@@GENERALIO4@@@This register is used to control the peripherals connected to trace_d3 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1257"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO5.html@@@GENERALIO5@@@This register is used to control the peripherals connected to trace_d4 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1258"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO6.html@@@GENERALIO6@@@This register is used to control the peripherals connected to trace_d5 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1259"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO7.html@@@GENERALIO7@@@This register is used to control the peripherals connected to trace_d6 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1260"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO8.html@@@GENERALIO8@@@This register is used to control the peripherals connected to trace_d7 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1261"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GENERALIO9.html@@@GENERALIO9@@@This register is used to control the peripherals connected to spim0_clk Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1262"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX48.html@@@GPLINMUX48@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 48. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1263"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX49.html@@@GPLINMUX49@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 49. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1264"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX50.html@@@GPLINMUX50@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 50. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1265"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX51.html@@@GPLINMUX51@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 51. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1266"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX52.html@@@GPLINMUX52@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 52. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1267"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX53.html@@@GPLINMUX53@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 53. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1268"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX54.html@@@GPLINMUX54@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 54. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1269"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX55.html@@@GPLINMUX55@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 55. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1270"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX56.html@@@GPLINMUX56@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 56. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1271"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX57.html@@@GPLINMUX57@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 57. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1272"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX58.html@@@GPLINMUX58@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 58. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1273"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX59.html@@@GPLINMUX59@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 59. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1274"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX60.html@@@GPLINMUX60@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 60. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1275"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX61.html@@@GPLINMUX61@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 61. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1276"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX62.html@@@GPLINMUX62@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 62. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1277"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX63.html@@@GPLINMUX63@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 63. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1278"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX64.html@@@GPLINMUX64@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 64. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1279"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX65.html@@@GPLINMUX65@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 65. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1280"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX66.html@@@GPLINMUX66@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 66. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1281"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX67.html@@@GPLINMUX67@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 67. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1282"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX68.html@@@GPLINMUX68@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 68. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1283"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX69.html@@@GPLINMUX69@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 69. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1284"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLINMUX70.html@@@GPLINMUX70@@@Some GPIO/LoanIO inputs can be driven by multiple pins. This register selects the input signal for GPIO/LoanIO 70. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1285"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX0.html@@@GPLMUX0@@@Selection between GPIO and LoanIO output and output enable for GPIO0 and LoanIO0. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1286"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX1.html@@@GPLMUX1@@@Selection between GPIO and LoanIO output and output enable for GPIO1 and LoanIO1. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1287"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX10.html@@@GPLMUX10@@@Selection between GPIO and LoanIO output and output enable for GPIO10 and LoanIO10. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1288"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX11.html@@@GPLMUX11@@@Selection between GPIO and LoanIO output and output enable for GPIO11 and LoanIO11. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1289"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX12.html@@@GPLMUX12@@@Selection between GPIO and LoanIO output and output enable for GPIO12 and LoanIO12. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1290"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX13.html@@@GPLMUX13@@@Selection between GPIO and LoanIO output and output enable for GPIO13 and LoanIO13. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1291"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX14.html@@@GPLMUX14@@@Selection between GPIO and LoanIO output and output enable for GPIO14 and LoanIO14. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1292"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX15.html@@@GPLMUX15@@@Selection between GPIO and LoanIO output and output enable for GPIO15 and LoanIO15. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1293"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX16.html@@@GPLMUX16@@@Selection between GPIO and LoanIO output and output enable for GPIO16 and LoanIO16. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1294"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX17.html@@@GPLMUX17@@@Selection between GPIO and LoanIO output and output enable for GPIO17 and LoanIO17. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1295"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX18.html@@@GPLMUX18@@@Selection between GPIO and LoanIO output and output enable for GPIO18 and LoanIO18. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1296"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX19.html@@@GPLMUX19@@@Selection between GPIO and LoanIO output and output enable for GPIO19 and LoanIO19. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1297"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX2.html@@@GPLMUX2@@@Selection between GPIO and LoanIO output and output enable for GPIO2 and LoanIO2. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1298"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX20.html@@@GPLMUX20@@@Selection between GPIO and LoanIO output and output enable for GPIO20 and LoanIO20. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1299"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX21.html@@@GPLMUX21@@@Selection between GPIO and LoanIO output and output enable for GPIO21 and LoanIO21. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1300"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX22.html@@@GPLMUX22@@@Selection between GPIO and LoanIO output and output enable for GPIO22 and LoanIO22. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1301"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX23.html@@@GPLMUX23@@@Selection between GPIO and LoanIO output and output enable for GPIO23 and LoanIO23. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1302"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX24.html@@@GPLMUX24@@@Selection between GPIO and LoanIO output and output enable for GPIO24 and LoanIO24. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1303"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX25.html@@@GPLMUX25@@@Selection between GPIO and LoanIO output and output enable for GPIO25 and LoanIO25. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1304"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX26.html@@@GPLMUX26@@@Selection between GPIO and LoanIO output and output enable for GPIO26 and LoanIO26. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1305"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX27.html@@@GPLMUX27@@@Selection between GPIO and LoanIO output and output enable for GPIO27 and LoanIO27. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1306"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX28.html@@@GPLMUX28@@@Selection between GPIO and LoanIO output and output enable for GPIO28 and LoanIO28. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1307"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX29.html@@@GPLMUX29@@@Selection between GPIO and LoanIO output and output enable for GPIO29 and LoanIO29. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1308"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX3.html@@@GPLMUX3@@@Selection between GPIO and LoanIO output and output enable for GPIO3 and LoanIO3. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1309"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX30.html@@@GPLMUX30@@@Selection between GPIO and LoanIO output and output enable for GPIO30 and LoanIO30. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1310"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX31.html@@@GPLMUX31@@@Selection between GPIO and LoanIO output and output enable for GPIO31 and LoanIO31. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1311"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX32.html@@@GPLMUX32@@@Selection between GPIO and LoanIO output and output enable for GPIO32 and LoanIO32. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1312"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX33.html@@@GPLMUX33@@@Selection between GPIO and LoanIO output and output enable for GPIO33 and LoanIO33. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1313"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX34.html@@@GPLMUX34@@@Selection between GPIO and LoanIO output and output enable for GPIO34 and LoanIO34. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1314"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX35.html@@@GPLMUX35@@@Selection between GPIO and LoanIO output and output enable for GPIO35 and LoanIO35. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1315"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX36.html@@@GPLMUX36@@@Selection between GPIO and LoanIO output and output enable for GPIO36 and LoanIO36. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1316"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX37.html@@@GPLMUX37@@@Selection between GPIO and LoanIO output and output enable for GPIO37 and LoanIO37. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1317"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX38.html@@@GPLMUX38@@@Selection between GPIO and LoanIO output and output enable for GPIO38 and LoanIO38. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1318"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX39.html@@@GPLMUX39@@@Selection between GPIO and LoanIO output and output enable for GPIO39 and LoanIO39. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1319"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX4.html@@@GPLMUX4@@@Selection between GPIO and LoanIO output and output enable for GPIO4 and LoanIO4. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1320"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX40.html@@@GPLMUX40@@@Selection between GPIO and LoanIO output and output enable for GPIO40 and LoanIO40. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1321"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX41.html@@@GPLMUX41@@@Selection between GPIO and LoanIO output and output enable for GPIO41 and LoanIO41. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1322"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX42.html@@@GPLMUX42@@@Selection between GPIO and LoanIO output and output enable for GPIO42 and LoanIO42. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1323"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX43.html@@@GPLMUX43@@@Selection between GPIO and LoanIO output and output enable for GPIO43 and LoanIO43. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1324"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX44.html@@@GPLMUX44@@@Selection between GPIO and LoanIO output and output enable for GPIO44 and LoanIO44. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1325"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX45.html@@@GPLMUX45@@@Selection between GPIO and LoanIO output and output enable for GPIO45 and LoanIO45. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1326"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX46.html@@@GPLMUX46@@@Selection between GPIO and LoanIO output and output enable for GPIO46 and LoanIO46. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1327"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX47.html@@@GPLMUX47@@@Selection between GPIO and LoanIO output and output enable for GPIO47 and LoanIO47. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1328"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX48.html@@@GPLMUX48@@@Selection between GPIO and LoanIO output and output enable for GPIO48 and LoanIO48. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1329"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX49.html@@@GPLMUX49@@@Selection between GPIO and LoanIO output and output enable for GPIO49 and LoanIO49. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1330"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX5.html@@@GPLMUX5@@@Selection between GPIO and LoanIO output and output enable for GPIO5 and LoanIO5. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1331"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX50.html@@@GPLMUX50@@@Selection between GPIO and LoanIO output and output enable for GPIO50 and LoanIO50. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1332"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX51.html@@@GPLMUX51@@@Selection between GPIO and LoanIO output and output enable for GPIO51 and LoanIO51. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1333"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX52.html@@@GPLMUX52@@@Selection between GPIO and LoanIO output and output enable for GPIO52 and LoanIO52. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1334"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX53.html@@@GPLMUX53@@@Selection between GPIO and LoanIO output and output enable for GPIO53 and LoanIO53. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1335"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX54.html@@@GPLMUX54@@@Selection between GPIO and LoanIO output and output enable for GPIO54 and LoanIO54. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1336"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX55.html@@@GPLMUX55@@@Selection between GPIO and LoanIO output and output enable for GPIO55 and LoanIO55. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1337"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX56.html@@@GPLMUX56@@@Selection between GPIO and LoanIO output and output enable for GPIO56 and LoanIO56. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1338"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX57.html@@@GPLMUX57@@@Selection between GPIO and LoanIO output and output enable for GPIO57 and LoanIO57. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1339"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX58.html@@@GPLMUX58@@@Selection between GPIO and LoanIO output and output enable for GPIO58 and LoanIO58. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1340"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX59.html@@@GPLMUX59@@@Selection between GPIO and LoanIO output and output enable for GPIO59 and LoanIO59. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1341"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX6.html@@@GPLMUX6@@@Selection between GPIO and LoanIO output and output enable for GPIO6 and LoanIO6. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1342"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX60.html@@@GPLMUX60@@@Selection between GPIO and LoanIO output and output enable for GPIO60 and LoanIO60. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1343"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX61.html@@@GPLMUX61@@@Selection between GPIO and LoanIO output and output enable for GPIO61 and LoanIO61. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1344"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX62.html@@@GPLMUX62@@@Selection between GPIO and LoanIO output and output enable for GPIO62 and LoanIO62. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1345"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX63.html@@@GPLMUX63@@@Selection between GPIO and LoanIO output and output enable for GPIO63 and LoanIO63. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1346"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX64.html@@@GPLMUX64@@@Selection between GPIO and LoanIO output and output enable for GPIO64 and LoanIO64. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1347"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX65.html@@@GPLMUX65@@@Selection between GPIO and LoanIO output and output enable for GPIO65 and LoanIO65. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1348"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX66.html@@@GPLMUX66@@@Selection between GPIO and LoanIO output and output enable for GPIO66 and LoanIO66. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1349"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX67.html@@@GPLMUX67@@@Selection between GPIO and LoanIO output and output enable for GPIO67 and LoanIO67. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1350"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX68.html@@@GPLMUX68@@@Selection between GPIO and LoanIO output and output enable for GPIO68 and LoanIO68. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1351"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX69.html@@@GPLMUX69@@@Selection between GPIO and LoanIO output and output enable for GPIO69 and LoanIO69. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1352"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX7.html@@@GPLMUX7@@@Selection between GPIO and LoanIO output and output enable for GPIO7 and LoanIO7. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1353"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX70.html@@@GPLMUX70@@@Selection between GPIO and LoanIO output and output enable for GPIO70 and LoanIO70. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1354"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX8.html@@@GPLMUX8@@@Selection between GPIO and LoanIO output and output enable for GPIO8 and LoanIO8. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1355"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_GPLMUX9.html@@@GPLMUX9@@@Selection between GPIO and LoanIO output and output enable for GPIO9 and LoanIO9. These signals drive the Pin Mux. The Pin Mux must be configured to use GPIO/LoanIO in addition to these settings Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1356"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_I2C0USEFPGA.html@@@I2C0USEFPGA@@@Selection between HPS Pins and FPGA Interface for I2C0 signals. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1357"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_I2C1USEFPGA.html@@@I2C1USEFPGA@@@Selection between HPS Pins and FPGA Interface for I2C1 signals. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1358"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_I2C2USEFPGA.html@@@I2C2USEFPGA@@@Selection between HPS Pins and FPGA Interface for I2C2 signals. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1359"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_I2C3USEFPGA.html@@@I2C3USEFPGA@@@Selection between HPS Pins and FPGA Interface for I2C3 signals. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1360"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO0.html@@@MIXED1IO0@@@This register is used to control the peripherals connected to nand_ale Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1361"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO1.html@@@MIXED1IO1@@@This register is used to control the peripherals connected to nand_ce Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1362"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO10.html@@@MIXED1IO10@@@This register is used to control the peripherals connected to nand_dq5 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1363"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO11.html@@@MIXED1IO11@@@This register is used to control the peripherals connected to nand_dq6 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1364"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO12.html@@@MIXED1IO12@@@This register is used to control the peripherals connected to nand_dq7 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1365"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO13.html@@@MIXED1IO13@@@This register is used to control the peripherals connected to nand_wp Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1366"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO14.html@@@MIXED1IO14@@@This register is used to control the peripherals connected to nand_we Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1367"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO15.html@@@MIXED1IO15@@@This register is used to control the peripherals connected to qspi_io0 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1368"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO16.html@@@MIXED1IO16@@@This register is used to control the peripherals connected to qspi_io1 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1369"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO17.html@@@MIXED1IO17@@@This register is used to control the peripherals connected to qspi_io2 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1370"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO18.html@@@MIXED1IO18@@@This register is used to control the peripherals connected to qspi_io3 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1371"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO19.html@@@MIXED1IO19@@@This register is used to control the peripherals connected to qspi_ss0 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1372"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO2.html@@@MIXED1IO2@@@This register is used to control the peripherals connected to nand_cle Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1373"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO20.html@@@MIXED1IO20@@@This register is used to control the peripherals connected to qpsi_clk Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1374"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO21.html@@@MIXED1IO21@@@This register is used to control the peripherals connected to qspi_ss1 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1375"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO3.html@@@MIXED1IO3@@@This register is used to control the peripherals connected to nand_re Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1376"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO4.html@@@MIXED1IO4@@@This register is used to control the peripherals connected to nand_rb Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1377"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO5.html@@@MIXED1IO5@@@This register is used to control the peripherals connected to nand_dq0 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1378"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO6.html@@@MIXED1IO6@@@This register is used to control the peripherals connected to nand_dq1 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1379"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO7.html@@@MIXED1IO7@@@This register is used to control the peripherals connected to nand_dq2 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1380"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO8.html@@@MIXED1IO8@@@This register is used to control the peripherals connected to nand_dq3 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1381"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED1IO9.html@@@MIXED1IO9@@@This register is used to control the peripherals connected to nand_dq4 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1382"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED2IO0.html@@@MIXED2IO0@@@This register is used to control the peripherals connected to emac1_mdio Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1383"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED2IO1.html@@@MIXED2IO1@@@This register is used to control the peripherals connected to emac1_mdc Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1384"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED2IO2.html@@@MIXED2IO2@@@This register is used to control the peripherals connected to emac1_tx_d2 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1385"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED2IO3.html@@@MIXED2IO3@@@This register is used to control the peripherals connected to emac1_tx_d3 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1386"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED2IO4.html@@@MIXED2IO4@@@This register is used to control the peripherals connected to emac1_rx_clk Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1387"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED2IO5.html@@@MIXED2IO5@@@This register is used to control the peripherals connected to emac1_rx_ctl Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1388"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED2IO6.html@@@MIXED2IO6@@@This register is used to control the peripherals connected to emac1_rx_d2 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1389"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_MIXED2IO7.html@@@MIXED2IO7@@@This register is used to control the peripherals connected to emac1_rx_d3 Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1390"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_NANDUSEFPGA.html@@@NANDUSEFPGA@@@Selection between HPS Pins and FPGA Interface for NAND signals. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1391"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_RGMII0USEFPGA.html@@@RGMII0USEFPGA@@@Selection between HPS Pins and FPGA Interface for RGMII0 signals. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1392"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_RGMII1USEFPGA.html@@@RGMII1USEFPGA@@@Selection between HPS Pins and FPGA Interface for RGMII1 signals. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1393"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_SPIM0USEFPGA.html@@@SPIM0USEFPGA@@@Selection between HPS Pins and FPGA Interface for SPIM0 signals. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1394"]= "reg_default_component/register_sysmgr_sysmgr_pinmuxgrp_SPIM1USEFPGA.html@@@SPIM1USEFPGA@@@Selection between HPS Pins and FPGA Interface for SPIM1 signals. Only reset by a cold reset (ignores warm reset). NOTE: These registers should not be modified after IO configuration.There is no support for dynamically changing the Pin Mux selections...";
fil["1395"]= "reg_default_component/register_sysmgr_sysmgr_romcodegrp_bootromswstate.html@@@bootromswstate@@@32-bits general purpose register used by the Boot ROM code. Actual usage is defined in the Boot ROM source code...";
fil["1396"]= "reg_default_component/register_sysmgr_sysmgr_romcodegrp_cpu1startaddr.html@@@cpu1startaddr@@@When CPU1 is released from reset and the Boot ROM is located at the CPU1 reset exception address (the typical case), the Boot ROM reset handler code reads the address stored in this register and jumps it to hand off execution to user software...";
fil["1397"]= "reg_default_component/register_sysmgr_sysmgr_romcodegrp_ctrl.html@@@ctrl@@@Contains information used to control Boot ROM code...";
fil["1398"]= "reg_default_component/register_sysmgr_sysmgr_romcodegrp_initswlastld.html@@@initswlastld@@@Contains the index of the last preloader software image loaded by the Boot ROM from the boot device...";
fil["1399"]= "reg_default_component/register_sysmgr_sysmgr_romcodegrp_initswstate.html@@@initswstate@@@The preloader software (loaded by the Boot ROM) writes the magic value 0x49535756 (ISWV in ASCII) to this register when it has reached a valid state...";
fil["1400"]= "reg_default_component/register_sysmgr_sysmgr_romcodegrp_sysmgr_romcodegrp_warmramgrp_crc.html@@@crc@@@Length of region in On-chip RAM for CRC validation...";
fil["1401"]= "reg_default_component/register_sysmgr_sysmgr_romcodegrp_sysmgr_romcodegrp_warmramgrp_datastart.html@@@datastart@@@Offset into On-chip RAM of the start of the region for CRC validation...";
fil["1402"]= "reg_default_component/register_sysmgr_sysmgr_romcodegrp_sysmgr_romcodegrp_warmramgrp_enable.html@@@enable@@@Enables or disables the warm reset from On-chip RAM feature...";
fil["1403"]= "reg_default_component/register_sysmgr_sysmgr_romcodegrp_sysmgr_romcodegrp_warmramgrp_execution.html@@@execution@@@Offset into On-chip RAM to enter to on a warm boot...";
fil["1404"]= "reg_default_component/register_sysmgr_sysmgr_romcodegrp_sysmgr_romcodegrp_warmramgrp_length.html@@@length@@@Length of region in On-chip RAM for CRC validation...";
fil["1405"]= "reg_default_component/register_sysmgr_sysmgr_romhwgrp_ctrl.html@@@ctrl@@@Controls behavior of Boot ROM hardware. All fields are only reset by a cold reset (ignore warm reset...";
fil["1406"]= "reg_default_component/register_sysmgr_sysmgr_scanmgrgrp_ctrl.html@@@ctrl@@@Controls behaviors of Scan Manager not controlled by registers in the Scan Manager itself...";
fil["1407"]= "reg_default_component/register_sysmgr_sysmgr_sdmmcgrp_ctrl.html@@@ctrl@@@Registers used by the SDMMC Controller. All fields are reset by a cold or warm reset...";
fil["1408"]= "reg_default_component/register_sysmgr_sysmgr_sdmmcgrp_l3master.html@@@l3master@@@Controls the L3 master HPROT AHB-Lite signal. These register bits should be updated only during system initialization prior to removing the peripheral from reset. They may not be changed dynamically during peripheral operation All fields are reset by a cold or warm reset...";
fil["1409"]= "reg_default_component/register_sysmgr_sysmgr_usbgrp_l3master.html@@@l3master@@@Controls the L3 master HPROT AHB-Lite signal. These register bits should be updated only during system initialization prior to removing the peripheral from reset. They may not be changed dynamically during peripheral operation All fields are reset by a cold or warm reset...";
fil["1410"]= "reg_default_component/register_sysmgr_wddbg.html@@@wddbg@@@Controls the behavior of the L4 watchdogs when the CPUs are in debug mode. These control registers are used to drive the pause input signal of the L4 watchdogs. Note that the watchdogs built into the MPU automatically are paused when their associated CPU enters debug mode. Only reset by a cold reset...";
fil["1411"]= "reg_default_component/register_timer_timer1controlreg.html@@@timer1controlreg@@@This register controls enabling, operating mode (free-running or user-defined-count), and interrupt mask of Timer1. You can program this register to enable or disable Timer1 and to control its mode of operation...";
fil["1412"]= "reg_default_component/register_timer_timer1currentval.html@@@timer1currentval@@@Provides current value of Timer1...";
fil["1413"]= "reg_default_component/register_timer_timer1eoi.html@@@timer1eoi@@@Clears Timer1 interrupt when read...";
fil["1414"]= "reg_default_component/register_timer_timer1intstat.html@@@timer1intstat@@@Provides the interrupt status of Timer1 after masking...";
fil["1415"]= "reg_default_component/register_timer_timer1loadcount.html@@@timer1loadcount@@@Used to load counter value into Timer1...";
fil["1416"]= "reg_default_component/register_timer_timerscompversion.html@@@timerscompversion@@@Module Instance Base Address Register Address sptimer0 0xFFC08000 0xFFC080AC sptimer1 0xFFC09000 0xFFC090AC osc1timer0 0xFFD00000 0xFFD000AC osc1timer1 0xFFD01000 0xFFD010AC Offset: 0xAC Access: RO...";
fil["1417"]= "reg_default_component/register_timer_timerseoi.html@@@timerseoi@@@Clears Timer1 interrupt when read. Because there is only Timer1 in this module instance, reading this register has the same effect as reading timer1eoi...";
fil["1418"]= "reg_default_component/register_timer_timersintstat.html@@@timersintstat@@@Provides the interrupt status for all timers after masking. Because there is only Timer1 in this module instance, this status is the same as timer1intstat...";
fil["1419"]= "reg_default_component/register_timer_timersrawintstat.html@@@timersrawintstat@@@Provides the interrupt status for all timers before masking. Note that there is only Timer1 in this module instance...";
fil["1420"]= "reg_default_component/register_uart_RFW.html@@@RFW@@@Used only with FIFO access test mode...";
fil["1421"]= "reg_default_component/register_uart_cpr.html@@@cpr@@@Describes various fixed hardware setups states...";
fil["1422"]= "reg_default_component/register_uart_ctr.html@@@ctr@@@Describes a hex value associated with the component...";
fil["1423"]= "reg_default_component/register_uart_dmasa.html@@@dmasa@@@DMA Operation Control...";
fil["1424"]= "reg_default_component/register_uart_far.html@@@far@@@This register is used in FIFO access testing...";
fil["1425"]= "reg_default_component/register_uart_fcr.html@@@fcr@@@Controls FIFO Operations when written...";
fil["1426"]= "reg_default_component/register_uart_htx.html@@@htx@@@Used to halt transmission for testing...";
fil["1427"]= "reg_default_component/register_uart_ier_dlh.html@@@ier_dlh@@@This is a multi-function register. This register enables/disables receive and transmit interrupts and also controls the most-significant 8-bits of the baud rate divisor. Divisor Latch High Register: This register is accessed when the DLAB bit [7] of the LCR Register is set to 1.Bits[7:0] contain the high order 8-bits of the baud rate divisor.The output baud rate is equal to the serial clock l4_sp_clk frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor): Note that with the Divisor Latch Registers (DLLand DLH) set to zero, the baud clock is disabled and no serial communications will occur. Also, once the DLL is set, at least 8 l4_sp_clk clock cycles should be allowed to pass before transmitting or receiving data. Interrupt Enable Register: This register may only be accessed when the DLAB bit [7] of the LCR Register is set to 0.Allows control of the Interrupt Enables for transmit and receive functions...";
fil["1428"]= "reg_default_component/register_uart_iir.html@@@iir@@@Returns interrupt identification and FIFO enable/disable when read...";
fil["1429"]= "reg_default_component/register_uart_lcr.html@@@lcr@@@Formats serial dat...";
fil["1430"]= "reg_default_component/register_uart_lsr.html@@@lsr@@@Reports status of transmit and receive...";
fil["1431"]= "reg_default_component/register_uart_mcr.html@@@mcr@@@Reports various operations of the modem signals...";
fil["1432"]= "reg_default_component/register_uart_msr.html@@@msr@@@It should be noted that whenever bits 0, 1, 2 or 3 are set to logic one, to indicate a change on the modem control inputs, a modem status interrupt will be generated if enabled via the IER regardless of when the change occurred. Since the delta bits (bits 0, 1, 3) can get set after a reset if their respective modem signals are active (see individual bits for details), a read of the MSR after reset can be performed to prevent unwanted interrupts...";
fil["1433"]= "reg_default_component/register_uart_rbr_thr_dll.html@@@rbr_thr_dll@@@This is a multi-function register. This register holds receives and transmit data and controls the least-signficant 8 bits of the baud rate divisor...";
fil["1434"]= "reg_default_component/register_uart_rfl.html@@@rfl@@@This register is used to specify the number of data entries in the Tx FIFO. Status Bits in USR register monitor the FIFO state...";
fil["1435"]= "reg_default_component/register_uart_sbcr.html@@@sbcr@@@This is a shadow register for the Break bit [6] of the register LCR. This can be used to remove the burden of having to performing a read modify write on the LCR...";
fil["1436"]= "reg_default_component/register_uart_scr.html@@@scr@@@Scratchpad Register...";
fil["1437"]= "reg_default_component/register_uart_sdmam.html@@@sdmam@@@This is a shadow register for the DMA mode bit (FCR[3...";
fil["1438"]= "reg_default_component/register_uart_sfe.html@@@sfe@@@This is a shadow register for the FIFO enable bit [0] of register FCR...";
fil["1439"]= "reg_default_component/register_uart_srbr.html@@@srbr@@@Used to accomadate burst accesses from the master...";
fil["1440"]= "reg_default_component/register_uart_srr.html@@@srr@@@Provides Software Resets for Tx/Rx FIFO s and the uart...";
fil["1441"]= "reg_default_component/register_uart_srt.html@@@srt@@@This is a shadow register for the Rx trigger bits (FCR[7:6...";
fil["1442"]= "reg_default_component/register_uart_srts.html@@@srts@@@This is a shadow register for the RTS status (MCR[1]), this can be used to remove the burden of having to performing a read modify write on the MCR...";
fil["1443"]= "reg_default_component/register_uart_stet.html@@@stet@@@This is a shadow register for the Tx empty trigger bits (FCR[5:4...";
fil["1444"]= "reg_default_component/register_uart_sthr.html@@@sthr@@@Used to accomadate burst accesses from the master...";
fil["1445"]= "reg_default_component/register_uart_tfl.html@@@tfl@@@This register is used to specify the number of data entries in the Tx FIFO. Status Bits in USR register monitor the FIFO state...";
fil["1446"]= "reg_default_component/register_uart_tfr.html@@@tfr@@@Used in FIFO Access test mode...";
fil["1447"]= "reg_default_component/register_uart_ucv.html@@@ucv@@@Used only with Additional Features...";
fil["1448"]= "reg_default_component/register_uart_usr.html@@@usr@@@Status of FIFO Operations...";
fil["1449"]= "reg_default_component/register_usb_usb_devgrp_DOEPCTL2.html@@@DOEPCTL2@@@Out Endpoint 2...";
fil["1450"]= "reg_default_component/register_usb_usb_devgrp_DOEPCTL3.html@@@DOEPCTL3@@@Out Endpoint 3...";
fil["1451"]= "reg_default_component/register_usb_usb_devgrp_DTXFSTS2.html@@@DTXFSTS2@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1452"]= "reg_default_component/register_usb_usb_devgrp_Doepint4.html@@@Doepint4@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1453"]= "reg_default_component/register_usb_usb_devgrp_daint.html@@@daint@@@When a significant event occurs on an endpoint, a Device All Endpoints Interrupt register interrupts the application using the Device OUT Endpoints Interrupt bit or Device IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively). This is shown in Figure 5-2. There is one interrupt bit per endpoint, up to a maximum of 16 bits for OUT endpoints and 16 bits for IN endpoints. for a bidirectional endpoint, the corresponding IN and OUT interrupt bits are used. Bits in this register are set and cleared when the application sets and clears bits in the corresponding Device Endpoint-n Interrupt register (DIEPINTn/DOEPINTn...";
fil["1454"]= "reg_default_component/register_usb_usb_devgrp_daintmsk.html@@@daintmsk@@@The Device Endpoint Interrupt Mask register works with the Device Endpoint Interrupt register to interrupt the application when an event occurs on a device endpoint. However, the Device All Endpoints Interrupt (DAINT) register bit corresponding to that interrupt is still set...";
fil["1455"]= "reg_default_component/register_usb_usb_devgrp_dcfg.html@@@dcfg@@@This register configures the core in Device mode after power-on or after certain control commands or enumeration. Do not make changes to this register after initial programming...";
fil["1456"]= "reg_default_component/register_usb_usb_devgrp_dctl.html@@@dctl@@@Module Instance Base Address Register Address usb0 0xFFB00000 0xFFB00804 usb1 0xFFB40000 0xFFB40804 Offset: 0x804 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Reserved...";
fil["1457"]= "reg_default_component/register_usb_usb_devgrp_diepctl0.html@@@diepctl0@@@This register covers Device Control IN Endpoint...";
fil["1458"]= "reg_default_component/register_usb_usb_devgrp_diepctl1.html@@@diepctl1@@@Endpoint_number: 1...";
fil["1459"]= "reg_default_component/register_usb_usb_devgrp_diepctl10.html@@@diepctl10@@@Endpoint_number: 1...";
fil["1460"]= "reg_default_component/register_usb_usb_devgrp_diepctl11.html@@@diepctl11@@@Endpoint_number: 11...";
fil["1461"]= "reg_default_component/register_usb_usb_devgrp_diepctl12.html@@@diepctl12@@@Endpoint_number: 12...";
fil["1462"]= "reg_default_component/register_usb_usb_devgrp_diepctl13.html@@@diepctl13@@@Endpoint_number: 13...";
fil["1463"]= "reg_default_component/register_usb_usb_devgrp_diepctl14.html@@@diepctl14@@@Endpoint_number: 14...";
fil["1464"]= "reg_default_component/register_usb_usb_devgrp_diepctl15.html@@@diepctl15@@@Endpoint_number: 15...";
fil["1465"]= "reg_default_component/register_usb_usb_devgrp_diepctl2.html@@@diepctl2@@@Endpoint_number: 2...";
fil["1466"]= "reg_default_component/register_usb_usb_devgrp_diepctl3.html@@@diepctl3@@@Endpoint_number: 3...";
fil["1467"]= "reg_default_component/register_usb_usb_devgrp_diepctl4.html@@@diepctl4@@@Endpoint_number: 4...";
fil["1468"]= "reg_default_component/register_usb_usb_devgrp_diepctl5.html@@@diepctl5@@@Endpoint_number: 5...";
fil["1469"]= "reg_default_component/register_usb_usb_devgrp_diepctl6.html@@@diepctl6@@@Endpoint_number: 6...";
fil["1470"]= "reg_default_component/register_usb_usb_devgrp_diepctl7.html@@@diepctl7@@@Endpoint_number: 7...";
fil["1471"]= "reg_default_component/register_usb_usb_devgrp_diepctl8.html@@@diepctl8@@@Endpoint_number: 8...";
fil["1472"]= "reg_default_component/register_usb_usb_devgrp_diepctl9.html@@@diepctl9@@@Endpoint_number: 9...";
fil["1473"]= "reg_default_component/register_usb_usb_devgrp_diepdma0.html@@@diepdma0@@@DMA Addressing...";
fil["1474"]= "reg_default_component/register_usb_usb_devgrp_diepdma1.html@@@diepdma1@@@DMA Addressing...";
fil["1475"]= "reg_default_component/register_usb_usb_devgrp_diepdma10.html@@@diepdma10@@@DMA Addressing...";
fil["1476"]= "reg_default_component/register_usb_usb_devgrp_diepdma11.html@@@diepdma11@@@DMA Addressing...";
fil["1477"]= "reg_default_component/register_usb_usb_devgrp_diepdma12.html@@@diepdma12@@@DMA Addressing...";
fil["1478"]= "reg_default_component/register_usb_usb_devgrp_diepdma13.html@@@diepdma13@@@DMA Addressing...";
fil["1479"]= "reg_default_component/register_usb_usb_devgrp_diepdma14.html@@@diepdma14@@@DMA Addressing...";
fil["1480"]= "reg_default_component/register_usb_usb_devgrp_diepdma15.html@@@diepdma15@@@DMA Addressing...";
fil["1481"]= "reg_default_component/register_usb_usb_devgrp_diepdma2.html@@@diepdma2@@@DMA Addressing...";
fil["1482"]= "reg_default_component/register_usb_usb_devgrp_diepdma3.html@@@diepdma3@@@DMA Addressing...";
fil["1483"]= "reg_default_component/register_usb_usb_devgrp_diepdma4.html@@@diepdma4@@@DMA Addressing...";
fil["1484"]= "reg_default_component/register_usb_usb_devgrp_diepdma5.html@@@diepdma5@@@DMA Addressing...";
fil["1485"]= "reg_default_component/register_usb_usb_devgrp_diepdma6.html@@@diepdma6@@@DMA Addressing...";
fil["1486"]= "reg_default_component/register_usb_usb_devgrp_diepdma7.html@@@diepdma7@@@DMA Addressing...";
fil["1487"]= "reg_default_component/register_usb_usb_devgrp_diepdma8.html@@@diepdma8@@@DMA Addressing...";
fil["1488"]= "reg_default_component/register_usb_usb_devgrp_diepdma9.html@@@diepdma9@@@DMA Addressing...";
fil["1489"]= "reg_default_component/register_usb_usb_devgrp_diepdmab0.html@@@diepdmab0@@@Endpoint 16...";
fil["1490"]= "reg_default_component/register_usb_usb_devgrp_diepdmab1.html@@@diepdmab1@@@DMA Buffer Address...";
fil["1491"]= "reg_default_component/register_usb_usb_devgrp_diepdmab10.html@@@diepdmab10@@@DMA Buffer Address...";
fil["1492"]= "reg_default_component/register_usb_usb_devgrp_diepdmab11.html@@@diepdmab11@@@DMA Buffer Address...";
fil["1493"]= "reg_default_component/register_usb_usb_devgrp_diepdmab12.html@@@diepdmab12@@@DMA Buffer Address...";
fil["1494"]= "reg_default_component/register_usb_usb_devgrp_diepdmab13.html@@@diepdmab13@@@DMA Buffer Address...";
fil["1495"]= "reg_default_component/register_usb_usb_devgrp_diepdmab14.html@@@diepdmab14@@@DMA Buffer Address...";
fil["1496"]= "reg_default_component/register_usb_usb_devgrp_diepdmab15.html@@@diepdmab15@@@DMA Buffer Address...";
fil["1497"]= "reg_default_component/register_usb_usb_devgrp_diepdmab2.html@@@diepdmab2@@@DMA Buffer Address...";
fil["1498"]= "reg_default_component/register_usb_usb_devgrp_diepdmab3.html@@@diepdmab3@@@DMA Buffer Address...";
fil["1499"]= "reg_default_component/register_usb_usb_devgrp_diepdmab4.html@@@diepdmab4@@@DMA Buffer Address...";
fil["1500"]= "reg_default_component/register_usb_usb_devgrp_diepdmab5.html@@@diepdmab5@@@Device IN Endpoint 1 Buffer Address...";
fil["1501"]= "reg_default_component/register_usb_usb_devgrp_diepdmab6.html@@@diepdmab6@@@DMA Buffer Address...";
fil["1502"]= "reg_default_component/register_usb_usb_devgrp_diepdmab7.html@@@diepdmab7@@@DMA Buffer Address...";
fil["1503"]= "reg_default_component/register_usb_usb_devgrp_diepdmab8.html@@@diepdmab8@@@DMA Buffer Address...";
fil["1504"]= "reg_default_component/register_usb_usb_devgrp_diepdmab9.html@@@diepdmab9@@@DMA Buffer Address...";
fil["1505"]= "reg_default_component/register_usb_usb_devgrp_diepempmsk.html@@@diepempmsk@@@This register is used to control the IN endpoint FIFO empty interrupt generation (DIEPINTn.TxfEmp...";
fil["1506"]= "reg_default_component/register_usb_usb_devgrp_diepint0.html@@@diepint0@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1507"]= "reg_default_component/register_usb_usb_devgrp_diepint1.html@@@diepint1@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1508"]= "reg_default_component/register_usb_usb_devgrp_diepint10.html@@@diepint10@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1509"]= "reg_default_component/register_usb_usb_devgrp_diepint11.html@@@diepint11@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1510"]= "reg_default_component/register_usb_usb_devgrp_diepint12.html@@@diepint12@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1511"]= "reg_default_component/register_usb_usb_devgrp_diepint13.html@@@diepint13@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1512"]= "reg_default_component/register_usb_usb_devgrp_diepint14.html@@@diepint14@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1513"]= "reg_default_component/register_usb_usb_devgrp_diepint15.html@@@diepint15@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1514"]= "reg_default_component/register_usb_usb_devgrp_diepint2.html@@@diepint2@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1515"]= "reg_default_component/register_usb_usb_devgrp_diepint3.html@@@diepint3@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1516"]= "reg_default_component/register_usb_usb_devgrp_diepint4.html@@@diepint4@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1517"]= "reg_default_component/register_usb_usb_devgrp_diepint5.html@@@diepint5@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1518"]= "reg_default_component/register_usb_usb_devgrp_diepint6.html@@@diepint6@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1519"]= "reg_default_component/register_usb_usb_devgrp_diepint7.html@@@diepint7@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1520"]= "reg_default_component/register_usb_usb_devgrp_diepint8.html@@@diepint8@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1521"]= "reg_default_component/register_usb_usb_devgrp_diepint9.html@@@diepint9@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1522"]= "reg_default_component/register_usb_usb_devgrp_diepmsk.html@@@diepmsk@@@This register works with each of the Device IN Endpoint Interrupt (DIEPINTn) registers for all endpoints to generate an interrupt per IN endpoint. The IN endpoint interrupt for a specific status in the DIEPINTn register can be masked by writing to the corresponding bit in this register. Status bits are masked by default...";
fil["1523"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz0.html@@@dieptsiz0@@@The application must modify this register before enabling endpoint 0. Once endpoint 0 is enabled using Endpoint Enable bit of the Device Control Endpoint 0 Control registers (DIEPCTL0.EPEna/DOEPCTL0.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit. Nonzero endpoints use the registers for endpoints 1 to 15. When Scatter/Gather DMA mode is enabled, this register must not be programmed by the application. If the application reads this register when Scatter/Gather DMA mode is enabled, the core returns all zeros...";
fil["1524"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz1.html@@@dieptsiz1@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1525"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz10.html@@@dieptsiz10@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1526"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz11.html@@@dieptsiz11@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1527"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz12.html@@@dieptsiz12@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1528"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz13.html@@@dieptsiz13@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1529"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz14.html@@@dieptsiz14@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1530"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz15.html@@@dieptsiz15@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1531"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz2.html@@@dieptsiz2@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1532"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz3.html@@@dieptsiz3@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1533"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz4.html@@@dieptsiz4@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1534"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz5.html@@@dieptsiz5@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1535"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz6.html@@@dieptsiz6@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1536"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz7.html@@@dieptsiz7@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1537"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz8.html@@@dieptsiz8@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1538"]= "reg_default_component/register_usb_usb_devgrp_dieptsiz9.html@@@dieptsiz9@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1539"]= "reg_default_component/register_usb_usb_devgrp_doepctl0.html@@@doepctl0@@@This is Control OUT Endpoint 0 Control register...";
fil["1540"]= "reg_default_component/register_usb_usb_devgrp_doepctl1.html@@@doepctl1@@@Out Endpoint 1...";
fil["1541"]= "reg_default_component/register_usb_usb_devgrp_doepctl10.html@@@doepctl10@@@Out Endpoint 1...";
fil["1542"]= "reg_default_component/register_usb_usb_devgrp_doepctl11.html@@@doepctl11@@@Out Endpoint 11...";
fil["1543"]= "reg_default_component/register_usb_usb_devgrp_doepctl12.html@@@doepctl12@@@Out Endpoint 12...";
fil["1544"]= "reg_default_component/register_usb_usb_devgrp_doepctl13.html@@@doepctl13@@@Out Endpoint 13...";
fil["1545"]= "reg_default_component/register_usb_usb_devgrp_doepctl14.html@@@doepctl14@@@Out Endpoint 14...";
fil["1546"]= "reg_default_component/register_usb_usb_devgrp_doepctl15.html@@@doepctl15@@@Out Endpoint 15...";
fil["1547"]= "reg_default_component/register_usb_usb_devgrp_doepctl4.html@@@doepctl4@@@Out Endpoint 4...";
fil["1548"]= "reg_default_component/register_usb_usb_devgrp_doepctl5.html@@@doepctl5@@@Out Endpoint 5...";
fil["1549"]= "reg_default_component/register_usb_usb_devgrp_doepctl6.html@@@doepctl6@@@Out Endpoint 6...";
fil["1550"]= "reg_default_component/register_usb_usb_devgrp_doepctl7.html@@@doepctl7@@@Endpoint_number: 7...";
fil["1551"]= "reg_default_component/register_usb_usb_devgrp_doepctl8.html@@@doepctl8@@@Out Endpoint 8...";
fil["1552"]= "reg_default_component/register_usb_usb_devgrp_doepctl9.html@@@doepctl9@@@Out Endpoint 9...";
fil["1553"]= "reg_default_component/register_usb_usb_devgrp_doepdma0.html@@@doepdma0@@@DMA Addressing...";
fil["1554"]= "reg_default_component/register_usb_usb_devgrp_doepdma1.html@@@doepdma1@@@DMA Addressing...";
fil["1555"]= "reg_default_component/register_usb_usb_devgrp_doepdma10.html@@@doepdma10@@@DMA OUT Address...";
fil["1556"]= "reg_default_component/register_usb_usb_devgrp_doepdma11.html@@@doepdma11@@@DMA OUT Address...";
fil["1557"]= "reg_default_component/register_usb_usb_devgrp_doepdma12.html@@@doepdma12@@@DMA OUT Address...";
fil["1558"]= "reg_default_component/register_usb_usb_devgrp_doepdma13.html@@@doepdma13@@@DMA OUT Address...";
fil["1559"]= "reg_default_component/register_usb_usb_devgrp_doepdma14.html@@@doepdma14@@@DMA OUT Address...";
fil["1560"]= "reg_default_component/register_usb_usb_devgrp_doepdma15.html@@@doepdma15@@@DMA OUT Address...";
fil["1561"]= "reg_default_component/register_usb_usb_devgrp_doepdma2.html@@@doepdma2@@@DMA Addressing...";
fil["1562"]= "reg_default_component/register_usb_usb_devgrp_doepdma3.html@@@doepdma3@@@DMA OUT Address...";
fil["1563"]= "reg_default_component/register_usb_usb_devgrp_doepdma4.html@@@doepdma4@@@DMA OUT Address...";
fil["1564"]= "reg_default_component/register_usb_usb_devgrp_doepdma5.html@@@doepdma5@@@DMA OUT Address...";
fil["1565"]= "reg_default_component/register_usb_usb_devgrp_doepdma6.html@@@doepdma6@@@DMA OUT Address...";
fil["1566"]= "reg_default_component/register_usb_usb_devgrp_doepdma7.html@@@doepdma7@@@DMA OUT Address...";
fil["1567"]= "reg_default_component/register_usb_usb_devgrp_doepdma8.html@@@doepdma8@@@DMA OUT Address...";
fil["1568"]= "reg_default_component/register_usb_usb_devgrp_doepdma9.html@@@doepdma9@@@DMA OUT Address...";
fil["1569"]= "reg_default_component/register_usb_usb_devgrp_doepdmab0.html@@@doepdmab0@@@DMA Buffer Address...";
fil["1570"]= "reg_default_component/register_usb_usb_devgrp_doepdmab1.html@@@doepdmab1@@@DMA Buffer Address...";
fil["1571"]= "reg_default_component/register_usb_usb_devgrp_doepdmab10.html@@@doepdmab10@@@DMA Buffer Address...";
fil["1572"]= "reg_default_component/register_usb_usb_devgrp_doepdmab11.html@@@doepdmab11@@@DMA Buffer Address...";
fil["1573"]= "reg_default_component/register_usb_usb_devgrp_doepdmab12.html@@@doepdmab12@@@DMA Buffer Address...";
fil["1574"]= "reg_default_component/register_usb_usb_devgrp_doepdmab13.html@@@doepdmab13@@@DMA Buffer Address...";
fil["1575"]= "reg_default_component/register_usb_usb_devgrp_doepdmab14.html@@@doepdmab14@@@DMA Buffer Address...";
fil["1576"]= "reg_default_component/register_usb_usb_devgrp_doepdmab15.html@@@doepdmab15@@@DMA Buffer Address...";
fil["1577"]= "reg_default_component/register_usb_usb_devgrp_doepdmab2.html@@@doepdmab2@@@DMA Buffer Address...";
fil["1578"]= "reg_default_component/register_usb_usb_devgrp_doepdmab3.html@@@doepdmab3@@@DMA Buffer Address...";
fil["1579"]= "reg_default_component/register_usb_usb_devgrp_doepdmab4.html@@@doepdmab4@@@DMA Buffer Address...";
fil["1580"]= "reg_default_component/register_usb_usb_devgrp_doepdmab5.html@@@doepdmab5@@@DMA Buffer Address...";
fil["1581"]= "reg_default_component/register_usb_usb_devgrp_doepdmab6.html@@@doepdmab6@@@DMA Buffer Address...";
fil["1582"]= "reg_default_component/register_usb_usb_devgrp_doepdmab7.html@@@doepdmab7@@@DMA Buffer Address...";
fil["1583"]= "reg_default_component/register_usb_usb_devgrp_doepdmab8.html@@@doepdmab8@@@DMA Buffer Address...";
fil["1584"]= "reg_default_component/register_usb_usb_devgrp_doepdmab9.html@@@doepdmab9@@@DMA Buffer Address...";
fil["1585"]= "reg_default_component/register_usb_usb_devgrp_doepint0.html@@@doepint0@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1586"]= "reg_default_component/register_usb_usb_devgrp_doepint1.html@@@doepint1@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1587"]= "reg_default_component/register_usb_usb_devgrp_doepint10.html@@@doepint10@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1588"]= "reg_default_component/register_usb_usb_devgrp_doepint11.html@@@doepint11@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1589"]= "reg_default_component/register_usb_usb_devgrp_doepint12.html@@@doepint12@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1590"]= "reg_default_component/register_usb_usb_devgrp_doepint13.html@@@doepint13@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1591"]= "reg_default_component/register_usb_usb_devgrp_doepint14.html@@@doepint14@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1592"]= "reg_default_component/register_usb_usb_devgrp_doepint15.html@@@doepint15@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1593"]= "reg_default_component/register_usb_usb_devgrp_doepint2.html@@@doepint2@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1594"]= "reg_default_component/register_usb_usb_devgrp_doepint3.html@@@doepint3@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1595"]= "reg_default_component/register_usb_usb_devgrp_doepint5.html@@@doepint5@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1596"]= "reg_default_component/register_usb_usb_devgrp_doepint6.html@@@doepint6@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1597"]= "reg_default_component/register_usb_usb_devgrp_doepint7.html@@@doepint7@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1598"]= "reg_default_component/register_usb_usb_devgrp_doepint8.html@@@doepint8@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1599"]= "reg_default_component/register_usb_usb_devgrp_doepint9.html@@@doepint9@@@This register indicates the status of an endpoint with respect to USB- and AHB-related events. The application must read this register when the OUT Endpoints Interrupt bit or IN Endpoints Interrupt bit of the Core Interrupt register (GINTSTS.OEPInt or GINTSTS.IEPInt, respectively) is set. Before the application can read this register, it must first read the Device All Endpoints Interrupt (DAINT) register to get the exact endpoint number for the Device Endpoint-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the DAINT and GINTSTS registers...";
fil["1600"]= "reg_default_component/register_usb_usb_devgrp_doepmsk.html@@@doepmsk@@@This register works with each of the Device OUT Endpoint Interrupt (DOEPINTn) registers for all endpoints to generate an interrupt per OUT endpoint. The OUT endpoint interrupt for a specific status in the DOEPINTn register can be masked by writing into the corresponding bit in this register. Status bits are masked by default...";
fil["1601"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz0.html@@@doeptsiz0@@@The application must modify this register before enabling endpoint 0. Once endpoint 0 is enabled using Endpoint Enable bit of the Device Control Endpoint 0 Control registers (DIEPCTL0.EPEna/DOEPCTL0.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit. Nonzero endpoints use the registers for endpoints 1 to 15. When Scatter/Gather DMA mode is enabled, this register must not be programmed by the application. If the application reads this register when Scatter/Gather DMA mode is enabled, the core returns all zeros...";
fil["1602"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz1.html@@@doeptsiz1@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1603"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz10.html@@@doeptsiz10@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1604"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz11.html@@@doeptsiz11@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1605"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz12.html@@@doeptsiz12@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1606"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz13.html@@@doeptsiz13@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1607"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz14.html@@@doeptsiz14@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1608"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz15.html@@@doeptsiz15@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1609"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz2.html@@@doeptsiz2@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1610"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz3.html@@@doeptsiz3@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1611"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz4.html@@@doeptsiz4@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1612"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz5.html@@@doeptsiz5@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1613"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz6.html@@@doeptsiz6@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1614"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz7.html@@@doeptsiz7@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1615"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz8.html@@@doeptsiz8@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1616"]= "reg_default_component/register_usb_usb_devgrp_doeptsiz9.html@@@doeptsiz9@@@The application must modify this register before enabling the endpoint. Once the endpoint is enabled using Endpoint Enable bit of the Device Endpoint-n Control registers (DIEPCTLn.EPEna/DOEPCTLn.EPEna), the core modifies this register. The application can only read this register once the core has cleared the Endpoint Enable bit...";
fil["1617"]= "reg_default_component/register_usb_usb_devgrp_dsts.html@@@dsts@@@This register indicates the status of the core with respect to USB-related events. It must be read on interrupts from Device All Interrupts (DAINT) register...";
fil["1618"]= "reg_default_component/register_usb_usb_devgrp_dthrctl.html@@@dthrctl@@@Thresholding is not supported in Slave mode and so this register must not be programmed in Slave mode. for threshold support, the AHB must be run at 60 MHz or higher...";
fil["1619"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts0.html@@@dtxfsts0@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1620"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts1.html@@@dtxfsts1@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1621"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts10.html@@@dtxfsts10@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1622"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts11.html@@@dtxfsts11@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1623"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts12.html@@@dtxfsts12@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1624"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts13.html@@@dtxfsts13@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1625"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts14.html@@@dtxfsts14@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1626"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts15.html@@@dtxfsts15@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1627"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts3.html@@@dtxfsts3@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1628"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts4.html@@@dtxfsts4@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1629"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts5.html@@@dtxfsts5@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1630"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts6.html@@@dtxfsts6@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1631"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts7.html@@@dtxfsts7@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1632"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts8.html@@@dtxfsts8@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1633"]= "reg_default_component/register_usb_usb_devgrp_dtxfsts9.html@@@dtxfsts9@@@This register contains the free space information for the Device IN endpoint TxFIFO...";
fil["1634"]= "reg_default_component/register_usb_usb_devgrp_dvbusdis.html@@@dvbusdis@@@This register specifies the VBUS discharge time after VBUS pulsing during SRP...";
fil["1635"]= "reg_default_component/register_usb_usb_devgrp_dvbuspulse.html@@@dvbuspulse@@@This register specifies the VBUS pulsing time during SRP...";
fil["1636"]= "reg_default_component/register_usb_usb_globgrp_dieptxf1.html@@@dieptxf1@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for each instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1637"]= "reg_default_component/register_usb_usb_globgrp_dieptxf10.html@@@dieptxf10@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for each instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1638"]= "reg_default_component/register_usb_usb_globgrp_dieptxf11.html@@@dieptxf11@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for each instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1639"]= "reg_default_component/register_usb_usb_globgrp_dieptxf12.html@@@dieptxf12@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for each instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1640"]= "reg_default_component/register_usb_usb_globgrp_dieptxf13.html@@@dieptxf13@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for each instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1641"]= "reg_default_component/register_usb_usb_globgrp_dieptxf14.html@@@dieptxf14@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for each instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1642"]= "reg_default_component/register_usb_usb_globgrp_dieptxf15.html@@@dieptxf15@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for each instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1643"]= "reg_default_component/register_usb_usb_globgrp_dieptxf2.html@@@dieptxf2@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1644"]= "reg_default_component/register_usb_usb_globgrp_dieptxf3.html@@@dieptxf3@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1645"]= "reg_default_component/register_usb_usb_globgrp_dieptxf4.html@@@dieptxf4@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for each instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1646"]= "reg_default_component/register_usb_usb_globgrp_dieptxf5.html@@@dieptxf5@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for each instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1647"]= "reg_default_component/register_usb_usb_globgrp_dieptxf6.html@@@dieptxf6@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for each instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1648"]= "reg_default_component/register_usb_usb_globgrp_dieptxf7.html@@@dieptxf7@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for each instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1649"]= "reg_default_component/register_usb_usb_globgrp_dieptxf8.html@@@dieptxf8@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for each instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1650"]= "reg_default_component/register_usb_usb_globgrp_dieptxf9.html@@@dieptxf9@@@This register holds the size and memory start address of IN endpoint TxFIFOs implemented in Device mode. Each FIFO holds the data for one IN endpoint. This register is repeated for each instantiated IN endpoint FIFO. For IN endpoint FIFO 0 use GNPTXFSIZ register for programming the size and memory start address...";
fil["1651"]= "reg_default_component/register_usb_usb_globgrp_gahbcfg.html@@@gahbcfg@@@This register can be used to configure the core after power-on or a change in mode. This register mainly contains AHB system-related configuration parameters. Do not change this register after the initial programming. The application must program this register before starting any transactions on either the AHB or the USB...";
fil["1652"]= "reg_default_component/register_usb_usb_globgrp_gdfifocfg.html@@@gdfifocfg@@@Specifies whether Dedicated Transmit FIFOs should be enabled in device mode...";
fil["1653"]= "reg_default_component/register_usb_usb_globgrp_ggpio.html@@@ggpio@@@The application can use this register for general purpose input/output ports or for debugging...";
fil["1654"]= "reg_default_component/register_usb_usb_globgrp_ghwcfg1.html@@@ghwcfg1@@@This register contains the logical endpoint direction(s...";
fil["1655"]= "reg_default_component/register_usb_usb_globgrp_ghwcfg2.html@@@ghwcfg2@@@This register contains configuration options...";
fil["1656"]= "reg_default_component/register_usb_usb_globgrp_ghwcfg3.html@@@ghwcfg3@@@This register contains the configuration options...";
fil["1657"]= "reg_default_component/register_usb_usb_globgrp_ghwcfg4.html@@@ghwcfg4@@@This register contains the configuration options...";
fil["1658"]= "reg_default_component/register_usb_usb_globgrp_gintmsk.html@@@gintmsk@@@This register works with the Interrupt Register (GINTSTS) to interrupt the application. When an interrupt bit is masked, the interrupt associated with that bit is not generated. However, the GINTSTS register bit corresponding to that interrupt is still set...";
fil["1659"]= "reg_default_component/register_usb_usb_globgrp_gintsts.html@@@gintsts@@@This register interrupts the application for system-level events in the current mode (Device mode or Host mode). Some of the bits in this register are valid only in Host mode, while others are valid in Device mode only. This register also indicates the current mode. To clear the interrupt status bits of type R_SS_WC, the application must write 1 into the bit. The FIFO status interrupts are read only; once software reads from or writes to the FIFO while servicing these interrupts, FIFO interrupt conditions are cleared automatically. The application must clear the GINTSTS register at initialization before unmasking the interrupt bit to avoid any interrupts generated prior to initialization...";
fil["1660"]= "reg_default_component/register_usb_usb_globgrp_gnptxfsiz.html@@@gnptxfsiz@@@The application can program the RAM size and the memory start address for the Non-periodic TxFIFO. The fields of this register change, depending on host or device mode...";
fil["1661"]= "reg_default_component/register_usb_usb_globgrp_gnptxsts.html@@@gnptxsts@@@In Device mode, this register is valid only in Shared FIFO operation. It contains the free space information for the Non-periodic TxFIFO and the Nonperiodic Transmit RequestQueue...";
fil["1662"]= "reg_default_component/register_usb_usb_globgrp_gotgctl.html@@@gotgctl@@@The OTG Control and Status register controls the behavior and reflects the status of the OTG function...";
fil["1663"]= "reg_default_component/register_usb_usb_globgrp_gotgint.html@@@gotgint@@@The application reads this register whenever there is an OTG interrupt and clears the bits in this register to clear the OTG interrupt...";
fil["1664"]= "reg_default_component/register_usb_usb_globgrp_gpvndctl.html@@@gpvndctl@@@The application can use this register to access PHY registers. for a ULPI PHY, the core uses the ULPI interface for PHY register access. The application sets Vendor Control register for PHY register access and times the PHY register access. The application polls the VStatus Done bit in this register for the completion of the PHY register access...";
fil["1665"]= "reg_default_component/register_usb_usb_globgrp_grstctl.html@@@grstctl@@@The application uses this register to reset various hardware features inside the core...";
fil["1666"]= "reg_default_component/register_usb_usb_globgrp_grxfsiz.html@@@grxfsiz@@@The application can program the RAM size that must be allocated to the RxFIFO...";
fil["1667"]= "reg_default_component/register_usb_usb_globgrp_grxstsp.html@@@grxstsp@@@A read to the Receive Status Read and Pop register additionally pops the: top data entry out of the RxFIFO. The receive status contents must be interpreted differently in Host and Device modes. The core ignores the receive status pop/read when the receive FIFO is empty and returns a value of 0. The application must only pop the Receive Status FIFO when the Receive FIFO Non-Empty bit of the Core Interrupt register (GINTSTS.RxFLvl) is asserted. Use of these fields vary based on whether the HS OTG core is functioning as a host or a device. Do not read this register ss reset value before configuring the core because the read value is  X  in the simulation...";
fil["1668"]= "reg_default_component/register_usb_usb_globgrp_grxstsr.html@@@grxstsr@@@A read to the Receive Status Read and Pop register additionally pops the: top data entry out of the RxFIFO. The receive status contents must be interpreted differently in Host and Device modes. The core ignores the receive status pop/read when the receive FIFO is empty and returns a value of 0. The application must only pop the Receive Status FIFO when the Receive FIFO Non-Empty bit of the Core Interrupt register (GINTSTS.RxFLvl) is asserted. Use of these fields vary based on whether the HS OTG core is functioning as a host or a device. Do not read this register s reset value before configuring the core because the read value is  X  in the simulation...";
fil["1669"]= "reg_default_component/register_usb_usb_globgrp_gsnpsid.html@@@gsnpsid@@@This read-only register contains the release number of the core being used...";
fil["1670"]= "reg_default_component/register_usb_usb_globgrp_guid.html@@@guid@@@This is a read/write register containing the User ID. This register can be used in the following ways: -To store the version or revision of your system -To store hardware configurations that are outside the otg core As a scratch register...";
fil["1671"]= "reg_default_component/register_usb_usb_globgrp_gusbcfg.html@@@gusbcfg@@@This register can be used to configure the core after power-on or a changing to Host mode or Device mode. It contains USB and USB-PHY related configuration parameters. The application must program this register before starting any transactions on either the AHB or the USB. Do not make changes to this register after the initial programming...";
fil["1672"]= "reg_default_component/register_usb_usb_globgrp_hptxfsiz.html@@@hptxfsiz@@@This register holds the size and the memory start address of the Periodic TxFIFO...";
fil["1673"]= "reg_default_component/register_usb_usb_hostgrp_HCSPLT11.html@@@HCSPLT11@@@Channel number 11...";
fil["1674"]= "reg_default_component/register_usb_usb_hostgrp_haint.html@@@haint@@@When a significant event occurs on a channel, the Host All Channels Interrupt register interrupts the application using the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt). There is one interrupt bit per channel, up to a maximum of 16 bits. Bits in this register are set and cleared when the application sets and clears bits in the corresponding Host Channel-n Interrupt register...";
fil["1675"]= "reg_default_component/register_usb_usb_hostgrp_haintmsk.html@@@haintmsk@@@The Host All Channel Interrupt Mask register works with the Host All Channel Interrupt register to interrupt the application when an event occurs on a channel. There is one interrupt mask bit per channel, up to a maximum of 16 bits...";
fil["1676"]= "reg_default_component/register_usb_usb_hostgrp_hcchar0.html@@@hcchar0@@@Channel_number...";
fil["1677"]= "reg_default_component/register_usb_usb_hostgrp_hcchar1.html@@@hcchar1@@@Host Channel 1 Characteristics Register...";
fil["1678"]= "reg_default_component/register_usb_usb_hostgrp_hcchar10.html@@@hcchar10@@@Host Channel 1 Characteristics Register...";
fil["1679"]= "reg_default_component/register_usb_usb_hostgrp_hcchar11.html@@@hcchar11@@@Host Channel 11 Characteristics Register...";
fil["1680"]= "reg_default_component/register_usb_usb_hostgrp_hcchar12.html@@@hcchar12@@@Host Channel 1 Characteristics Register...";
fil["1681"]= "reg_default_component/register_usb_usb_hostgrp_hcchar13.html@@@hcchar13@@@Host Channel 13 Characteristics Register...";
fil["1682"]= "reg_default_component/register_usb_usb_hostgrp_hcchar14.html@@@hcchar14@@@Host Channel 1 Characteristics Register...";
fil["1683"]= "reg_default_component/register_usb_usb_hostgrp_hcchar15.html@@@hcchar15@@@Host Channel 15 Characteristics Register...";
fil["1684"]= "reg_default_component/register_usb_usb_hostgrp_hcchar2.html@@@hcchar2@@@Host Channel 2 Characteristics Register...";
fil["1685"]= "reg_default_component/register_usb_usb_hostgrp_hcchar3.html@@@hcchar3@@@Channel_number: 3...";
fil["1686"]= "reg_default_component/register_usb_usb_hostgrp_hcchar4.html@@@hcchar4@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1687"]= "reg_default_component/register_usb_usb_hostgrp_hcchar5.html@@@hcchar5@@@Channel_number: 5...";
fil["1688"]= "reg_default_component/register_usb_usb_hostgrp_hcchar6.html@@@hcchar6@@@Host Channel 6 Characteristics Register...";
fil["1689"]= "reg_default_component/register_usb_usb_hostgrp_hcchar7.html@@@hcchar7@@@Host Channel 7 Characteristics Register...";
fil["1690"]= "reg_default_component/register_usb_usb_hostgrp_hcchar8.html@@@hcchar8@@@Host Channel 8 Characteristics Register...";
fil["1691"]= "reg_default_component/register_usb_usb_hostgrp_hcchar9.html@@@hcchar9@@@Host Channel 9 Characteristics Register...";
fil["1692"]= "reg_default_component/register_usb_usb_hostgrp_hcdma0.html@@@hcdma0@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1693"]= "reg_default_component/register_usb_usb_hostgrp_hcdma1.html@@@hcdma1@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1694"]= "reg_default_component/register_usb_usb_hostgrp_hcdma10.html@@@hcdma10@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1695"]= "reg_default_component/register_usb_usb_hostgrp_hcdma11.html@@@hcdma11@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1696"]= "reg_default_component/register_usb_usb_hostgrp_hcdma12.html@@@hcdma12@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1697"]= "reg_default_component/register_usb_usb_hostgrp_hcdma13.html@@@hcdma13@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1698"]= "reg_default_component/register_usb_usb_hostgrp_hcdma14.html@@@hcdma14@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1699"]= "reg_default_component/register_usb_usb_hostgrp_hcdma15.html@@@hcdma15@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1700"]= "reg_default_component/register_usb_usb_hostgrp_hcdma2.html@@@hcdma2@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1701"]= "reg_default_component/register_usb_usb_hostgrp_hcdma3.html@@@hcdma3@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1702"]= "reg_default_component/register_usb_usb_hostgrp_hcdma4.html@@@hcdma4@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1703"]= "reg_default_component/register_usb_usb_hostgrp_hcdma5.html@@@hcdma5@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1704"]= "reg_default_component/register_usb_usb_hostgrp_hcdma6.html@@@hcdma6@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1705"]= "reg_default_component/register_usb_usb_hostgrp_hcdma7.html@@@hcdma7@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1706"]= "reg_default_component/register_usb_usb_hostgrp_hcdma8.html@@@hcdma8@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1707"]= "reg_default_component/register_usb_usb_hostgrp_hcdma9.html@@@hcdma9@@@This register is used by the OTG host in the internal DMA mode to maintain the current buffer pointer for IN/OUT transactions. The starting DMA address must be DWORD-aligned...";
fil["1708"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab0.html@@@hcdmab0@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1709"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab1.html@@@hcdmab1@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1710"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab10.html@@@hcdmab10@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1711"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab11.html@@@hcdmab11@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1712"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab12.html@@@hcdmab12@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1713"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab13.html@@@hcdmab13@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1714"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab14.html@@@hcdmab14@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1715"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab15.html@@@hcdmab15@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1716"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab2.html@@@hcdmab2@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1717"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab3.html@@@hcdmab3@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1718"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab4.html@@@hcdmab4@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1719"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab5.html@@@hcdmab5@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1720"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab6.html@@@hcdmab6@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1721"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab7.html@@@hcdmab7@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1722"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab8.html@@@hcdmab8@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1723"]= "reg_default_component/register_usb_usb_hostgrp_hcdmab9.html@@@hcdmab9@@@These registers are present only in case of Scatter/Gather DMA. These registers are implemented in RAM instead of flop-based implementation. Holds the current buffer address. This register is updated as and when the data transfer for the corresponding end point is in progress. This register is present only in Scatter/Gather DMA mode. Otherwise this field is reserved...";
fil["1724"]= "reg_default_component/register_usb_usb_hostgrp_hcfg.html@@@hcfg@@@Host Mode control. This register must be programmed every time the core changes to Host mode...";
fil["1725"]= "reg_default_component/register_usb_usb_hostgrp_hcint0.html@@@hcint0@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1726"]= "reg_default_component/register_usb_usb_hostgrp_hcint1.html@@@hcint1@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1727"]= "reg_default_component/register_usb_usb_hostgrp_hcint10.html@@@hcint10@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1728"]= "reg_default_component/register_usb_usb_hostgrp_hcint11.html@@@hcint11@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1729"]= "reg_default_component/register_usb_usb_hostgrp_hcint12.html@@@hcint12@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1730"]= "reg_default_component/register_usb_usb_hostgrp_hcint13.html@@@hcint13@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1731"]= "reg_default_component/register_usb_usb_hostgrp_hcint14.html@@@hcint14@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1732"]= "reg_default_component/register_usb_usb_hostgrp_hcint15.html@@@hcint15@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1733"]= "reg_default_component/register_usb_usb_hostgrp_hcint2.html@@@hcint2@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1734"]= "reg_default_component/register_usb_usb_hostgrp_hcint3.html@@@hcint3@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1735"]= "reg_default_component/register_usb_usb_hostgrp_hcint4.html@@@hcint4@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1736"]= "reg_default_component/register_usb_usb_hostgrp_hcint5.html@@@hcint5@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1737"]= "reg_default_component/register_usb_usb_hostgrp_hcint6.html@@@hcint6@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1738"]= "reg_default_component/register_usb_usb_hostgrp_hcint7.html@@@hcint7@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1739"]= "reg_default_component/register_usb_usb_hostgrp_hcint8.html@@@hcint8@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1740"]= "reg_default_component/register_usb_usb_hostgrp_hcint9.html@@@hcint9@@@This register indicates the status of a channel with respect to USB- and AHB-related events. The application must read this register when the Host Channels Interrupt bit of the Core Interrupt register (GINTSTS.HChInt) is set. Before the application can read this register, it must first read the Host All Channels Interrupt (HAINT) register to get the exact channel number for the Host Channel-n Interrupt register. The application must clear the appropriate bit in this register to clear the corresponding bits in the HAINT and GINTSTS registers...";
fil["1741"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk0.html@@@hcintmsk0@@@This register reflects the mask for each channel status described in the previous section...";
fil["1742"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk1.html@@@hcintmsk1@@@This register reflects the mask for each channel status described in the previous section...";
fil["1743"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk10.html@@@hcintmsk10@@@This register reflects the mask for each channel status described in the previous section...";
fil["1744"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk11.html@@@hcintmsk11@@@This register reflects the mask for each channel status described in the previous section...";
fil["1745"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk12.html@@@hcintmsk12@@@This register reflects the mask for each channel status described in the previous section...";
fil["1746"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk13.html@@@hcintmsk13@@@This register reflects the mask for each channel status described in the previous section...";
fil["1747"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk14.html@@@hcintmsk14@@@This register reflects the mask for each channel status described in the previous section...";
fil["1748"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk15.html@@@hcintmsk15@@@This register reflects the mask for each channel status described in the previous section...";
fil["1749"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk2.html@@@hcintmsk2@@@This register reflects the mask for each channel status described in the previous section...";
fil["1750"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk3.html@@@hcintmsk3@@@This register reflects the mask for each channel status described in the previous section...";
fil["1751"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk4.html@@@hcintmsk4@@@This register reflects the mask for Channel 4 interrupt status bits...";
fil["1752"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk5.html@@@hcintmsk5@@@This register reflects the mask for each channel status described in the previous section...";
fil["1753"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk6.html@@@hcintmsk6@@@This register reflects the mask for each channel status described in the previous section...";
fil["1754"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk7.html@@@hcintmsk7@@@This register reflects the mask for each channel status described in the previous section...";
fil["1755"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk8.html@@@hcintmsk8@@@This register reflects the mask for each channel status described in the previous section...";
fil["1756"]= "reg_default_component/register_usb_usb_hostgrp_hcintmsk9.html@@@hcintmsk9@@@This register reflects the mask for each channel status described in the previous section...";
fil["1757"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt0.html@@@hcsplt0@@@Channel_number...";
fil["1758"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt1.html@@@hcsplt1@@@Channel_number 1...";
fil["1759"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt10.html@@@hcsplt10@@@Channel_number 1...";
fil["1760"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt12.html@@@hcsplt12@@@Channel_number 1...";
fil["1761"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt13.html@@@hcsplt13@@@Channel_number 13...";
fil["1762"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt14.html@@@hcsplt14@@@Channel_number 14...";
fil["1763"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt15.html@@@hcsplt15@@@Channel_number 15...";
fil["1764"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt2.html@@@hcsplt2@@@Channel_number 2...";
fil["1765"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt3.html@@@hcsplt3@@@Channel_number 3...";
fil["1766"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt4.html@@@hcsplt4@@@Channel_number 4...";
fil["1767"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt5.html@@@hcsplt5@@@Channel_number 5...";
fil["1768"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt6.html@@@hcsplt6@@@Channel_number 6...";
fil["1769"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt7.html@@@hcsplt7@@@Channel_number 7...";
fil["1770"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt8.html@@@hcsplt8@@@Channel_number 8...";
fil["1771"]= "reg_default_component/register_usb_usb_hostgrp_hcsplt9.html@@@hcsplt9@@@Channel_number 9...";
fil["1772"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz0.html@@@hctsiz0@@@Buffer DMA Mode...";
fil["1773"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz1.html@@@hctsiz1@@@Buffer DMA Mode...";
fil["1774"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz10.html@@@hctsiz10@@@Buffer DMA Mode...";
fil["1775"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz11.html@@@hctsiz11@@@Buffer DMA Mode...";
fil["1776"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz12.html@@@hctsiz12@@@Buffer DMA Mode...";
fil["1777"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz13.html@@@hctsiz13@@@Buffer DMA Mode...";
fil["1778"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz14.html@@@hctsiz14@@@Module Instance Base Address Register Address usb0 0xFFB00000 0xFFB006D0 usb1 0xFFB40000 0xFFB406D0 Offset: 0x6D0 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 dopng RW 0x0 pid...";
fil["1779"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz15.html@@@hctsiz15@@@Module Instance Base Address Register Address usb0 0xFFB00000 0xFFB006F0 usb1 0xFFB40000 0xFFB406F0 Offset: 0x6F0 Access: RW Bit Fields 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 dopng RW 0x0 pid...";
fil["1780"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz2.html@@@hctsiz2@@@Buffer DMA Mode...";
fil["1781"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz3.html@@@hctsiz3@@@Buffer DMA Mode...";
fil["1782"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz4.html@@@hctsiz4@@@Buffer DMA Mode Channel 4...";
fil["1783"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz5.html@@@hctsiz5@@@Buffer DMA Mode...";
fil["1784"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz6.html@@@hctsiz6@@@Buffer DMA Mode...";
fil["1785"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz7.html@@@hctsiz7@@@Buffer DMA Mode...";
fil["1786"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz8.html@@@hctsiz8@@@Buffer DMA Mode...";
fil["1787"]= "reg_default_component/register_usb_usb_hostgrp_hctsiz9.html@@@hctsiz9@@@Buffer DMA Mode...";
fil["1788"]= "reg_default_component/register_usb_usb_hostgrp_hfir.html@@@hfir@@@This register stores the frame interval information for the current speed to which the otg core has enumerated...";
fil["1789"]= "reg_default_component/register_usb_usb_hostgrp_hflbaddr.html@@@hflbaddr@@@This Register is valid only for Host mode Scatter-Gather DMA. Starting address of the Frame list. This register is used only for Isochronous and Interrupt Channels...";
fil["1790"]= "reg_default_component/register_usb_usb_hostgrp_hfnum.html@@@hfnum@@@This register contains the free space information for the Periodic TxFIFO and the Periodic Transmit Request Queue...";
fil["1791"]= "reg_default_component/register_usb_usb_hostgrp_hprt.html@@@hprt@@@This register is available only in Host mode. Currently, the OTG Host supports only one port. A single register holds USB port-related information such as USB reset, enable, suspend, resume, connect status, and test mode for each port.The R_SS_WC bits in this register can trigger an interrupt to the application through the Host Port Interrupt bit of the Core Interrupt register (GINTSTS.PrtInt). On a Port Interrupt, the application must read this register and clear the bit that caused the interrupt. for the R_SS_WC bits, the application must write a 1 to the bit to clear the interrupt...";
fil["1792"]= "reg_default_component/register_usb_usb_hostgrp_hptxsts.html@@@hptxsts@@@This register contains the free space information for the Periodic TxFIFO and the Periodic Transmit Request Queue...";
fil["1793"]= "reg_default_component/register_usb_usb_pwrclkgrp_pcgcctl.html@@@pcgcctl@@@This register is available in Host and Device modes. The application can use this register to control the core s power-down and clock gating features. Because the CSR module is turned off during power-down, this register is implemented in the AHB Slave BIU module...";
